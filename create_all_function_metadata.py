#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö 84 —Å–ª—É—á–∞–µ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
"""

import psycopg2
import yaml
import re
from rich.console import Console
from rich.panel import Panel
from rich.table import Table

console = Console()

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
with open('config/config.yaml', 'r', encoding='utf-8') as file:
    config = yaml.safe_load(file)

postgres_config = config['database']['postgres']

console.print(Panel.fit(
    '[bold green]üöÄ –°–û–ó–î–ê–ù–ò–ï –ú–ï–¢–ê–î–ê–ù–ù–´–• –î–õ–Ø –í–°–ï–• 84 –°–õ–£–ß–ê–ï–í –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –§–£–ù–ö–¶–ò–ô[/bold green]',
    style='green'
))

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
conn = psycopg2.connect(
    host=postgres_config['host'],
    port=postgres_config['port'],
    dbname=postgres_config['database'],
    user=postgres_config['user'],
    password=postgres_config['password'],
    connect_timeout=postgres_config['connection_timeout'],
    sslmode=postgres_config['ssl_mode']
)

cursor = conn.cursor()

def apply_rule_to_definition(definition: str, rule_id: int) -> str:
    """
    –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –º–∞–ø–ø–∏–Ω–≥–∞ –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é
    """
    cursor.execute('''
        SELECT mapping_pattern, replacement_pattern, mapping_type
        FROM mcl.function_mapping_rules
        WHERE id = %s
    ''', (rule_id,))
    
    pattern, replacement, mapping_type = cursor.fetchone()
    
    if mapping_type == 'direct':
        # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞
        return definition.replace(pattern.split('\\')[0], replacement.split('\\')[0])
    elif mapping_type == 'regex':
        # –ó–∞–º–µ–Ω–∞ –ø–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤—ã—Ä–∞–∂–µ–Ω–∏—é
        return re.sub(pattern, replacement, definition, flags=re.IGNORECASE)
    
    return definition

def process_all_default_constraints():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö default constraints —Å getdate()"""
    console.print('\n1Ô∏è‚É£ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö default constraints —Å getdate()...')
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ default constraints —Å getdate()
    cursor.execute('''
        SELECT 
            pdc.id,
            pdc.definition,
            pt.object_name,
            pdc.constraint_name
        FROM mcl.postgres_default_constraints pdc
        JOIN mcl.postgres_tables pt ON pdc.table_id = pt.id
        JOIN mcl.mssql_tables mt ON pt.source_table_id = mt.id
        WHERE mt.task_id = 2
            AND pdc.definition IS NOT NULL
            AND pdc.definition ILIKE '%getdate%'
            AND pdc.function_mapping_rule_id IS NULL
    ''')
    
    all_default_constraints = cursor.fetchall()
    console.print(f'–ù–∞–π–¥–µ–Ω–æ default constraints —Å getdate(): {len(all_default_constraints)}')
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è getdate
    cursor.execute('''
        SELECT id FROM mcl.function_mapping_rules 
        WHERE source_function = 'getdate' AND 'default_constraint' = ANY(applicable_objects)
    ''')
    
    getdate_rule_id = cursor.fetchone()[0]
    processed_defaults = 0
    
    for constraint_id, definition, table_name, constraint_name in all_default_constraints:
        postgres_definition = apply_rule_to_definition(definition, getdate_rule_id)
        
        cursor.execute('''
            UPDATE mcl.postgres_default_constraints 
            SET 
                function_mapping_rule_id = %s,
                postgres_definition = %s,
                mapping_status = 'mapped',
                mapping_complexity = 'simple'
            WHERE id = %s
        ''', (getdate_rule_id, postgres_definition, constraint_id))
        
        processed_defaults += 1
    
    console.print(f'‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ default constraints: {processed_defaults}')
    return processed_defaults

def process_all_computed_columns():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö computed columns —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
    console.print('\n2Ô∏è‚É£ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö computed columns —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏...')
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ computed columns —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏
    cursor.execute('''
        SELECT 
            pc.id,
            pc.computed_definition,
            pt.object_name,
            pc.column_name
        FROM mcl.postgres_columns pc
        JOIN mcl.postgres_tables pt ON pc.table_id = pt.id
        JOIN mcl.mssql_tables mt ON pt.source_table_id = mt.id
        WHERE mt.task_id = 2
            AND pc.computed_definition IS NOT NULL
            AND pc.computed_definition ILIKE ANY(ARRAY['%isnull%', '%len%', '%upper%', '%lower%', '%substring%', '%convert%', '%year%', '%month%', '%day%'])
            AND pc.computed_function_mapping_rule_id IS NULL
    ''')
    
    all_computed_columns = cursor.fetchall()
    console.print(f'–ù–∞–π–¥–µ–Ω–æ computed columns —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏: {len(all_computed_columns)}')
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –º–∞–ø–ø–∏–Ω–≥–∞
    cursor.execute('''
        SELECT id, source_function, mapping_pattern, replacement_pattern, mapping_type
        FROM mcl.function_mapping_rules
        WHERE is_active = TRUE
            AND 'computed_column' = ANY(applicable_objects)
        ORDER BY complexity_level, source_function
    ''')
    
    mapping_rules = cursor.fetchall()
    processed_computed = 0
    
    for column_id, definition, table_name, column_name in all_computed_columns:
        # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏
        matched_rule = None
        postgres_definition = definition
        
        for rule_id, source_func, pattern, replacement, mapping_type in mapping_rules:
            if source_func in definition.lower():
                matched_rule = rule_id
                if mapping_type == 'direct':
                    postgres_definition = postgres_definition.replace(source_func, replacement.split('\\')[0])
                elif mapping_type == 'regex':
                    postgres_definition = re.sub(pattern, replacement, postgres_definition, flags=re.IGNORECASE)
                break
        
        if matched_rule:
            cursor.execute('''
                UPDATE mcl.postgres_columns 
                SET 
                    computed_function_mapping_rule_id = %s,
                    postgres_computed_definition = %s,
                    computed_mapping_status = 'mapped',
                    computed_mapping_complexity = 'simple'
                WHERE id = %s
            ''', (matched_rule, postgres_definition, column_id))
            
            processed_computed += 1
    
    console.print(f'‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ computed columns: {processed_computed}')
    return processed_computed

def validate_complete_coverage():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è"""
    console.print('\n3Ô∏è‚É£ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è...')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    cursor.execute('''
        SELECT 
            COUNT(*) as total_with_functions,
            COUNT(function_mapping_rule_id) as mapped
        FROM mcl.postgres_default_constraints pdc
        JOIN mcl.postgres_tables pt ON pdc.table_id = pt.id
        JOIN mcl.mssql_tables mt ON pt.source_table_id = mt.id
        WHERE mt.task_id = 2
            AND pdc.definition IS NOT NULL
            AND pdc.definition ILIKE '%getdate%'
    ''')
    
    default_final = cursor.fetchone()
    
    cursor.execute('''
        SELECT 
            COUNT(*) as total_with_functions,
            COUNT(computed_function_mapping_rule_id) as mapped
        FROM mcl.postgres_columns pc
        JOIN mcl.postgres_tables pt ON pc.table_id = pt.id
        JOIN mcl.mssql_tables mt ON pt.source_table_id = mt.id
        WHERE mt.task_id = 2
            AND pc.computed_definition IS NOT NULL
            AND pc.computed_definition ILIKE ANY(ARRAY['%isnull%', '%len%', '%upper%', '%lower%', '%substring%', '%convert%', '%year%', '%month%', '%day%'])
    ''')
    
    computed_final = cursor.fetchone()
    
    total_cases = default_final[0] + computed_final[0]
    total_mapped = default_final[1] + computed_final[1]
    coverage_percentage = (total_mapped / total_cases * 100) if total_cases > 0 else 0
    
    console.print(f'\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:')
    console.print(f'Default constraints —Å getdate(): {default_final[0]} –≤—Å–µ–≥–æ, {default_final[1]} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ')
    console.print(f'Computed columns —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏: {computed_final[0]} –≤—Å–µ–≥–æ, {computed_final[1]} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ')
    console.print(f'–û–±—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: {total_mapped}/{total_cases} ({coverage_percentage:.1f}%)')
    
    return total_cases, total_mapped, coverage_percentage

def show_rule_statistics():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª"""
    console.print('\n4Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª...')
    
    cursor.execute('''
        SELECT 
            fmr.source_function,
            fmr.target_function,
            COUNT(pdc.id) as default_constraints_count,
            COUNT(pc.id) as computed_columns_count,
            (COUNT(pdc.id) + COUNT(pc.id)) as total_usage
        FROM mcl.function_mapping_rules fmr
        LEFT JOIN mcl.postgres_default_constraints pdc ON fmr.id = pdc.function_mapping_rule_id
        LEFT JOIN mcl.postgres_columns pc ON fmr.id = pc.computed_function_mapping_rule_id
        GROUP BY fmr.id, fmr.source_function, fmr.target_function
        HAVING (COUNT(pdc.id) + COUNT(pc.id)) > 0
        ORDER BY total_usage DESC
    ''')
    
    rule_stats = cursor.fetchall()
    
    table = Table(title='üìà –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –ü–†–ê–í–ò–õ')
    table.add_column('–ò—Å—Ö–æ–¥–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è', style='cyan', width=15)
    table.add_column('–¶–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è', style='green', width=15)
    table.add_column('Default constraints', style='blue', width=18)
    table.add_column('Computed columns', style='yellow', width=15)
    table.add_column('–í—Å–µ–≥–æ', style='red', width=8)
    
    for source_func, target_func, default_count, computed_count, total in rule_stats:
        table.add_row(
            source_func, 
            target_func, 
            str(default_count),
            str(computed_count),
            str(total)
        )
    
    console.print(table)
    return rule_stats

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ default constraints
        processed_defaults = process_all_default_constraints()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ computed columns
        processed_computed = process_all_computed_columns()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–∫—Ä—ã—Ç–∏—è
        total_cases, total_mapped, coverage_percentage = validate_complete_coverage()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∞–≤–∏–ª
        rule_stats = show_rule_statistics()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        final_report = Panel(
            f'[bold green]üéØ –ú–ï–¢–ê–î–ê–ù–ù–´–ï –î–õ–Ø –í–°–ï–• –°–õ–£–ß–ê–ï–í –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –§–£–ù–ö–¶–ò–ô –°–û–ó–î–ê–ù–´![/bold green]\n'
            f'\n'
            f'[yellow]üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:[/yellow]\n'
            f'‚Ä¢ Default constraints –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_defaults}\n'
            f'‚Ä¢ Computed columns –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_computed}\n'
            f'‚Ä¢ –í—Å–µ–≥–æ —Å–ª—É—á–∞–µ–≤: {total_cases}\n'
            f'‚Ä¢ –û–±—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: {total_mapped}/{total_cases} ({coverage_percentage:.1f}%)\n'
            f'\n'
            f'[yellow]üîß –ê–ö–¢–ò–í–ù–´–ï –ü–†–ê–í–ò–õ–ê:[/yellow]\n'
            f'‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏: {len(rule_stats)}\n'
            f'‚Ä¢ –û–±—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {sum(r[4] for r in rule_stats)}\n'
            f'\n'
            f'[green]‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢:[/green]\n'
            f'–í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ª—É—á–∞–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!\n'
            f'–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏.',
            title='üèÜ –£–°–ü–ï–®–ù–û–ï –ó–ê–í–ï–†–®–ï–ù–ò–ï',
            border_style='green'
        )
        
        console.print(final_report)
        
        conn.commit()
        console.print('\n‚úÖ –ú–ï–¢–ê–î–ê–ù–ù–´–ï –î–õ–Ø –í–°–ï–• –°–õ–£–ß–ê–ï–í –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –§–£–ù–ö–¶–ò–ô –°–û–ó–î–ê–ù–´!')
        
    except Exception as e:
        console.print(f'[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}[/red]')
        conn.rollback()
    finally:
        conn.close()

if __name__ == '__main__':
    main()