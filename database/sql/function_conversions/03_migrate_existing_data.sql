-- ============================================================================
-- FEMCL: –ú–∏–≥—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ function_conversions
-- ============================================================================
-- –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2025-10-07
-- –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π –≤ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
-- ============================================================================

-- ============================================================================
-- 1. –ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã—á–∏—Å–ª—è–µ–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ (postgres_columns)
-- ============================================================================

DO $$ 
DECLARE
    v_count INTEGER;
BEGIN
    RAISE NOTICE 'üìä –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ postgres_columns...';
    
    INSERT INTO mcl.column_function_conversions 
        (column_id, source_definition, target_definition, 
         mapping_rule_id, mapping_status, mapping_complexity, mapping_notes,
         created_at, updated_at)
    SELECT 
        pc.id as column_id,
        pc.computed_definition as source_definition,
        pc.postgres_computed_definition as target_definition,
        pc.computed_function_mapping_rule_id as mapping_rule_id,
        CASE 
            WHEN pc.computed_mapping_status = 'mapped' THEN 'automatic-mapped'
            ELSE COALESCE(pc.computed_mapping_status, 'pending')
        END as mapping_status,
        COALESCE(pc.computed_mapping_complexity, 'simple') as mapping_complexity,
        pc.computed_mapping_notes as mapping_notes,
        COALESCE(pc.created_at, NOW()) as created_at,
        COALESCE(pc.updated_at, NOW()) as updated_at
    FROM mcl.postgres_columns pc
    JOIN mcl.postgres_tables pt ON pc.table_id = pt.id
    JOIN mcl.mssql_tables mt ON pt.source_table_id = mt.id
    WHERE pc.is_computed = true 
      AND mt.task_id = 2
      AND pc.computed_definition IS NOT NULL
      AND NOT EXISTS (
          SELECT 1 FROM mcl.column_function_conversions cfc 
          WHERE cfc.column_id = pc.id
      );
    
    GET DIAGNOSTICS v_count = ROW_COUNT;
    RAISE NOTICE '  ‚úÖ –í—ã—á–∏—Å–ª—è–µ–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: %', v_count;
END $$;

-- ============================================================================
-- 2. –ú–∏–≥—Ä–∞—Ü–∏—è DEFAULT –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
-- ============================================================================

DO $$ 
DECLARE
    v_count INTEGER;
BEGIN
    RAISE NOTICE 'üìä –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ postgres_default_constraints...';
    
    INSERT INTO mcl.default_constraint_function_conversions 
        (constraint_id, source_definition, target_definition,
         mapping_rule_id, mapping_status, mapping_complexity, mapping_notes,
         created_at, updated_at)
    SELECT 
        pdc.id as constraint_id,
        pdc.definition as source_definition,
        pdc.postgres_definition as target_definition,
        pdc.function_mapping_rule_id as mapping_rule_id,
        CASE 
            WHEN pdc.mapping_status = 'mapped' THEN 'automatic-mapped'
            ELSE COALESCE(pdc.mapping_status, 'pending')
        END as mapping_status,
        COALESCE(pdc.mapping_complexity, 'simple') as mapping_complexity,
        pdc.mapping_notes as mapping_notes,
        COALESCE(pdc.created_at, NOW()) as created_at,
        COALESCE(pdc.updated_at, NOW()) as updated_at
    FROM mcl.postgres_default_constraints pdc
    WHERE pdc.definition IS NOT NULL 
      AND pdc.definition != ''
      AND NOT EXISTS (
          SELECT 1 FROM mcl.default_constraint_function_conversions dcfc 
          WHERE dcfc.constraint_id = pdc.id
      );
    
    GET DIAGNOSTICS v_count = ROW_COUNT;
    RAISE NOTICE '  ‚úÖ DEFAULT –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: %', v_count;
END $$;

-- ============================================================================
-- 3. –ú–∏–≥—Ä–∞—Ü–∏—è CHECK –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
-- ============================================================================

DO $$ 
DECLARE
    v_count INTEGER;
BEGIN
    RAISE NOTICE 'üìä –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ postgres_check_constraints...';
    
    INSERT INTO mcl.check_constraint_function_conversions 
        (constraint_id, source_definition, target_definition,
         mapping_rule_id, mapping_status, mapping_complexity, mapping_notes,
         created_at, updated_at)
    SELECT 
        pcc.id as constraint_id,
        pcc.definition as source_definition,
        pcc.postgres_definition as target_definition,
        pcc.function_mapping_rule_id as mapping_rule_id,
        CASE 
            WHEN pcc.mapping_status = 'mapped' THEN 'automatic-mapped'
            ELSE COALESCE(pcc.mapping_status, 'pending')
        END as mapping_status,
        COALESCE(pcc.mapping_complexity, 'simple') as mapping_complexity,
        pcc.mapping_notes as mapping_notes,
        COALESCE(pcc.created_at, NOW()) as created_at,
        COALESCE(pcc.updated_at, NOW()) as updated_at
    FROM mcl.postgres_check_constraints pcc
    WHERE pcc.definition IS NOT NULL 
      AND pcc.definition != ''
      AND NOT EXISTS (
          SELECT 1 FROM mcl.check_constraint_function_conversions ccfc 
          WHERE ccfc.constraint_id = pcc.id
      );
    
    GET DIAGNOSTICS v_count = ROW_COUNT;
    RAISE NOTICE '  ‚úÖ CHECK –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: %', v_count;
END $$;

-- ============================================================================
-- –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
-- ============================================================================

DO $$ 
DECLARE
    v_total INTEGER;
    v_columns INTEGER;
    v_defaults INTEGER;
    v_checks INTEGER;
BEGIN
    SELECT COUNT(*) INTO v_total FROM mcl.function_conversions;
    SELECT COUNT(*) INTO v_columns FROM mcl.column_function_conversions;
    SELECT COUNT(*) INTO v_defaults FROM mcl.default_constraint_function_conversions;
    SELECT COUNT(*) INTO v_checks FROM mcl.check_constraint_function_conversions;
    
    RAISE NOTICE '';
    RAISE NOTICE '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê';
    RAISE NOTICE 'üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ò–ì–†–ê–¶–ò–ò';
    RAISE NOTICE '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê';
    RAISE NOTICE '–í—Å–µ–≥–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–π (—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è): %', v_total;
    RAISE NOTICE '';
    RAISE NOTICE '–ü–æ —Ç–∏–ø–∞–º –æ–±—ä–µ–∫—Ç–æ–≤:';
    RAISE NOTICE '  ‚Ä¢ –í—ã—á–∏—Å–ª—è–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏:   %', v_columns;
    RAISE NOTICE '  ‚Ä¢ DEFAULT –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:   %', v_defaults;
    RAISE NOTICE '  ‚Ä¢ CHECK –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:     %', v_checks;
    RAISE NOTICE '';
    RAISE NOTICE '‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!';
    RAISE NOTICE '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê';
END $$;
