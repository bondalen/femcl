#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
"""
import os
import sys
import psycopg2
from datetime import datetime
from rich.console import Console

console = Console()

def update_migration_progress(task_id=2):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
        conn = psycopg2.connect(
            host="localhost",
            port=5432,
            dbname="fish_eye",
            user="postgres",
            password="postgres"
        )
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
        with conn.cursor() as cur:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            cur.execute("""
                SELECT 
                    COUNT(*) as total_tables,
                    COUNT(CASE WHEN migration_status = 'completed' THEN 1 END) as completed,
                    COUNT(CASE WHEN migration_status = 'in_progress' THEN 1 END) as in_progress,
                    COUNT(CASE WHEN migration_status = 'pending' THEN 1 END) as pending,
                    COUNT(CASE WHEN migration_status = 'failed' THEN 1 END) as failed
                FROM mcl.mssql_tables 
                WHERE task_id = %s
            """, (task_id,))
            
            stats = cur.fetchone()
            total, completed, in_progress, pending, failed = stats
            
            # –¢–µ–∫—É—â–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è
            cur.execute("""
                SELECT 
                    mt.object_name,
                    mt.schema_name,
                    mt.migration_status,
                    mt.migration_date,
                    pt.object_name as target_name
                FROM mcl.mssql_tables mt
                LEFT JOIN mcl.postgres_tables pt ON mt.id = pt.source_table_id
                WHERE mt.task_id = %s
                ORDER BY mt.migration_status, mt.object_name
            """, (task_id,))
            
            tables = cur.fetchall()
            
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_file = f"/home/alex/projects/sql/femcl/progress/{datetime.now().strftime('%Y%m%d_%H%M%S')}_migration_progress.md"
        
        with open(progress_file, 'w', encoding='utf-8') as f:
            f.write(f"""# üìä –ü–†–û–ì–†–ï–°–° –ú–ò–ì–†–ê–¶–ò–ò FEMCL

## üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏

**–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:** {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}  
**–ó–∞–¥–∞—á–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:** ID={task_id}  
**–°—Ç–∞—Ç—É—Å:** üîÑ –ú–ò–ì–†–ê–¶–ò–Ø –í –ü–†–û–¶–ï–°–°–ï  
**–ê–≤—Ç–æ—Ä:** AI Assistant  

## üéØ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

- **–í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏:** {total}
- **–ó–∞–≤–µ—Ä—à–µ–Ω–æ:** {completed}
- **–í –ø—Ä–æ—Ü–µ—Å—Å–µ:** {in_progress}  
- **–û–∂–∏–¥–∞–µ—Ç:** {pending}
- **–û—à–∏–±–æ–∫:** {failed}
- **–ü—Ä–æ–≥—Ä–µ—Å—Å:** {(completed/total*100):.1f}%

## üìä –¢–µ–∫—É—â–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è

### **–ò—Ç–µ—Ä–∞—Ü–∏—è #{datetime.now().strftime('%Y%m%d_%H%M%S')}** ({datetime.now().strftime('%d.%m.%Y %H:%M:%S')})
**–°—Ç–∞—Ç—É—Å:** üîÑ –í –ü–†–û–¶–ï–°–°–ï

#### –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è —Ç–µ–∫—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏:

""")
            
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            status_groups = {
                'completed': [],
                'in_progress': [],
                'pending': [],
                'failed': []
            }
            
            for table_name, schema_name, status, migration_date, target_name in tables:
                status_groups[status].append((table_name, schema_name, migration_date, target_name))
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            if status_groups['completed']:
                f.write("#### ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:\n")
                for table_name, schema_name, migration_date, target_name in status_groups['completed']:
                    f.write(f"- **{table_name}** ({schema_name}) ‚Üí {target_name} - {migration_date}\n")
                f.write("\n")
            
            # –¢–∞–±–ª–∏—Ü—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
            if status_groups['in_progress']:
                f.write("#### üîÑ –¢–∞–±–ª–∏—Ü—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ:\n")
                for table_name, schema_name, migration_date, target_name in status_groups['in_progress']:
                    f.write(f"- **{table_name}** ({schema_name}) ‚Üí {target_name} - {migration_date}\n")
                f.write("\n")
            
            # –û–∂–∏–¥–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            if status_groups['pending']:
                f.write("#### ‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã:\n")
                for table_name, schema_name, migration_date, target_name in status_groups['pending']:
                    f.write(f"- **{table_name}** ({schema_name})\n")
                f.write("\n")
            
            # –û—à–∏–±–æ—á–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            if status_groups['failed']:
                f.write("#### ‚ùå –¢–∞–±–ª–∏—Ü—ã —Å –æ—à–∏–±–∫–∞–º–∏:\n")
                for table_name, schema_name, migration_date, target_name in status_groups['failed']:
                    f.write(f"- **{table_name}** ({schema_name}) - {migration_date}\n")
                f.write("\n")
            
            f.write(f"""## üìà –ò—Å—Ç–æ—Ä–∏—è –∏—Ç–µ—Ä–∞—Ü–∏–π

*–ò—Å—Ç–æ—Ä–∏—è –∏—Ç–µ—Ä–∞—Ü–∏–π –≤–µ–¥–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏*

## üö® –ü—Ä–æ–±–ª–µ–º—ã –∏ –æ—à–∏–±–∫–∏

*–ü—Ä–æ–±–ª–µ–º—ã –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏*

## üìù –ó–∞–º–µ—Ç–∫–∏

*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –æ —Ö–æ–¥–µ –º–∏–≥—Ä–∞—Ü–∏–∏*

---
*–§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}*  
*–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}*
""")
        
        console.print(f"[green]‚úÖ –§–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: {progress_file}[/green]")
        console.print(f"[blue]üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {completed}/{total} —Ç–∞–±–ª–∏—Ü –∑–∞–≤–µ—Ä—à–µ–Ω–æ ({(completed/total*100):.1f}%)[/blue]")
        
        return True
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}[/red]")
        return False

if __name__ == "__main__":
    update_migration_progress()