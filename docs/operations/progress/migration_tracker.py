#!/usr/bin/env python3
"""
–¢—Ä–µ–∫–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ FEMCL
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
"""
import os
import sys
import psycopg2
import time
from datetime import datetime
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn, TaskProgressColumn

console = Console()

class MigrationTracker:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    
    def __init__(self, task_id=2):
        self.task_id = task_id
        self.progress_dir = "/home/alex/projects/sql/femcl/progress"
        self.current_file = None
        
    def connect_database(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.conn = psycopg2.connect(
                host="localhost",
                port=5432,
                dbname="fish_eye",
                user="postgres",
                password="postgres"
            )
            return True
        except Exception as e:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}[/red]")
            return False
    
    def get_migration_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        try:
            with self.conn.cursor() as cur:
                cur.execute("""
                    SELECT 
                        COUNT(*) as total_tables,
                        COUNT(CASE WHEN migration_status = 'completed' THEN 1 END) as completed,
                        COUNT(CASE WHEN migration_status = 'in_progress' THEN 1 END) as in_progress,
                        COUNT(CASE WHEN migration_status = 'pending' THEN 1 END) as pending,
                        COUNT(CASE WHEN migration_status = 'failed' THEN 1 END) as failed
                    FROM mcl.mssql_tables 
                    WHERE task_id = %s
                """, (self.task_id,))
                
                stats = cur.fetchone()
                return {
                    'total': stats[0],
                    'completed': stats[1],
                    'in_progress': stats[2],
                    'pending': stats[3],
                    'failed': stats[4]
                }
        except Exception as e:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}[/red]")
            return None
    
    def get_tables_by_status(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º"""
        try:
            with self.conn.cursor() as cur:
                cur.execute("""
                    SELECT 
                        mt.object_name,
                        mt.schema_name,
                        mt.migration_status,
                        mt.migration_date,
                        pt.object_name as target_name
                    FROM mcl.mssql_tables mt
                    LEFT JOIN mcl.postgres_tables pt ON mt.id = pt.source_table_id
                    WHERE mt.task_id = %s
                    ORDER BY mt.migration_status, mt.object_name
                """, (self.task_id,))
                
                tables = cur.fetchall()
                
                # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
                status_groups = {
                    'completed': [],
                    'in_progress': [],
                    'pending': [],
                    'failed': []
                }
                
                for table_name, schema_name, status, migration_date, target_name in tables:
                    status_groups[status].append((table_name, schema_name, migration_date, target_name))
                
                return status_groups
        except Exception as e:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}[/red]")
            return None
    
    def create_progress_file(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        self.current_file = f"{self.progress_dir}/{timestamp}_migration_progress.md"
        
        with open(self.current_file, 'w', encoding='utf-8') as f:
            f.write(f"""# üìä –ü–†–û–ì–†–ï–°–° –ú–ò–ì–†–ê–¶–ò–ò FEMCL

## üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏

**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}  
**–ó–∞–¥–∞—á–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:** ID={self.task_id}  
**–°—Ç–∞—Ç—É—Å:** üöÄ –ù–ê–ß–ê–õ–û –ú–ò–ì–†–ê–¶–ò–ò  
**–ê–≤—Ç–æ—Ä:** AI Assistant  

## üéØ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

- **–í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏:** 0
- **–ó–∞–≤–µ—Ä—à–µ–Ω–æ:** 0
- **–í –ø—Ä–æ—Ü–µ—Å—Å–µ:** 0  
- **–û–∂–∏–¥–∞–µ—Ç:** 0
- **–û—à–∏–±–æ–∫:** 0
- **–ü—Ä–æ–≥—Ä–µ—Å—Å:** 0%

## üìä –¢–µ–∫—É—â–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è

### **–ò—Ç–µ—Ä–∞—Ü–∏—è #{timestamp}** ({datetime.now().strftime('%d.%m.%Y %H:%M:%S')})
**–°—Ç–∞—Ç—É—Å:** üîÑ –ü–û–î–ì–û–¢–û–í–ö–ê

#### –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è —Ç–µ–∫—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏:
*–¢–∞–±–ª–∏—Ü—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏*

#### –•–æ–¥ –ø–µ—Ä–µ–Ω–æ—Å–∞:
*–î–µ—Ç–∞–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏*

## üìà –ò—Å—Ç–æ—Ä–∏—è –∏—Ç–µ—Ä–∞—Ü–∏–π

*–ò—Å—Ç–æ—Ä–∏—è –∏—Ç–µ—Ä–∞—Ü–∏–π –±—É–¥–µ—Ç –≤–µ—Å—Ç–∏—Å—å –ø–æ –º–µ—Ä–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏*

## üö® –ü—Ä–æ–±–ª–µ–º—ã –∏ –æ—à–∏–±–∫–∏

*–ü—Ä–æ–±–ª–µ–º—ã –±—É–¥—É—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ –º–µ—Ä–µ –∏—Ö –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è*

## üìù –ó–∞–º–µ—Ç–∫–∏

*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –æ —Ö–æ–¥–µ –º–∏–≥—Ä–∞—Ü–∏–∏*

---
*–§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}*  
*–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}*
""")
        
        console.print(f"[green]‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {self.current_file}[/green]")
        return self.current_file
    
    def update_progress_file(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        if not self.current_file:
            self.create_progress_file()
        
        stats = self.get_migration_stats()
        if not stats:
            return False
        
        tables = self.get_tables_by_status()
        if not tables:
            return False
        
        progress_percent = (stats['completed'] / stats['total'] * 100) if stats['total'] > 0 else 0
        
        with open(self.current_file, 'w', encoding='utf-8') as f:
            f.write(f"""# üìä –ü–†–û–ì–†–ï–°–° –ú–ò–ì–†–ê–¶–ò–ò FEMCL

## üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏

**–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:** {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}  
**–ó–∞–¥–∞—á–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:** ID={self.task_id}  
**–°—Ç–∞—Ç—É—Å:** üîÑ –ú–ò–ì–†–ê–¶–ò–Ø –í –ü–†–û–¶–ï–°–°–ï  
**–ê–≤—Ç–æ—Ä:** AI Assistant  

## üéØ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

- **–í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏:** {stats['total']}
- **–ó–∞–≤–µ—Ä—à–µ–Ω–æ:** {stats['completed']}
- **–í –ø—Ä–æ—Ü–µ—Å—Å–µ:** {stats['in_progress']}  
- **–û–∂–∏–¥–∞–µ—Ç:** {stats['pending']}
- **–û—à–∏–±–æ–∫:** {stats['failed']}
- **–ü—Ä–æ–≥—Ä–µ—Å—Å:** {progress_percent:.1f}%

## üìä –¢–µ–∫—É—â–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è

### **–ò—Ç–µ—Ä–∞—Ü–∏—è #{datetime.now().strftime('%Y%m%d_%H%M%S')}** ({datetime.now().strftime('%d.%m.%Y %H:%M:%S')})
**–°—Ç–∞—Ç—É—Å:** üîÑ –í –ü–†–û–¶–ï–°–°–ï

#### –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è —Ç–µ–∫—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏:

""")
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            if tables['completed']:
                f.write("#### ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:\n")
                for table_name, schema_name, migration_date, target_name in tables['completed']:
                    f.write(f"- **{table_name}** ({schema_name}) ‚Üí {target_name} - {migration_date}\n")
                f.write("\n")
            
            # –¢–∞–±–ª–∏—Ü—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
            if tables['in_progress']:
                f.write("#### üîÑ –¢–∞–±–ª–∏—Ü—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ:\n")
                for table_name, schema_name, migration_date, target_name in tables['in_progress']:
                    f.write(f"- **{table_name}** ({schema_name}) ‚Üí {target_name} - {migration_date}\n")
                f.write("\n")
            
            # –û–∂–∏–¥–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            if tables['pending']:
                f.write("#### ‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã:\n")
                for table_name, schema_name, migration_date, target_name in tables['pending']:
                    f.write(f"- **{table_name}** ({schema_name})\n")
                f.write("\n")
            
            # –û—à–∏–±–æ—á–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            if tables['failed']:
                f.write("#### ‚ùå –¢–∞–±–ª–∏—Ü—ã —Å –æ—à–∏–±–∫–∞–º–∏:\n")
                for table_name, schema_name, migration_date, target_name in tables['failed']:
                    f.write(f"- **{table_name}** ({schema_name}) - {migration_date}\n")
                f.write("\n")
            
            f.write(f"""## üìà –ò—Å—Ç–æ—Ä–∏—è –∏—Ç–µ—Ä–∞—Ü–∏–π

*–ò—Å—Ç–æ—Ä–∏—è –∏—Ç–µ—Ä–∞—Ü–∏–π –≤–µ–¥–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏*

## üö® –ü—Ä–æ–±–ª–µ–º—ã –∏ –æ—à–∏–±–∫–∏

*–ü—Ä–æ–±–ª–µ–º—ã –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏*

## üìù –ó–∞–º–µ—Ç–∫–∏

*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –æ —Ö–æ–¥–µ –º–∏–≥—Ä–∞—Ü–∏–∏*

---
*–§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}*  
*–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}*
""")
        
        console.print(f"[blue]üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {progress_percent:.1f}% ({stats['completed']}/{stats['total']})[/blue]")
        return True
    
    def display_progress_table(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        stats = self.get_migration_stats()
        if not stats:
            return
        
        table = Table(title="üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –º–∏–≥—Ä–∞—Ü–∏–∏")
        table.add_column("–ú–µ—Ç—Ä–∏–∫–∞", style="cyan")
        table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="green")
        table.add_column("–ü—Ä–æ—Ü–µ–Ω—Ç", style="yellow")
        
        total = stats['total']
        completed = stats['completed']
        in_progress = stats['in_progress']
        pending = stats['pending']
        failed = stats['failed']
        
        progress_percent = (completed / total * 100) if total > 0 else 0
        
        table.add_row("–í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü", str(total), "100%")
        table.add_row("–ó–∞–≤–µ—Ä—à–µ–Ω–æ", str(completed), f"{progress_percent:.1f}%")
        table.add_row("–í –ø—Ä–æ—Ü–µ—Å—Å–µ", str(in_progress), f"{(in_progress/total*100):.1f}%" if total > 0 else "0%")
        table.add_row("–û–∂–∏–¥–∞–µ—Ç", str(pending), f"{(pending/total*100):.1f}%" if total > 0 else "0%")
        table.add_row("–û—à–∏–±–æ–∫", str(failed), f"{(failed/total*100):.1f}%" if total > 0 else "0%")
        
        console.print(table)
    
    def start_monitoring(self, interval=30):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        console.print(Panel.fit("[bold blue]üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏[/bold blue]", border_style="blue"))
        
        if not self.connect_database():
            return False
        
        self.create_progress_file()
        
        try:
            while True:
                self.update_progress_file()
                self.display_progress_table()
                
                console.print(f"[blue]‚è∞ –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {interval} —Å–µ–∫—É–Ω–¥...[/blue]")
                time.sleep(interval)
                
        except KeyboardInterrupt:
            console.print("\n[yellow]‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º[/yellow]")
        except Exception as e:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}[/red]")
        finally:
            if hasattr(self, 'conn'):
                self.conn.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tracker = MigrationTracker()
    tracker.start_monitoring()

if __name__ == "__main__":
    main()