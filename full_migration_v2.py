#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üöÄ –ü–û–õ–ù–û–ú–ê–°–®–¢–ê–ë–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø V2
–°–∏—Å—Ç–µ–º–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–∞–¥–∞—á –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from migration_functions import *
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.progress import Progress, TaskID
from datetime import datetime
import time

console = Console()

def display_task_statistics(task_id: int):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∑–∞–¥–∞—á–µ"""
    try:
        stats = get_task_statistics(task_id)
        
        if not stats:
            console.print(f'[red]‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞[/red]')
            return
        
        console.print(Panel(
            f'[bold blue]üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–î–ê–ß–ò {task_id}[/bold blue]\\n'
            f'\\n'
            f'[cyan]–û–ø–∏—Å–∞–Ω–∏–µ:[/cyan] {stats["description"]}\\n'
            f'[cyan]–°–æ–∑–¥–∞–Ω–∞:[/cyan] {stats["created_at"]}\\n'
            f'\\n'
            f'[green]–í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü:[/green] {stats["total_tables"]}\\n'
            f'[green]–ó–∞–≤–µ—Ä—à–µ–Ω–æ:[/green] {stats["completed_tables"]}\\n'
            f'[yellow]–û–∂–∏–¥–∞–µ—Ç:[/yellow] {stats["pending_tables"]}\\n'
            f'[red]–û—à–∏–±–æ–∫:[/red] {stats["failed_tables"]}\\n'
            f'\\n'
            f'[bold blue]–ü—Ä–æ–≥—Ä–µ—Å—Å:[/bold blue] {stats["completion_percentage"]}%',
            title='–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–î–ê–ß–ò',
            border_style='blue'
        ))
        
    except Exception as e:
        console.print(f'[red]‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}[/red]')

def execute_full_migration_cycle(task_id: int, max_iterations: int = 10) -> int:
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –∑–∞–¥–∞—á–∏"""
    
    console.print(Panel(
        f'[bold green]üöÄ –ü–û–õ–ù–û–ú–ê–°–®–¢–ê–ë–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø V2[/bold green]\\n'
        f'–ó–∞–¥–∞—á–∞: {task_id}\\n'
        f'–ú–∞–∫—Å–∏–º—É–º –∏—Ç–µ—Ä–∞—Ü–∏–π: {max_iterations}',
        title='–ù–ê–ß–ê–õ–û –ú–ò–ì–†–ê–¶–ò–ò',
        border_style='green'
    ))
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–¥–∞—á–∏
    if not validate_migration_task(task_id):
        return 0
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    display_task_statistics(task_id)
    
    total_migrated = 0
    iteration = 0
    
    with Progress() as progress:
        task = progress.add_task("[green]–ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü...", total=100)
        
        while iteration < max_iterations:
            iteration += 1
            
            console.print(f'\\n[bold blue]üîÑ –ò–¢–ï–†–ê–¶–ò–Ø {iteration}[/bold blue]')
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
            tables_to_migrate = get_unmigrated_tables_for_task(task_id)
            
            if not tables_to_migrate:
                console.print(f'[green]‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–¥–∞—á–∏ {task_id} –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã![/green]')
                break
            
            console.print(f'üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏: {len(tables_to_migrate)}')
            
            iteration_migrated = 0
            iteration_failed = 0
            
            # –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –≤ —Ç–µ–∫—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
            for i, (table_id, table_name, schema, rows, status) in enumerate(tables_to_migrate, 1):
                console.print(f'\\nüìã [{i}/{len(tables_to_migrate)}] –ú–∏–≥—Ä–∞—Ü–∏—è: {table_name} (—Å—Ç—Ä–æ–∫: {rows})')
                
                try:
                    success = migrate_single_table(table_id, task_id)
                    
                    if success:
                        iteration_migrated += 1
                        total_migrated += 1
                        progress.update(task, advance=1)
                    else:
                        iteration_failed += 1
                        
                except Exception as e:
                    console.print(f'[red]‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ {table_name}: {e}[/red]')
                    iteration_failed += 1
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏
            console.print(f'\\n[blue]üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Ç–µ—Ä–∞—Ü–∏–∏ {iteration}:[/blue]')
            console.print(f'  ‚Ä¢ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {iteration_migrated}')
            console.print(f'  ‚Ä¢ –û—à–∏–±–æ–∫: {iteration_failed}')
            console.print(f'  ‚Ä¢ –í—Å–µ–≥–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {total_migrated}')
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Ç–µ—Ä–∞—Ü–∏–∏
            log_migration_event(
                'MIGRATION_ITERATION_COMPLETE',
                f'–ò—Ç–µ—Ä–∞—Ü–∏—è {iteration} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {iteration_migrated}, –û—à–∏–±–æ–∫: {iteration_failed}',
                'INFO',
                task_id=task_id
            )
            
            # –ï—Å–ª–∏ –≤ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –Ω–µ –±—ã–ª–æ –º–∏–≥—Ä–∞—Ü–∏–π, –∑–Ω–∞—á–∏—Ç –æ—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü—ã —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
            if iteration_migrated == 0:
                console.print(f'[yellow]‚ö†Ô∏è –í –∏—Ç–µ—Ä–∞—Ü–∏–∏ {iteration} –Ω–µ –±—ã–ª–æ –º–∏–≥—Ä–∞—Ü–∏–π. –í–æ–∑–º–æ–∂–Ω–æ, –æ—Å—Ç–∞–ª–∏—Å—å —Ç–∞–±–ª–∏—Ü—ã —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏.[/yellow]')
                
                # –ü–æ–ø—Ä–æ–±—É–µ–º –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
                remaining_tables = get_remaining_tables_with_dependencies(task_id)
                if remaining_tables:
                    console.print(f'üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏: {len(remaining_tables)}')
                    console.print('[blue]–ü–æ–ø—ã—Ç–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏...[/blue]')
                    
                    for table_id, table_name, schema, rows, status in remaining_tables[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 —Ç–∞–±–ª–∏—Ü–∞–º–∏
                        console.print(f'üîÑ –ü–æ–ø—ã—Ç–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏: {table_name}')
                        try:
                            success = migrate_single_table(table_id, task_id)
                            if success:
                                total_migrated += 1
                                progress.update(task, advance=1)
                        except Exception as e:
                            console.print(f'[red]‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ {table_name}: {e}[/red]')
                else:
                    console.print(f'[green]‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–¥–∞—á–∏ {task_id} —É—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã![/green]')
                    break
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
            time.sleep(1)
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.print(f'\\n[bold green]üéâ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê![/bold green]')
    console.print(f'[blue]–í—Å–µ–≥–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ç–∞–±–ª–∏—Ü: {total_migrated}[/blue]')
    console.print(f'[blue]–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∏—Ç–µ—Ä–∞—Ü–∏–π: {iteration}[/blue]')
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    display_task_statistics(task_id)
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    log_migration_event(
        'FULL_MIGRATION_COMPLETE',
        f'–ü–æ–ª–Ω–æ–º–∞—Å—à—Ç–∞–±–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ {task_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {total_migrated}, –ò—Ç–µ—Ä–∞—Ü–∏–π: {iteration}',
        'INFO',
        task_id=task_id
    )
    
    return total_migrated

def get_remaining_tables_with_dependencies(task_id: int) -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ç–∞–±–ª–∏—Ü —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏"""
    try:
        config = load_config()
        postgres_config = config['database']['postgres']
        
        conn = psycopg2.connect(
            host=postgres_config['host'],
            port=postgres_config['port'],
            dbname=postgres_config['database'],
            user=postgres_config['user'],
            password=postgres_config['password'],
            connect_timeout=postgres_config['connection_timeout'],
            sslmode=postgres_config['ssl_mode']
        )
        
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã
        cursor.execute('''
            SELECT 
                mt.id,
                mt.object_name,
                mt.schema_name,
                mt.row_count,
                pt.migration_status
            FROM mcl.mssql_tables mt
            JOIN mcl.postgres_tables pt ON mt.id = pt.source_table_id
            WHERE mt.task_id = %s
                AND mt.schema_name = 'ags'
                AND pt.migration_status = 'pending'
                AND mt.id IN (
                    SELECT DISTINCT table_id 
                    FROM mcl.mssql_foreign_keys
                )
            ORDER BY mt.object_name
        ''', (task_id,))
        
        tables = cursor.fetchall()
        conn.close()
        
        return tables
        
    except Exception as e:
        console.print(f'[red]‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏: {e}[/red]')
        return []

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    console.print(Panel.fit(
        '[bold magenta]üéØ –ü–û–õ–ù–û–ú–ê–°–®–¢–ê–ë–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø V2[/bold magenta]\\n'
        '–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –∑–∞–¥–∞—á–∏',
        style='magenta'
    ))
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    task_id = 2
    max_iterations = 10
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–¥–∞—á–∏
    if not validate_migration_task(task_id):
        console.print(Panel(
            f'[bold red]‚ùå –û–®–ò–ë–ö–ê: –ó–∞–¥–∞—á–∞ {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞![/bold red]',
            title='–û–®–ò–ë–ö–ê',
            border_style='red'
        ))
        return
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
    console.print(Panel(
        f'[bold yellow]‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–º–∞—Å—à—Ç–∞–±–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏[/bold yellow]\\n'
        f'–ó–∞–¥–∞—á–∞: {task_id}\\n'
        f'–ú–∞–∫—Å–∏–º—É–º –∏—Ç–µ—Ä–∞—Ü–∏–π: {max_iterations}\\n'
        f'\\n'
        f'–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è!',
        title='–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï',
        border_style='yellow'
    ))
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    migrated_count = execute_full_migration_cycle(task_id, max_iterations)
    
    if migrated_count > 0:
        console.print(Panel(
            f'[bold green]üéâ –ü–û–õ–ù–û–ú–ê–°–®–¢–ê–ë–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê![/bold green]\\n'
            f'–ó–∞–¥–∞—á–∞: {task_id}\\n'
            f'–ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ç–∞–±–ª–∏—Ü: {migrated_count}',
            title='–ò–¢–û–ì–ò',
            border_style='green'
        ))
    else:
        console.print(Panel(
            f'[bold red]‚ùå –ú–ò–ì–†–ê–¶–ò–Ø –ù–ï –í–´–ü–û–õ–ù–ï–ù–ê[/bold red]\\n'
            f'–ó–∞–¥–∞—á–∞: {task_id}',
            title='–ò–¢–û–ì–ò',
            border_style='red'
        ))

if __name__ == '__main__':
    main()

