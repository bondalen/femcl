#!/usr/bin/env python3
"""
FEMCL - –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü –¥–ª—è –ø–µ—Ä–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π –¥–ª—è –ø–µ—Ä–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
"""
import psycopg2
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from datetime import datetime

console = Console()

def analyze_first_iteration_tables(task_id=2):
    """–ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü –¥–ª—è –ø–µ—Ä–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
        conn = psycopg2.connect(
            host="localhost",
            port=5432,
            dbname="fish_eye",
            user="postgres",
            password="postgres"
        )
        
        console.print(Panel.fit("[bold blue]üîç FEMCL - –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü –¥–ª—è –ø–µ—Ä–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏[/bold blue]", border_style="blue"))
        console.print(f"[blue]–ó–∞–¥–∞—á–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: ID={task_id}[/blue]")
        
        with conn.cursor() as cur:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –∑–∞–¥–∞—á–∏ —Å –∞–Ω–∞–ª–∏–∑–æ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            cur.execute("""
                SELECT 
                    mt.id,
                    mt.object_name,
                    mt.schema_name,
                    mt.foreign_key_count,
                    mt.primary_key_count,
                    mt.index_count,
                    mt.column_count,
                    mt.row_count,
                    pt.id as target_table_id,
                    pt.object_name as target_name,
                    pt.migration_status
                FROM mcl.mssql_tables mt
                LEFT JOIN mcl.postgres_tables pt ON mt.id = pt.source_table_id
                WHERE mt.task_id = %s
                ORDER BY mt.object_name
            """, (task_id,))
            
            all_tables = cur.fetchall()
            
            # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —Ç–∞–±–ª–∏—Ü—ã –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π (–ø–µ—Ä–≤–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è)
            # –∏ —Ç–∞–±–ª–∏—Ü—ã —Å –≤–Ω–µ—à–Ω–∏–º–∏ –∫–ª—é—á–∞–º–∏ (–ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏)
            first_iteration_tables = []
            subsequent_iteration_tables = []
            
            for table in all_tables:
                (table_id, object_name, schema_name, fk_count, pk_count, 
                 index_count, column_count, row_count, target_table_id, 
                 target_name, migration_status) = table
                
                if fk_count == 0:
                    first_iteration_tables.append(table)
                else:
                    subsequent_iteration_tables.append(table)
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü –ø–µ—Ä–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
            first_iteration_tables.sort(key=lambda x: x[1])  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ object_name
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            console.print(f"\n[blue]üìä –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü –≤ –∑–∞–¥–∞—á–µ: {len(all_tables)}[/blue]")
            console.print(f"[green]‚úÖ –¢–∞–±–ª–∏—Ü –¥–ª—è –ø–µ—Ä–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏: {len(first_iteration_tables)}[/green]")
            console.print(f"[yellow]‚è≥ –¢–∞–±–ª–∏—Ü –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π: {len(subsequent_iteration_tables)}[/yellow]")
            
            # –¢–∞–±–ª–∏—Ü–∞ —Ç–∞–±–ª–∏—Ü –ø–µ—Ä–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
            if first_iteration_tables:
                console.print("\n[bold green]üìã –¢–ê–ë–õ–ò–¶–´ –î–õ–Ø –ü–ï–†–í–û–ô –ò–¢–ï–†–ê–¶–ò–ò[/bold green]")
                
                first_table = Table(title="–¢–∞–±–ª–∏—Ü—ã –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π (–ø–µ—Ä–≤–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è)")
                first_table.add_column("‚Ññ", style="cyan", width=3)
                first_table.add_column("–¢–∞–±–ª–∏—Ü–∞", style="green")
                first_table.add_column("–°—Ö–µ–º–∞", style="blue")
                first_table.add_column("–ö–æ–ª–æ–Ω–æ–∫", style="yellow", width=8)
                first_table.add_column("–°—Ç—Ä–æ–∫", style="yellow", width=8)
                first_table.add_column("PK", style="green", width=3)
                first_table.add_column("–ò–Ω–¥–µ–∫—Å–æ–≤", style="blue", width=8)
                first_table.add_column("–°—Ç–∞—Ç—É—Å", style="cyan")
                
                for i, table in enumerate(first_iteration_tables, 1):
                    (table_id, object_name, schema_name, fk_count, pk_count, 
                     index_count, column_count, row_count, target_table_id, 
                     target_name, migration_status) = table
                    
                    first_table.add_row(
                        str(i),
                        object_name,
                        schema_name,
                        str(column_count),
                        str(row_count),
                        str(pk_count),
                        str(index_count),
                        migration_status
                    )
                
                console.print(first_table)
            
            # –¢–∞–±–ª–∏—Ü–∞ —Ç–∞–±–ª–∏—Ü –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π (–∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä)
            if subsequent_iteration_tables:
                console.print(f"\n[bold yellow]‚è≥ –¢–ê–ë–õ–ò–¶–´ –î–õ–Ø –ü–û–°–õ–ï–î–£–Æ–©–ò–• –ò–¢–ï–†–ê–¶–ò–ô ({len(subsequent_iteration_tables)} —Ç–∞–±–ª–∏—Ü)[/bold yellow]")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 —Ç–∞–±–ª–∏—Ü —Å –≤–Ω–µ—à–Ω–∏–º–∏ –∫–ª—é—á–∞–º–∏
                subsequent_table = Table(title="–¢–∞–±–ª–∏—Ü—ã —Å –≤–Ω–µ—à–Ω–∏–º–∏ –∫–ª—é—á–∞–º–∏ (–ø–µ—Ä–≤—ã–µ 10)")
                subsequent_table.add_column("–¢–∞–±–ª–∏—Ü–∞", style="green")
                subsequent_table.add_column("–í–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π", style="red", width=15)
                subsequent_table.add_column("–ö–æ–ª–æ–Ω–æ–∫", style="yellow", width=8)
                subsequent_table.add_column("–°—Ç—Ä–æ–∫", style="yellow", width=8)
                
                for table in subsequent_iteration_tables[:10]:
                    (table_id, object_name, schema_name, fk_count, pk_count, 
                     index_count, column_count, row_count, target_table_id, 
                     target_name, migration_status) = table
                    
                    subsequent_table.add_row(
                        object_name,
                        str(fk_count),
                        str(column_count),
                        str(row_count)
                    )
                
                console.print(subsequent_table)
                
                if len(subsequent_iteration_tables) > 10:
                    console.print(f"[blue]... –∏ –µ—â–µ {len(subsequent_iteration_tables) - 10} —Ç–∞–±–ª–∏—Ü[/blue]")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            simple_tables = [t for t in first_iteration_tables if t[6] <= 5]  # <= 5 –∫–æ–ª–æ–Ω–æ–∫
            medium_tables = [t for t in first_iteration_tables if 5 < t[6] <= 15]  # 6-15 –∫–æ–ª–æ–Ω–æ–∫
            complex_tables = [t for t in first_iteration_tables if t[6] > 15]  # > 15 –∫–æ–ª–æ–Ω–æ–∫
            
            console.print(f"\n[blue]üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å —Ç–∞–±–ª–∏—Ü –ø–µ—Ä–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏:[/blue]")
            console.print(f"[green]  –ü—Ä–æ—Å—Ç—ã–µ (‚â§5 –∫–æ–ª–æ–Ω–æ–∫): {len(simple_tables)}[/green]")
            console.print(f"[yellow]  –°—Ä–µ–¥–Ω–∏–µ (6-15 –∫–æ–ª–æ–Ω–æ–∫): {len(medium_tables)}[/yellow]")
            console.print(f"[red]  –°–ª–æ–∂–Ω—ã–µ (>15 –∫–æ–ª–æ–Ω–æ–∫): {len(complex_tables)}[/red]")
            
            return {
                'first_iteration': first_iteration_tables,
                'subsequent_iteration': subsequent_iteration_tables,
                'simple_tables': simple_tables,
                'medium_tables': medium_tables,
                'complex_tables': complex_tables
            }
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–±–ª–∏—Ü: {e}[/red]")
        return None
    
    finally:
        if 'conn' in locals():
            conn.close()

def update_progress_file(analysis_result):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞"""
    
    if not analysis_result:
        return False
    
    first_iteration = analysis_result['first_iteration']
    subsequent_iteration = analysis_result['subsequent_iteration']
    simple_tables = analysis_result['simple_tables']
    medium_tables = analysis_result['medium_tables']
    complex_tables = analysis_result['complex_tables']
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    progress_file = "/home/alex/projects/sql/femcl/progress/20250127_143000_migration_progress.md"
    
    with open(progress_file, 'w', encoding='utf-8') as f:
        f.write(f"""# üìä –ü–†–û–ì–†–ï–°–° –ú–ò–ì–†–ê–¶–ò–ò FEMCL

## üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏

**–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:** {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}  
**–ó–∞–¥–∞—á–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:** ID=2  
**–°—Ç–∞—Ç—É—Å:** üîç –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù  
**–ê–≤—Ç–æ—Ä:** AI Assistant  

## üéØ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

- **–í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏:** {len(first_iteration) + len(subsequent_iteration)}
- **–ó–∞–≤–µ—Ä—à–µ–Ω–æ:** 0
- **–í –ø—Ä–æ—Ü–µ—Å—Å–µ:** 0  
- **–û–∂–∏–¥–∞–µ—Ç:** {len(first_iteration) + len(subsequent_iteration)}
- **–û—à–∏–±–æ–∫:** 0
- **–ü—Ä–æ–≥—Ä–µ—Å—Å:** 0%

## üìä –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏

### ‚úÖ **–¢–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–µ—Ä–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏:** {len(first_iteration)}
*–¢–∞–±–ª–∏—Ü—ã –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π - –º–æ–∂–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ*

### ‚è≥ **–¢–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π:** {len(subsequent_iteration)}
*–¢–∞–±–ª–∏—Ü—ã —Å –≤–Ω–µ—à–Ω–∏–º–∏ –∫–ª—é—á–∞–º–∏ - —Ç—Ä–µ–±—É—é—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å—Å—ã–ª–æ—á–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü*

## üìã –¢–ê–ë–õ–ò–¶–´ –î–õ–Ø –ü–ï–†–í–û–ô –ò–¢–ï–†–ê–¶–ò–ò

### **–°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É):**

""")
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü –ø–µ—Ä–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        for i, table in enumerate(first_iteration, 1):
            (table_id, object_name, schema_name, fk_count, pk_count, 
             index_count, column_count, row_count, target_table_id, 
             target_name, migration_status) = table
            
            f.write(f"{i}. **{object_name}** ({schema_name})\n")
            f.write(f"   - –ö–æ–ª–æ–Ω–æ–∫: {column_count}\n")
            f.write(f"   - –°—Ç—Ä–æ–∫: {row_count}\n")
            f.write(f"   - –ü–µ—Ä–≤–∏—á–Ω—ã—Ö –∫–ª—é—á–µ–π: {pk_count}\n")
            f.write(f"   - –ò–Ω–¥–µ–∫—Å–æ–≤: {index_count}\n")
            f.write(f"   - –í–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π: {fk_count}\n")
            f.write(f"   - –°—Ç–∞—Ç—É—Å: {migration_status}\n\n")
        
        f.write(f"""## üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å —Ç–∞–±–ª–∏—Ü –ø–µ—Ä–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏

### **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:**
- **–ü—Ä–æ—Å—Ç—ã–µ (‚â§5 –∫–æ–ª–æ–Ω–æ–∫):** {len(simple_tables)} —Ç–∞–±–ª–∏—Ü
- **–°—Ä–µ–¥–Ω–∏–µ (6-15 –∫–æ–ª–æ–Ω–æ–∫):** {len(medium_tables)} —Ç–∞–±–ª–∏—Ü  
- **–°–ª–æ–∂–Ω—ã–µ (>15 –∫–æ–ª–æ–Ω–æ–∫):** {len(complex_tables)} —Ç–∞–±–ª–∏—Ü

### **–ü—Ä–æ—Å—Ç—ã–µ —Ç–∞–±–ª–∏—Ü—ã (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞—á–∞—Ç—å —Å –Ω–∏—Ö):**
""")
        
        for table in simple_tables:
            (table_id, object_name, schema_name, fk_count, pk_count, 
             index_count, column_count, row_count, target_table_id, 
             target_name, migration_status) = table
            f.write(f"- **{object_name}** ({column_count} –∫–æ–ª–æ–Ω–æ–∫, {row_count} —Å—Ç—Ä–æ–∫)\n")
        
        f.write(f"""
### **–°—Ä–µ–¥–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã:**
""")
        
        for table in medium_tables:
            (table_id, object_name, schema_name, fk_count, pk_count, 
             index_count, column_count, row_count, target_table_id, 
             target_name, migration_status) = table
            f.write(f"- **{object_name}** ({column_count} –∫–æ–ª–æ–Ω–æ–∫, {row_count} —Å—Ç—Ä–æ–∫)\n")
        
        f.write(f"""
### **–°–ª–æ–∂–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:**
""")
        
        for table in complex_tables:
            (table_id, object_name, schema_name, fk_count, pk_count, 
             index_count, column_count, row_count, target_table_id, 
             target_name, migration_status) = table
            f.write(f"- **{object_name}** ({column_count} –∫–æ–ª–æ–Ω–æ–∫, {row_count} —Å—Ç—Ä–æ–∫)\n")
        
        f.write(f"""
## üìä –¢–µ–∫—É—â–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è

### **–ò—Ç–µ—Ä–∞—Ü–∏—è #1** ({datetime.now().strftime('%d.%m.%Y %H:%M:%S')})
**–°—Ç–∞—Ç—É—Å:** üîç –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù

#### ‚úÖ –ì–æ—Ç–æ–≤—ã –∫ –º–∏–≥—Ä–∞—Ü–∏–∏:
*{len(first_iteration)} —Ç–∞–±–ª–∏—Ü –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π*

#### ‚è≥ –û–∂–∏–¥–∞—é—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å—Å—ã–ª–æ—á–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü:
*{len(subsequent_iteration)} —Ç–∞–±–ª–∏—Ü —Å –≤–Ω–µ—à–Ω–∏–º–∏ –∫–ª—é—á–∞–º–∏*

## üìà –ò—Å—Ç–æ—Ä–∏—è –∏—Ç–µ—Ä–∞—Ü–∏–π

### **–ò—Ç–µ—Ä–∞—Ü–∏—è #1** (27.01.2025 14:30:00)
- **–°—Ç–∞—Ç—É—Å:** üîÑ –ü–û–î–ì–û–¢–û–í–ö–ê
- **–î–µ–π—Å—Ç–≤–∏–µ:** –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

### **–ò—Ç–µ—Ä–∞—Ü–∏—è #2** (27.01.2025 14:35:00)  
- **–°—Ç–∞—Ç—É—Å:** ‚úÖ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê
- **–î–µ–π—Å—Ç–≤–∏–µ:** –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∏ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
- **–†–µ–∑—É–ª—å—Ç–∞—Ç:** –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ

### **–ò—Ç–µ—Ä–∞—Ü–∏—è #3** (27.01.2025 14:40:00)
- **–°—Ç–∞—Ç—É—Å:** üîÑ –°–¢–ê–¢–£–° –°–ë–†–û–®–ï–ù
- **–î–µ–π—Å—Ç–≤–∏–µ:** –°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –Ω–∞ 'pending'
- **–†–µ–∑—É–ª—å—Ç–∞—Ç:** 166 —Ç–∞–±–ª–∏—Ü –≥–æ—Ç–æ–≤—ã –∫ –º–∏–≥—Ä–∞—Ü–∏–∏

### **–ò—Ç–µ—Ä–∞—Ü–∏—è #4** ({datetime.now().strftime('%d.%m.%Y %H:%M:%S')})
- **–°—Ç–∞—Ç—É—Å:** üîç –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù
- **–î–µ–π—Å—Ç–≤–∏–µ:** –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è –ø–µ—Ä–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
- **–†–µ–∑—É–ª—å—Ç–∞—Ç:** {len(first_iteration)} —Ç–∞–±–ª–∏—Ü –≥–æ—Ç–æ–≤—ã –∫ –º–∏–≥—Ä–∞—Ü–∏–∏

## üö® –ü—Ä–æ–±–ª–µ–º—ã –∏ –æ—à–∏–±–∫–∏

*–ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ*

## üìù –ó–∞–º–µ—Ç–∫–∏

- **{len(first_iteration)} —Ç–∞–±–ª–∏—Ü –≥–æ—Ç–æ–≤—ã** –∫ –ø–µ—Ä–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
- **{len(subsequent_iteration)} —Ç–∞–±–ª–∏—Ü –æ–∂–∏–¥–∞—é—Ç** –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å—Å—ã–ª–æ—á–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
- **–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞—á–∞—Ç—å** —Å –ø—Ä–æ—Å—Ç—ã—Ö —Ç–∞–±–ª–∏—Ü (‚â§5 –∫–æ–ª–æ–Ω–æ–∫)
- **–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞** –∫ –∑–∞–ø—É—Å–∫—É –ø–µ—Ä–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏

## üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏

1. **–ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏** - –º–∏–≥—Ä–∞—Ü–∏—è {len(first_iteration)} —Ç–∞–±–ª–∏—Ü
2. **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞** - —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
3. **–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–±–ª–µ–º** - –ø–æ –º–µ—Ä–µ –∏—Ö –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è
4. **–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–∏–º –∏—Ç–µ—Ä–∞—Ü–∏—è–º** - –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π

---
*–§–∞–π–ª —Å–æ–∑–¥–∞–Ω: 27.01.2025 14:30:00*  
*–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}*
""")
    
    console.print(f"[green]‚úÖ –§–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: {progress_file}[/green]")
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    console.print("[blue]üîç –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü –¥–ª—è –ø–µ—Ä–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏...[/blue]")
    
    # –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü
    analysis_result = analyze_first_iteration_tables(task_id=2)
    
    if analysis_result:
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        update_progress_file(analysis_result)
        
        console.print(f"\n[bold green]üéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ![/bold green]")
        console.print(f"[green]‚úÖ –¢–∞–±–ª–∏—Ü –¥–ª—è –ø–µ—Ä–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏: {len(analysis_result['first_iteration'])}[/green]")
        console.print(f"[yellow]‚è≥ –¢–∞–±–ª–∏—Ü –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π: {len(analysis_result['subsequent_iteration'])}[/yellow]")
        console.print("[blue]üìã –§–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞[/blue]")
    else:
        console.print("\n[bold red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–∞–±–ª–∏—Ü[/bold red]")

if __name__ == "__main__":
    main()