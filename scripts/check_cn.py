#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã cn
"""
import psycopg2
import pyodbc
from rich.console import Console

console = Console()

def check_migration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    console.print("[blue]üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã cn[/blue]")
    
    # PostgreSQL
    pg_conn = psycopg2.connect(
        host="localhost",
        port=5432,
        dbname="fish_eye",
        user="postgres",
        password="postgres"
    )
    
    # MS SQL Server
    mssql_conn = pyodbc.connect(
        "DRIVER={ODBC Driver 17 for SQL Server};"
        "SERVER=localhost,1433;"
        "DATABASE=FishEye;"
        "UID=sa;"
        "PWD=kolob_OK1;"
        "TrustServerCertificate=yes;"
    )
    
    pg_cursor = pg_conn.cursor()
    mssql_cursor = mssql_conn.cursor()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ MS SQL Server
        mssql_cursor.execute("SELECT COUNT(*) FROM ags.cn")
        mssql_count = mssql_cursor.fetchone()[0]
        console.print(f"üìä –°—Ç—Ä–æ–∫ –≤ MS SQL Server: {mssql_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ PostgreSQL
        pg_cursor.execute("SELECT COUNT(*) FROM ags.cn")
        pg_count = pg_cursor.fetchone()[0]
        console.print(f"üìä –°—Ç—Ä–æ–∫ –≤ PostgreSQL: {pg_count}")
        
        if pg_count == mssql_count:
            console.print("[green]‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ —Å–æ–≤–ø–∞–¥–∞–µ—Ç![/green]")
        else:
            console.print(f"[red]‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {pg_count} != {mssql_count}[/red]")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        console.print("[blue]üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –≤ PostgreSQL:[/blue]")
        pg_cursor.execute("""
        SELECT column_name, data_type, is_nullable 
        FROM information_schema.columns 
        WHERE table_schema = 'ags' AND table_name = 'cn'
        ORDER BY ordinal_position
        """)
        
        columns = pg_cursor.fetchall()
        for col in columns:
            console.print(f"  {col[0]}: {col[1]} ({'NULL' if col[2] == 'YES' else 'NOT NULL'})")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫
        console.print("[blue]üìã –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö:[/blue]")
        pg_cursor.execute("SELECT * FROM ags.cn ORDER BY cn_key LIMIT 5")
        rows = pg_cursor.fetchall()
        
        for i, row in enumerate(rows, 1):
            console.print(f"  {i}. {row}")
        
        if pg_count > 0:
            console.print("[green]üéâ –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã cn –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ![/green]")
        else:
            console.print("[red]‚ùå –¢–∞–±–ª–∏—Ü–∞ cn –ø—É—Å—Ç–∞ –≤ PostgreSQL[/red]")
            
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}[/red]")
    
    finally:
        pg_conn.close()
        mssql_conn.close()

if __name__ == "__main__":
    check_migration()