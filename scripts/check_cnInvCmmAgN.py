#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –º–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã cnInvCmmAgN
"""
import os
import sys
import pandas as pd
import pyodbc
import psycopg2
from dotenv import load_dotenv
from rich.console import Console

load_dotenv()
console = Console()

def check_table_exists():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –≤ –æ–±–µ–∏—Ö –ë–î"""
    console.print("[blue]üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã cnInvCmmAgN[/blue]")
    
    # PostgreSQL
    pg_conn = psycopg2.connect(
        host=os.getenv('POSTGRES_HOST', 'localhost'),
        port=os.getenv('POSTGRES_PORT', '5432'),
        dbname=os.getenv('POSTGRES_DB', 'fish_eye'),
        user=os.getenv('POSTGRES_USER', 'postgres'),
        password=os.getenv('POSTGRES_PASSWORD', 'postgres')
    )
    
    # MS SQL Server
    mssql_conn = pyodbc.connect(
        f"DRIVER={{ODBC Driver 17 for SQL Server}};"
        f"SERVER={os.getenv('MSSQL_SERVER', 'localhost')},{os.getenv('MSSQL_PORT', '1433')};"
        f"DATABASE={os.getenv('MSSQL_DB', 'FishEye')};"
        f"UID={os.getenv('MSSQL_USER', 'sa')};"
        f"PWD={os.getenv('MSSQL_PASSWORD', 'kolob_OK1')};"
        "TrustServerCertificate=yes;"
    )
    
    pg_cursor = pg_conn.cursor()
    mssql_cursor = mssql_conn.cursor()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ MS SQL Server
        mssql_cursor.execute("SELECT COUNT(*) FROM ags.cnInvCmmAgN")
        mssql_count = mssql_cursor.fetchone()[0]
        console.print(f"üìä –°—Ç—Ä–æ–∫ –≤ MS SQL Server: {mssql_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ PostgreSQL
        pg_cursor.execute("SELECT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_schema = 'ags' AND table_name = 'cnInvCmmAgN')")
        table_exists = pg_cursor.fetchone()[0]
        
        if table_exists:
            pg_cursor.execute("SELECT COUNT(*) FROM ags.cnInvCmmAgN")
            pg_count = pg_cursor.fetchone()[0]
            console.print(f"üìä –°—Ç—Ä–æ–∫ –≤ PostgreSQL: {pg_count}")
            
            if pg_count == mssql_count:
                console.print("[green]‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ —Å–æ–≤–ø–∞–¥–∞–µ—Ç![/green]")
                return True
            else:
                console.print(f"[red]‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {pg_count} != {mssql_count}[/red]")
                return False
        else:
            console.print("[yellow]‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ PostgreSQL[/yellow]")
            return False
            
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}[/red]")
        return False
    
    finally:
        pg_conn.close()
        mssql_conn.close()

def migrate_table_data():
    """–ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã cnInvCmmAgN"""
    console.print("[blue]üöÄ –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã cnInvCmmAgN[/blue]")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MS SQL Server
    mssql_conn = pyodbc.connect(
        f"DRIVER={{ODBC Driver 17 for SQL Server}};"
        f"SERVER={os.getenv('MSSQL_SERVER', 'localhost')},{os.getenv('MSSQL_PORT', '1433')};"
        f"DATABASE={os.getenv('MSSQL_DB', 'FishEye')};"
        f"UID={os.getenv('MSSQL_USER', 'sa')};"
        f"PWD={os.getenv('MSSQL_PASSWORD', 'kolob_OK1')};"
        "TrustServerCertificate=yes;"
    )
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
    pg_conn = psycopg2.connect(
        host=os.getenv('POSTGRES_HOST', 'localhost'),
        port=os.getenv('POSTGRES_PORT', '5432'),
        dbname=os.getenv('POSTGRES_DB', 'fish_eye'),
        user=os.getenv('POSTGRES_USER', 'postgres'),
        password=os.getenv('POSTGRES_PASSWORD', 'postgres')
    )
    
    try:
        # 1. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ MS SQL Server
        console.print("[blue]üì• –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ MS SQL Server[/blue]")
        query = "SELECT * FROM ags.cnInvCmmAgN ORDER BY cicanKey"
        df = pd.read_sql(query, mssql_conn)
        console.print(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫ –∏–∑ MS SQL Server")
        
        if len(df) == 0:
            console.print("[yellow]‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞ –≤ MS SQL Server[/yellow]")
            return True
        
        # 2. –û—á–∏—Å—Ç–∫–∞ —Ü–µ–ª–µ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
        console.print("[blue]üßπ –û—á–∏—Å—Ç–∫–∞ —Ü–µ–ª–µ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã[/blue]")
        with pg_conn.cursor() as cur:
            cur.execute("DELETE FROM ags.cnInvCmmAgN")
            pg_conn.commit()
        
        # 3. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL
        console.print("[blue]üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL[/blue]")
        with pg_conn.cursor() as cur:
            for index, row in df.iterrows():
                values = []
                for col in df.columns:
                    value = row[col]
                    if pd.isna(value):
                        values.append(None)
                    else:
                        values.append(value)
                
                columns = ', '.join(df.columns)
                placeholders = ', '.join(['%s'] * len(df.columns))
                sql = f"INSERT INTO ags.cnInvCmmAgN ({columns}) OVERRIDING SYSTEM VALUE VALUES ({placeholders})"
                cur.execute(sql, values)
            
            pg_conn.commit()
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        console.print("[blue]‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–µ—Ä–µ–Ω–æ—Å–∞[/blue]")
        with pg_conn.cursor() as cur:
            cur.execute("SELECT COUNT(*) FROM ags.cnInvCmmAgN")
            row_count = cur.fetchone()[0]
            console.print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {row_count} —Å—Ç—Ä–æ–∫ –≤ PostgreSQL")
            
            if row_count == len(df):
                console.print("[green]üéâ –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ![/green]")
                return True
            else:
                console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞: {row_count} != {len(df)}[/red]")
                return False
                
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞: {e}[/red]")
        return False
    
    finally:
        mssql_conn.close()
        pg_conn.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    console.print("[bold blue]üîç –ü–†–û–í–ï–†–ö–ê –ò –ú–ò–ì–†–ê–¶–ò–Ø –¢–ê–ë–õ–ò–¶–´ cnInvCmmAgN[/bold blue]")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    if check_table_exists():
        console.print("[green]‚úÖ –¢–∞–±–ª–∏—Ü–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–∞–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç[/green]")
        return True
    
    # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –≤—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    console.print("[blue]üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö[/blue]")
    success = migrate_table_data()
    
    if success:
        console.print("[green]üéâ –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã cnInvCmmAgN –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ![/green]")
    else:
        console.print("[red]‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã cnInvCmmAgN[/red]")
    
    return success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)









