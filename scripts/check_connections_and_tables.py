#!/usr/bin/env python3
"""
FEMCL - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö –∏ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ config.yaml
"""
import yaml
import pyodbc
import psycopg2
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn

console = Console()

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ config.yaml"""
    try:
        with open('/home/alex/projects/sql/femcl/config/config.yaml', 'r', encoding='utf-8') as file:
            config = yaml.safe_load(file)
        console.print("[green]‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ[/green]")
        return config
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}[/red]")
        return None

def check_mssql_connection(config):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MS SQL Server"""
    console.print("[blue]üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MS SQL Server...[/blue]")
    
    try:
        mssql_config = config['database']['mssql']
        
        connection_string = (
            f"DRIVER={{{mssql_config['driver']}}};"
            f"SERVER={mssql_config['server']},{mssql_config['port']};"
            f"DATABASE={mssql_config['database']};"
            f"UID={mssql_config['user']};"
            f"PWD={mssql_config['password']};"
            f"TrustServerCertificate={'yes' if mssql_config['trust_certificate'] else 'no'};"
            f"Connection Timeout={mssql_config['connection_timeout']};"
            f"Command Timeout={mssql_config['command_timeout']};"
        )
        
        conn = pyodbc.connect(connection_string)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT DB_NAME() as current_database")
        result = cursor.fetchone()
        current_db = result[0]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã ags
        cursor.execute("""
            SELECT COUNT(*) as table_count
            FROM information_schema.tables 
            WHERE table_schema = 'ags'
        """)
        result = cursor.fetchone()
        ags_tables_count = result[0]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã mcl
        cursor.execute("""
            SELECT COUNT(*) as table_count
            FROM information_schema.tables 
            WHERE table_schema = 'mcl'
        """)
        result = cursor.fetchone()
        mcl_tables_count = result[0]
        
        conn.close()
        
        console.print(f"[green]‚úÖ MS SQL Server: {mssql_config['server']}:{mssql_config['port']}[/green]")
        console.print(f"[green]‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {current_db}[/green]")
        console.print(f"[green]‚úÖ –¢–∞–±–ª–∏—Ü –≤ —Å—Ö–µ–º–µ ags: {ags_tables_count}[/green]")
        console.print(f"[green]‚úÖ –¢–∞–±–ª–∏—Ü –≤ —Å—Ö–µ–º–µ mcl: {mcl_tables_count}[/green]")
        
        return {
            'status': 'success',
            'server': f"{mssql_config['server']}:{mssql_config['port']}",
            'database': current_db,
            'ags_tables': ags_tables_count,
            'mcl_tables': mcl_tables_count
        }
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MS SQL Server: {e}[/red]")
        return {
            'status': 'error',
            'error': str(e)
        }

def check_postgres_connection(config):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
    console.print("[blue]üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL...[/blue]")
    
    try:
        postgres_config = config['database']['postgres']
        
        conn = psycopg2.connect(
            host=postgres_config['host'],
            port=postgres_config['port'],
            dbname=postgres_config['database'],
            user=postgres_config['user'],
            password=postgres_config['password'],
            connect_timeout=postgres_config['connection_timeout'],
            sslmode=postgres_config['ssl_mode']
        )
        
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT current_database()")
        result = cursor.fetchone()
        current_db = result[0]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã mcl
        cursor.execute("""
            SELECT COUNT(*) as table_count
            FROM information_schema.tables 
            WHERE table_schema = 'mcl'
        """)
        result = cursor.fetchone()
        mcl_tables_count = result[0]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã ags
        cursor.execute("""
            SELECT COUNT(*) as table_count
            FROM information_schema.tables 
            WHERE table_schema = 'ags'
        """)
        result = cursor.fetchone()
        ags_tables_count = result[0]
        
        conn.close()
        
        console.print(f"[green]‚úÖ PostgreSQL: {postgres_config['host']}:{postgres_config['port']}[/green]")
        console.print(f"[green]‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {current_db}[/green]")
        console.print(f"[green]‚úÖ –¢–∞–±–ª–∏—Ü –≤ —Å—Ö–µ–º–µ mcl: {mcl_tables_count}[/green]")
        console.print(f"[green]‚úÖ –¢–∞–±–ª–∏—Ü –≤ —Å—Ö–µ–º–µ ags: {ags_tables_count}[/green]")
        
        return {
            'status': 'success',
            'server': f"{postgres_config['host']}:{postgres_config['port']}",
            'database': current_db,
            'mcl_tables': mcl_tables_count,
            'ags_tables': ags_tables_count
        }
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}[/red]")
        return {
            'status': 'error',
            'error': str(e)
        }

def check_source_tables(config):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –≤ MS SQL Server"""
    console.print("[blue]üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –≤ MS SQL Server...[/blue]")
    
    try:
        mssql_config = config['database']['mssql']
        
        connection_string = (
            f"DRIVER={{{mssql_config['driver']}}};"
            f"SERVER={mssql_config['server']},{mssql_config['port']};"
            f"DATABASE={mssql_config['database']};"
            f"UID={mssql_config['user']};"
            f"PWD={mssql_config['password']};"
            f"TrustServerCertificate={'yes' if mssql_config['trust_certificate'] else 'no'};"
        )
        
        conn = pyodbc.connect(connection_string)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü –≤ —Å—Ö–µ–º–µ ags
        cursor.execute("""
            SELECT 
                TABLE_NAME,
                TABLE_TYPE,
                (SELECT COUNT(*) FROM information_schema.columns 
                 WHERE table_schema = 'ags' AND table_name = t.TABLE_NAME) as COLUMN_COUNT
            FROM information_schema.tables t
            WHERE table_schema = 'ags' AND table_type = 'BASE TABLE'
            ORDER BY TABLE_NAME
        """)
        
        tables = cursor.fetchall()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        table = Table(title="üìä –ò—Å—Ö–æ–¥–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ —Å—Ö–µ–º–µ ags")
        table.add_column("–¢–∞–±–ª–∏—Ü–∞", style="cyan")
        table.add_column("–¢–∏–ø", style="green")
        table.add_column("–ö–æ–ª–æ–Ω–æ–∫", style="yellow")
        
        for table_name, table_type, column_count in tables:
            table.add_row(table_name, table_type, str(column_count))
        
        console.print(table)
        console.print(f"[blue]üìä –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü –≤ —Å—Ö–µ–º–µ ags: {len(tables)}[/blue]")
        
        conn.close()
        
        return {
            'status': 'success',
            'tables_count': len(tables),
            'tables': tables
        }
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü: {e}[/red]")
        return {
            'status': 'error',
            'error': str(e)
        }

def check_migration_metadata(config):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ PostgreSQL"""
    console.print("[blue]üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ PostgreSQL...[/blue]")
    
    try:
        postgres_config = config['database']['postgres']
        
        conn = psycopg2.connect(
            host=postgres_config['host'],
            port=postgres_config['port'],
            dbname=postgres_config['database'],
            user=postgres_config['user'],
            password=postgres_config['password']
        )
        
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á –º–∏–≥—Ä–∞—Ü–∏–∏
        cursor.execute("SELECT COUNT(*) FROM mcl.migration_tasks")
        tasks_count = cursor.fetchone()[0]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ MS SQL —Ç–∞–±–ª–∏—Ü –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT COUNT(*) FROM mcl.mssql_tables")
        mssql_tables_count = cursor.fetchone()[0]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL —Ç–∞–±–ª–∏—Ü –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT COUNT(*) FROM mcl.postgres_tables")
        postgres_tables_count = cursor.fetchone()[0]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–ª–µ–º
        cursor.execute("SELECT COUNT(*) FROM mcl.problems")
        problems_count = cursor.fetchone()[0]
        
        # –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏
        cursor.execute("""
            SELECT migration_status, COUNT(*) 
            FROM mcl.mssql_tables 
            GROUP BY migration_status 
            ORDER BY migration_status
        """)
        migration_status = cursor.fetchall()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å—Ç–∞—Ç—É—Å–∞
        status_table = Table(title="üìä –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏")
        status_table.add_column("–°—Ç–∞—Ç—É—Å", style="cyan")
        status_table.add_column("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", style="green")
        
        for status, count in migration_status:
            status_table.add_row(status, str(count))
        
        console.print(status_table)
        
        console.print(f"[blue]üìä –ó–∞–¥–∞—á –º–∏–≥—Ä–∞—Ü–∏–∏: {tasks_count}[/blue]")
        console.print(f"[blue]üìä MS SQL —Ç–∞–±–ª–∏—Ü –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {mssql_tables_count}[/blue]")
        console.print(f"[blue]üìä PostgreSQL —Ç–∞–±–ª–∏—Ü –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {postgres_tables_count}[/blue]")
        console.print(f"[blue]üìä –ü—Ä–æ–±–ª–µ–º: {problems_count}[/blue]")
        
        conn.close()
        
        return {
            'status': 'success',
            'tasks_count': tasks_count,
            'mssql_tables_count': mssql_tables_count,
            'postgres_tables_count': postgres_tables_count,
            'problems_count': problems_count,
            'migration_status': migration_status
        }
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}[/red]")
        return {
            'status': 'error',
            'error': str(e)
        }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    console.print(Panel.fit("[bold blue]üîç FEMCL - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∏ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü[/bold blue]", border_style="blue"))
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = load_config()
    if not config:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    console.print("\n[bold blue]üîå –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô[/bold blue]")
    
    mssql_result = check_mssql_connection(config)
    postgres_result = check_postgres_connection(config)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
    console.print("\n[bold blue]üìä –ü–†–û–í–ï–†–ö–ê –ò–°–•–û–î–ù–´–• –¢–ê–ë–õ–ò–¶[/bold blue]")
    source_tables_result = check_source_tables(config)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–∏
    console.print("\n[bold blue]üìã –ü–†–û–í–ï–†–ö–ê –ú–ï–¢–ê–î–ê–ù–ù–´–• –ú–ò–ì–†–ê–¶–ò–ò[/bold blue]")
    metadata_result = check_migration_metadata(config)
    
    # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    console.print("\n[bold blue]üìà –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê[/bold blue]")
    
    all_success = (
        mssql_result['status'] == 'success' and
        postgres_result['status'] == 'success' and
        source_tables_result['status'] == 'success' and
        metadata_result['status'] == 'success'
    )
    
    if all_success:
        console.print("[green]‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ![/green]")
        console.print("[green]üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –º–∏–≥—Ä–∞—Ü–∏–∏![/green]")
        return True
    else:
        console.print("[red]‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã![/red]")
        console.print("[yellow]‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –º–∏–≥—Ä–∞—Ü–∏–∏[/yellow]")
        return False

if __name__ == "__main__":
    main()