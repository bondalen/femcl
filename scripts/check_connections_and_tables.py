#!/usr/bin/env python3
"""
FEMCL - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö –∏ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü

–û–ë–ù–û–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç ConnectionManager –∏ ConnectionDiagnostics
"""
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, str(Path(__file__).parent.parent / "src" / "code"))

from infrastructure.classes import ConnectionManager, ConnectionDiagnostics
from rich.console import Console
from rich.table import Table
from rich.panel import Panel

console = Console()


def check_source_tables(manager: ConnectionManager):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –≤ MS SQL Server"""
    console.print("[blue]üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –≤ MS SQL Server...[/blue]")
    
    try:
        conn = manager.get_mssql_connection()
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü –≤ —Å—Ö–µ–º–µ ags
        cursor.execute("""
            SELECT 
                TABLE_NAME,
                TABLE_TYPE,
                (SELECT COUNT(*) FROM information_schema.columns 
                 WHERE table_schema = 'ags' AND table_name = t.TABLE_NAME) as COLUMN_COUNT
            FROM information_schema.tables t
            WHERE table_schema = 'ags' AND table_type = 'BASE TABLE'
            ORDER BY TABLE_NAME
        """)
        
        tables = cursor.fetchall()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        table = Table(title="üìä –ò—Å—Ö–æ–¥–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ —Å—Ö–µ–º–µ ags")
        table.add_column("–¢–∞–±–ª–∏—Ü–∞", style="cyan")
        table.add_column("–¢–∏–ø", style="green")
        table.add_column("–ö–æ–ª–æ–Ω–æ–∫", style="yellow")
        
        for table_name, table_type, column_count in tables:
            table.add_row(table_name, table_type, str(column_count))
        
        console.print(table)
        console.print(f"[blue]üìä –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü –≤ —Å—Ö–µ–º–µ ags: {len(tables)}[/blue]")
        
        cursor.close()
        
        return {
            'status': 'success',
            'tables_count': len(tables),
            'tables': tables
        }
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü: {e}[/red]")
        return {
            'status': 'error',
            'error': str(e)
        }


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    console.print(Panel.fit(
        "[bold blue]üîç FEMCL - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∏ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü[/bold blue]",
        border_style="blue"
    ))
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ConnectionManager (task_id=2 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        console.print("\n[cyan]üì° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ConnectionManager...[/cyan]")
        manager = ConnectionManager()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ
        info = manager.get_connection_info()
        console.print(f"[green]‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω: {info['profile_name']} (task_id={info['task_id']})[/green]")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ConnectionDiagnostics
        diagnostics = ConnectionDiagnostics(manager)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        console.print("\n[bold blue]üîå –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô[/bold blue]")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        test_results = diagnostics.test_all_connections()
        
        mssql_status = test_results['mssql']['status']
        postgres_status = test_results['postgres']['status']
        
        if mssql_status == 'success':
            console.print(f"[green]‚úÖ MS SQL Server: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ[/green]")
            console.print(f"  {info['source']['host']}:{info['source']['port']}/{info['source']['database']}")
        else:
            console.print(f"[red]‚ùå MS SQL Server: –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è[/red]")
            console.print(f"  {test_results['mssql']['error']}")
        
        if postgres_status == 'success':
            console.print(f"[green]‚úÖ PostgreSQL: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ[/green]")
            console.print(f"  {info['target']['host']}:{info['target']['port']}/{info['target']['database']}")
        else:
            console.print(f"[red]‚ùå PostgreSQL: –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è[/red]")
            console.print(f"  {test_results['postgres']['error']}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        console.print("\n[bold blue]üìä –ü–†–û–í–ï–†–ö–ê –ò–°–•–û–î–ù–´–• –¢–ê–ë–õ–ò–¶[/bold blue]")
        source_tables_result = check_source_tables(manager)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–∏
        console.print("\n[bold blue]üìã –ü–†–û–í–ï–†–ö–ê –ú–ï–¢–ê–î–ê–ù–ù–´–• –ú–ò–ì–†–ê–¶–ò–ò[/bold blue]")
        metadata_result = diagnostics.check_migration_metadata()
        
        if metadata_result['status'] == 'success':
            console.print(f"[blue]üìä –ó–∞–¥–∞—á –º–∏–≥—Ä–∞—Ü–∏–∏: {metadata_result['tasks_count']}[/blue]")
            console.print(f"[blue]üìä MS SQL —Ç–∞–±–ª–∏—Ü –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {metadata_result['mssql_tables_count']}[/blue]")
            console.print(f"[blue]üìä PostgreSQL —Ç–∞–±–ª–∏—Ü –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {metadata_result['postgres_tables_count']}[/blue]")
            console.print(f"[blue]üìä –ü—Ä–æ–±–ª–µ–º: {metadata_result['problems_count']}[/blue]")
            
            # –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏
            if metadata_result.get('migration_status'):
                status_table = Table(title="üìä –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏")
                status_table.add_column("–°—Ç–∞—Ç—É—Å", style="cyan")
                status_table.add_column("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", style="green")
                
                for status, count in metadata_result['migration_status'].items():
                    status_table.add_row(status, str(count))
                
                console.print(status_table)
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        console.print("\n[bold blue]üìà –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê[/bold blue]")
        
        all_success = (
            mssql_status == 'success' and
            postgres_status == 'success' and
            source_tables_result['status'] == 'success' and
            metadata_result['status'] == 'success'
        )
        
        if all_success:
            console.print("[green]‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ![/green]")
            console.print("[green]üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –º–∏–≥—Ä–∞—Ü–∏–∏![/green]")
            return True
        else:
            console.print("[red]‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã![/red]")
            console.print("[yellow]‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –º–∏–≥—Ä–∞—Ü–∏–∏[/yellow]")
            return False
            
    except ValueError as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}[/red]")
        console.print("[yellow]üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ connections.json –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è task_id=2 —Å—É—â–µ—Å—Ç–≤—É–µ—Ç[/yellow]")
        return False
    except Exception as e:
        console.print(f"[red]‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}[/red]")
        return False
    finally:
        if 'manager' in locals():
            manager.close_all_connections()


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
