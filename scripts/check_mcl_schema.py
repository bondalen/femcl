#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã mcl –≤ PostgreSQL

–û–ë–ù–û–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç ConnectionManager –∏ ConnectionDiagnostics
"""
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, str(Path(__file__).parent.parent / "src" / "code"))

from infrastructure.classes import ConnectionManager, ConnectionDiagnostics
from rich.console import Console
from rich.table import Table
from rich.panel import Panel

console = Console()


def check_mcl_schema_detailed(manager: ConnectionManager):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã mcl"""
    console.print("[blue]üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã mcl –≤ PostgreSQL...[/blue]")
    
    try:
        conn = manager.get_postgres_connection()
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –≤ —Å—Ö–µ–º–µ mcl
        cursor.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'mcl' 
            ORDER BY table_name
        """)
        
        tables = cursor.fetchall()
        console.print(f"\n[cyan]üìä –¢–∞–±–ª–∏—Ü—ã –≤ —Å—Ö–µ–º–µ mcl: {len(tables)}[/cyan]")
        
        # –û–∂–∏–¥–∞–µ–º—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        key_tables = [
            'migration_tasks',
            'mssql_tables', 'postgres_tables',
            'mssql_columns', 'postgres_columns',
            'mssql_indexes', 'postgres_indexes',
            'mssql_foreign_keys', 'postgres_foreign_keys',
            'function_mapping_rules'
        ]
        
        existing_tables = [table[0] for table in tables]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü
        console.print("\n[yellow]üîë –ö–ª—é—á–µ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã:[/yellow]")
        table_status = Table()
        table_status.add_column("–¢–∞–±–ª–∏—Ü–∞", style="cyan")
        table_status.add_column("–°—Ç–∞—Ç—É—Å", style="green")
        table_status.add_column("–ó–∞–ø–∏—Å–µ–π", style="yellow")
        
        for key_table in key_tables:
            if key_table in existing_tables:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
                cursor.execute(f"SELECT COUNT(*) FROM mcl.{key_table}")
                count = cursor.fetchone()[0]
                table_status.add_row(key_table, "‚úÖ –ï—Å—Ç—å", str(count))
            else:
                table_status.add_row(key_table, "‚ùå –ù–µ—Ç", "-")
        
        console.print(table_status)
        
        cursor.close()
        return True
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞: {e}[/red]")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    console.print(Panel.fit(
        "[bold cyan]üîç –ü–†–û–í–ï–†–ö–ê –°–•–ï–ú–´ MCL[/bold cyan]",
        border_style="cyan"
    ))
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ConnectionManager (task_id=2 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        manager = ConnectionManager()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ
        info = manager.get_connection_info()
        console.print(f"\n[green]‚úÖ –ü—Ä–æ—Ñ–∏–ª—å: {info['profile_name']} (task_id={info['task_id']})[/green]")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ConnectionDiagnostics
        diagnostics = ConnectionDiagnostics(manager)
        
        # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã
        mcl_info = diagnostics.check_mcl_schema_postgres()
        
        if mcl_info['exists']:
            console.print(f"[green]‚úÖ –°—Ö–µ–º–∞ mcl —Å—É—â–µ—Å—Ç–≤—É–µ—Ç[/green]")
            console.print(f"[yellow]üìä –¢–∞–±–ª–∏—Ü –≤ —Å—Ö–µ–º–µ: {mcl_info['tables_count']}[/yellow]")
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            check_mcl_schema_detailed(manager)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            console.print("\n[cyan]üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...[/cyan]")
            tables_check = diagnostics.check_mcl_tables()
            
            if tables_check['status'] == 'success':
                console.print("[green]‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞[/green]")
        else:
            console.print("[red]‚ùå –°—Ö–µ–º–∞ mcl –Ω–µ –Ω–∞–π–¥–µ–Ω–∞![/red]")
            console.print("[yellow]üí° –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ö–µ–º—É –∏–∑ –±—ç–∫–∞–ø–∞[/yellow]")
            return False
        
        return True
        
    except ValueError as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞: {e}[/red]")
        return False
    except Exception as e:
        console.print(f"[red]‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}[/red]")
        return False
    finally:
        if 'manager' in locals():
            manager.close_all_connections()


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)

    check_mcl_schema()