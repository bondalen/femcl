#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π —Å–∏—Å—Ç–µ–º—ã –º–∏–≥—Ä–∞—Ü–∏–∏ FEMCL
"""
import yaml
import os
from typing import Dict, Any, Optional
from pathlib import Path
from rich.console import Console

console = Console()

class ConfigLoader:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
    
    def __init__(self, config_path: str = "../config/config.yaml"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        self.config_path = Path(config_path)
        self.config: Optional[Dict[str, Any]] = None
        self.load_config()
    
    def load_config(self) -> None:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ YAML —Ñ–∞–π–ª–∞"""
        try:
            if not self.config_path.exists():
                console.print(f"[red]‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.config_path}[/red]")
                raise FileNotFoundError(f"Config file not found: {self.config_path}")
            
            with open(self.config_path, 'r', encoding='utf-8') as file:
                self.config = yaml.safe_load(file)
            
            console.print(f"[green]‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {self.config_path}[/green]")
            
        except yaml.YAMLError as e:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ YAML: {e}[/red]")
            raise
        except Exception as e:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}[/red]")
            raise
    
    def get_database_config(self, db_type: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if not self.config:
            raise ValueError("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        db_config = self.config.get('database', {}).get(db_type, {})
        if not db_config:
            raise ValueError(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è {db_type} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        return db_config
    
    def get_migration_config(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        if not self.config:
            raise ValueError("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        return self.config.get('migration', {})
    
    def get_readiness_check(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏"""
        if not self.config:
            raise ValueError("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        return self.config.get('readiness_check', {})
    
    def get_table_creation_config(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü"""
        if not self.config:
            raise ValueError("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        return self.config.get('table_creation', {})
    
    def get_data_migration_config(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö"""
        if not self.config:
            raise ValueError("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        return self.config.get('data_migration', {})
    
    def get_monitoring_config(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if not self.config:
            raise ValueError("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        return self.config.get('monitoring', {})
    
    def get_security_config(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        if not self.config:
            raise ValueError("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        return self.config.get('security', {})
    
    def get_development_config(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
        if not self.config:
            raise ValueError("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        return self.config.get('development', {})
    
    def get_connection_string(self, db_type: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        db_config = self.get_database_config(db_type)
        
        if db_type == 'mssql':
            return (
                f"DRIVER={{{db_config.get('driver', 'ODBC Driver 17 for SQL Server')}}};"
                f"SERVER={db_config.get('server')},{db_config.get('port')};"
                f"DATABASE={db_config.get('database')};"
                f"UID={db_config.get('user')};"
                f"PWD={db_config.get('password')};"
                f"TrustServerCertificate={'yes' if db_config.get('trust_certificate') else 'no'};"
            )
        elif db_type == 'postgres':
            return (
                f"host={db_config.get('host')} "
                f"port={db_config.get('port')} "
                f"dbname={db_config.get('database')} "
                f"user={db_config.get('user')} "
                f"password={db_config.get('password')} "
                f"sslmode={db_config.get('ssl_mode', 'prefer')}"
            )
        else:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_type}")
    
    def validate_config(self) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if not self.config:
            console.print("[red]‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞[/red]")
            return False
        
        required_sections = [
            'database', 'migration', 'readiness_check', 
            'table_creation', 'data_migration'
        ]
        
        for section in required_sections:
            if section not in self.config:
                console.print(f"[red]‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —Å–µ–∫—Ü–∏—è: {section}[/red]")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
        mssql_config = self.config.get('database', {}).get('mssql', {})
        postgres_config = self.config.get('database', {}).get('postgres', {})
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ MS SQL Server
        mssql_required_keys = ['server', 'port', 'database', 'user', 'password']
        for key in mssql_required_keys:
            if key not in mssql_config:
                console.print(f"[red]‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä mssql.{key}[/red]")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL
        postgres_required_keys = ['host', 'port', 'database', 'user', 'password']
        for key in postgres_required_keys:
            if key not in postgres_config:
                console.print(f"[red]‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä postgres.{key}[/red]")
                return False
        
        console.print("[green]‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞[/green]")
        return True
    
    def print_config_summary(self) -> None:
        """–í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if not self.config:
            console.print("[red]‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞[/red]")
            return
        
        console.print("[blue]üìã –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:[/blue]")
        
        # –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        mssql_config = self.config.get('database', {}).get('mssql', {})
        postgres_config = self.config.get('database', {}).get('postgres', {})
        
        console.print(f"  MS SQL Server: {mssql_config.get('server')}:{mssql_config.get('port')}/{mssql_config.get('database')}")
        console.print(f"  PostgreSQL: {postgres_config.get('host')}:{postgres_config.get('port')}/{postgres_config.get('database')}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
        migration_config = self.config.get('migration', {})
        console.print(f"  –¶–µ–ª–µ–≤–∞—è —Å—Ö–µ–º–∞: {migration_config.get('target_schema')}")
        console.print(f"  –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞: {migration_config.get('batch_size')}")
        console.print(f"  –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫: {migration_config.get('max_retries')}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        readiness_config = self.config.get('readiness_check', {})
        console.print(f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {readiness_config.get('min_readiness_percentage')}%")
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        security_config = self.config.get('security', {})
        console.print(f"  –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π: {'–î–∞' if security_config.get('encrypt_passwords') else '–ù–µ—Ç'}")
        console.print(f"  SSL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {'–î–∞' if security_config.get('use_ssl_connections') else '–ù–µ—Ç'}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = ConfigLoader()

def get_config() -> ConfigLoader:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    return config

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    try:
        config_loader = ConfigLoader()
        
        if config_loader.validate_config():
            config_loader.print_config_summary()
        else:
            console.print("[red]‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏[/red]")
            
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞: {e}[/red]")