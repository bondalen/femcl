#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å GitHub
"""
import os
import subprocess
import sys
from pathlib import Path
from datetime import datetime
from rich.console import Console
from config_loader import get_config

console = Console()

class GitHubSync:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å GitHub"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        self.config = get_config()
        self.github_config = self.config.get_github_config()
        self.token = self._load_token()
        
    def _load_token(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ GitHub –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        token_env_var = self.github_config.get('token_env_var', 'GITHUB_TOKEN')
        token = os.getenv(token_env_var)
        
        if not token:
            console.print(f"[red]‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è {token_env_var} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞[/red]")
            console.print(f"[yellow]üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω: export {token_env_var}='your_token_here'[/yellow]")
            return None
            
        console.print("[green]‚úÖ –¢–æ–∫–µ–Ω GitHub –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è[/green]")
        return token
    
    def _setup_remote(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        remote_url = self.github_config.get('remote_url')
        if not remote_url:
            console.print("[red]‚ùå URL —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω[/red]")
            return False
            
        # –ó–∞–º–µ–Ω—è–µ–º URL –Ω–∞ URL —Å —Ç–æ–∫–µ–Ω–æ–º
        if self.token:
            if "github.com" in remote_url:
                remote_url = remote_url.replace("https://", f"https://{self.token}@")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            result = subprocess.run(['git', 'remote', '-v'], 
                                  capture_output=True, text=True, cwd='.')
            if remote_url not in result.stdout:
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
                subprocess.run(['git', 'remote', 'set-url', 'origin', remote_url], 
                              cwd='.', check=True)
                console.print("[green]‚úÖ –£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω[/green]")
            else:
                console.print("[blue]‚ÑπÔ∏è –£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω[/blue]")
            return True
        except subprocess.CalledProcessError as e:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {e}[/red]")
            return False
    
    def _generate_commit_message(self, action, description):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–∞"""
        template = self.github_config.get('commit_message_template', 'üöÄ {action}: {description}')
        
        # –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
        message = template.format(action=action, description=description)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if self.github_config.get('include_timestamp', True):
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            message += f"\n\n*–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {timestamp}*"
        
        return message
    
    def sync_changes(self, action="Update", description="Project changes"):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å GitHub"""
        console.print("[blue]üîÑ –ù–∞—á–∞–ª–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å GitHub[/blue]")
        
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            if not self._setup_remote():
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
            result = subprocess.run(['git', 'status', '--porcelain'], 
                                  capture_output=True, text=True, cwd='.')
            if not result.stdout.strip():
                console.print("[yellow]‚ö†Ô∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏[/yellow]")
                return True
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
            if self.github_config.get('auto_add_all', True):
                subprocess.run(['git', 'add', '.'], cwd='.', check=True)
                console.print("[green]‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∏–Ω–¥–µ–∫—Å[/green]")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞
            commit_message = self._generate_commit_message(action, description)
            subprocess.run(['git', 'commit', '-m', commit_message], cwd='.', check=True)
            console.print("[green]‚úÖ –ö–æ–º–º–∏—Ç —Å–æ–∑–¥–∞–Ω[/green]")
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ GitHub
            branch = self.github_config.get('branch', 'main')
            subprocess.run(['git', 'push', 'origin', branch], cwd='.', check=True)
            console.print("[green]‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ GitHub[/green]")
            
            console.print("[bold green]üéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ![/bold green]")
            return True
            
        except subprocess.CalledProcessError as e:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}[/red]")
            return False
        except Exception as e:
            console.print(f"[red]‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}[/red]")
            return False
    
    def check_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        console.print("[blue]üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è[/blue]")
        
        try:
            # –°—Ç–∞—Ç—É—Å Git
            result = subprocess.run(['git', 'status'], 
                                  capture_output=True, text=True, cwd='.')
            console.print(result.stdout)
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∫–æ–º–º–∏—Ç–µ
            result = subprocess.run(['git', 'log', '-1', '--oneline'], 
                                  capture_output=True, text=True, cwd='.')
            if result.stdout:
                console.print(f"[blue]–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç: {result.stdout.strip()}[/blue]")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ç–∫–µ
            result = subprocess.run(['git', 'branch', '--show-current'], 
                                  capture_output=True, text=True, cwd='.')
            current_branch = result.stdout.strip()
            console.print(f"[blue]–¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: {current_branch}[/blue]")
            
            return True
            
        except subprocess.CalledProcessError as e:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}[/red]")
            return False
    
    def show_config(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é GitHub"""
        console.print("[blue]üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è GitHub:[/blue]")
        console.print(f"  –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {self.github_config.get('repository')}")
        console.print(f"  –í–µ—Ç–∫–∞: {self.github_config.get('branch')}")
        console.print(f"  URL: {self.github_config.get('remote_url')}")
        console.print(f"  –¢–æ–∫–µ–Ω: {'–ù–∞—Å—Ç—Ä–æ–µ–Ω' if self.token else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
        console.print(f"  –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {self.github_config.get('auto_sync')}")
        console.print(f"  –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö: {self.github_config.get('sync_on_changes')}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        console.print("[blue]–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:[/blue]")
        console.print("  python3 github_sync.py sync [action] [description]")
        console.print("  python3 github_sync.py status")
        console.print("  python3 github_sync.py config")
        return
    
    command = sys.argv[1]
    sync = GitHubSync()
    
    if command == "sync":
        action = sys.argv[2] if len(sys.argv) > 2 else "Update"
        description = sys.argv[3] if len(sys.argv) > 3 else "Project changes"
        success = sync.sync_changes(action, description)
        sys.exit(0 if success else 1)
        
    elif command == "status":
        success = sync.check_status()
        sys.exit(0 if success else 1)
        
    elif command == "config":
        sync.show_config()
        
    else:
        console.print(f"[red]‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}[/red]")
        sys.exit(1)

if __name__ == "__main__":
    main()