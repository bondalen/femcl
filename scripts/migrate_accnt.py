#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã accnt —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª
"""
import os
import sys
import yaml
import pyodbc
import psycopg2
import pandas as pd
from rich.console import Console

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def load_config(config_path="/home/alex/projects/sql/femcl/config/config.yaml"):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    with open(config_path, 'r', encoding='utf-8') as file:
        return yaml.safe_load(file)

config = load_config()
console = Console()

# –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
def check_mssql_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MS SQL Server"""
    try:
        mssql_config = config['database']['mssql']
        
        connection_string = (
            f"DRIVER={{{mssql_config['driver']}}};"
            f"SERVER={mssql_config['server']},{mssql_config['port']};"
            f"DATABASE={mssql_config['database']};"
            f"UID={mssql_config['user']};"
            f"PWD={mssql_config['password']};"
            f"TrustServerCertificate={'yes' if mssql_config['trust_certificate'] else 'no'};"
            f"Connection Timeout={mssql_config['connection_timeout']};"
            f"Command Timeout={mssql_config['command_timeout']};"
        )
        
        conn = pyodbc.connect(connection_string)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT DB_NAME() as current_database")
        result = cursor.fetchone()
        current_db = result[0]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã mcl
        cursor.execute("""
            SELECT COUNT(*) as table_count
            FROM information_schema.tables 
            WHERE table_schema = 'mcl'
        """)
        result = cursor.fetchone()
        mcl_tables_count = result[0]
        
        conn.close()
        
        console.print(f"‚úÖ MS SQL Server: {mssql_config['server']}:{mssql_config['port']}")
        console.print(f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {current_db}")
        console.print(f"üìä –¢–∞–±–ª–∏—Ü –≤ —Å—Ö–µ–º–µ mcl: {mcl_tables_count}")
        
        return True
        
    except Exception as e:
        console.print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MS SQL Server: {e}")
        return False

def check_postgres_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
    try:
        postgres_config = config['database']['postgres']
        
        conn = psycopg2.connect(
            host=postgres_config['host'],
            port=postgres_config['port'],
            dbname=postgres_config['database'],
            user=postgres_config['user'],
            password=postgres_config['password'],
            connect_timeout=postgres_config['connection_timeout'],
            sslmode=postgres_config['ssl_mode']
        )
        
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT current_database()")
        result = cursor.fetchone()
        current_db = result[0]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã mcl
        cursor.execute("""
            SELECT COUNT(*) as table_count
            FROM information_schema.tables 
            WHERE table_schema = 'mcl'
        """)
        result = cursor.fetchone()
        mcl_tables_count = result[0]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã ags
        cursor.execute("""
            SELECT COUNT(*) as table_count
            FROM information_schema.tables 
            WHERE table_schema = 'ags'
        """)
        result = cursor.fetchone()
        ags_tables_count = result[0]
        
        conn.close()
        
        console.print(f"‚úÖ PostgreSQL: {postgres_config['host']}:{postgres_config['port']}")
        console.print(f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {current_db}")
        console.print(f"üìä –¢–∞–±–ª–∏—Ü –≤ —Å—Ö–µ–º–µ mcl: {mcl_tables_count}")
        console.print(f"üìä –¢–∞–±–ª–∏—Ü –≤ —Å—Ö–µ–º–µ ags: {ags_tables_count}")
        
        return True
        
    except Exception as e:
        console.print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
        return False

def check_database_connections():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö"""
    
    console.print("[bold blue]üîç –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô –ö –ë–ê–ó–ê–ú –î–ê–ù–ù–´–•[/bold blue]")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ MS SQL Server
    console.print("\n[blue]–ü—Ä–æ–≤–µ—Ä–∫–∞ MS SQL Server...[/blue]")
    mssql_ok = check_mssql_connection()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL
    console.print("\n[blue]–ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL...[/blue]")
    postgres_ok = check_postgres_connection()
    
    # –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    if mssql_ok and postgres_ok:
        console.print("\n[green]‚úÖ –í—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω—ã![/green]")
        return True
    else:
        console.print("\n[red]‚ùå –û—à–∏–±–∫–∏ –≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è—Ö –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö![/red]")
        return False

def validate_migration_parameters_from_metadata(table_name):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    postgres_config = config['database']['postgres']
    conn = psycopg2.connect(
        host=postgres_config['host'],
        port=postgres_config['port'],
        dbname=postgres_config['database'],
        user=postgres_config['user'],
        password=postgres_config['password'],
        connect_timeout=postgres_config['connection_timeout'],
        sslmode=postgres_config['ssl_mode']
    )
    
    try:
        cursor = conn.cursor()
        
        # 1. –ü–æ–∏—Å–∫ –∏—Å—Ö–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        source_query = """
        SELECT id, object_name, schema_name, row_count, column_count
        FROM mcl.mssql_tables 
        WHERE object_name = %s
        """
        cursor.execute(source_query, (table_name,))
        source_table = cursor.fetchone()
        
        if not source_table:
            raise ValueError(f"–ò—Å—Ö–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ {table_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ mssql_tables")
        
        source_table_id = source_table[0]
        
        # 2. –ü–æ–∏—Å–∫ —Ü–µ–ª–µ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
        target_query = """
        SELECT id, object_name, schema_name, migration_status
        FROM mcl.postgres_tables 
        WHERE source_table_id = %s
        """
        cursor.execute(target_query, (source_table_id,))
        target_table = cursor.fetchone()
        
        if not target_table:
            raise ValueError(f"–¶–µ–ª–µ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è {table_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ postgres_tables")
        
        # 3. –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if source_table_id <= 0:
            raise ValueError("SOURCE_TABLE_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        
        if target_table[0] <= 0:
            raise ValueError("TARGET_TABLE_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        
        if not target_table[1]:
            raise ValueError("TARGET_TABLE_NAME –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")
        
        return {
            'source_table_id': source_table_id,
            'target_table_id': target_table[0],
            'source_table_name': table_name,
            'target_table_name': target_table[1],
            'source_schema': source_table[2],
            'target_schema': target_table[2],
            'migration_status': target_table[3]
        }
        
    finally:
        conn.close()

def migrate_single_table(table_name):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–µ–π –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
    
    console.print(f"[bold blue]üöÄ –ú–ò–ì–†–ê–¶–ò–Ø –¢–ê–ë–õ–ò–¶–´ {table_name}[/bold blue]")
    
    try:
        # –≠–¢–ê–ü 0: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
        console.print("[blue]–≠—Ç–∞–ø 0: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö[/blue]")
        if not check_database_connections():
            console.print("[red]‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö![/red]")
            return False
        
        # –≠–¢–ê–ü 1: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        console.print("[blue]–≠—Ç–∞–ø 1: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö[/blue]")
        params = validate_migration_parameters_from_metadata(table_name)
        
        console.print(f"üìä –ò—Å—Ö–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞: {params['source_table_name']} (ID: {params['source_table_id']})")
        console.print(f"üìä –¶–µ–ª–µ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞: {params['target_table_name']} (ID: {params['target_table_id']})")
        console.print(f"üìä –°—Ö–µ–º—ã: {params['source_schema']} ‚Üí {params['target_schema']}")
        console.print(f"üìä –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏: {params['migration_status']}")
        
        # –≠–¢–ê–ü 2: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
        console.print("[blue]–≠—Ç–∞–ø 2: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã[/blue]")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        postgres_config = config['database']['postgres']
        conn = psycopg2.connect(
            host=postgres_config['host'],
            port=postgres_config['port'],
            dbname=postgres_config['database'],
            user=postgres_config['user'],
            password=postgres_config['password'],
            connect_timeout=postgres_config['connection_timeout'],
            sslmode=postgres_config['ssl_mode']
        )
        
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        columns_query = """
        SELECT 
            pc.column_name,
            pdt.typname_with_params as postgres_type,
            pc.is_nullable,
            pc.is_identity,
            pc.default_value
        FROM mcl.postgres_tables pt
        JOIN mcl.postgres_columns pc ON pt.id = pc.table_id
        JOIN mcl.postgres_derived_types pdt ON pc.postgres_data_type_id = pdt.id
        WHERE pt.id = %s
        ORDER BY pc.ordinal_position
        """
        cursor.execute(columns_query, (params['target_table_id'],))
        columns = cursor.fetchall()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è DDL
        ddl_parts = []
        for col in columns:
            col_name, col_type, is_nullable, is_identity, default_value = col
            
            col_def = f"{col_name} {col_type}"
            
            if is_identity:
                col_def += " GENERATED ALWAYS AS IDENTITY"
            
            if not is_nullable and not is_identity:
                col_def += " NOT NULL"
            
            if default_value and not is_identity:
                col_def += f" DEFAULT {default_value}"
            
            ddl_parts.append(col_def)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        create_table_sql = f"""
        CREATE TABLE {params['target_schema']}.{params['target_table_name']} (
            {', '.join(ddl_parts)}
        )
        """
        
        console.print(f"üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {params['target_schema']}.{params['target_table_name']}")
        cursor.execute(create_table_sql)
        conn.commit()
        
        # –≠–¢–ê–ü 3: –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö
        console.print("[blue]–≠—Ç–∞–ø 3: –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö[/blue]")
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MS SQL Server
        mssql_config = config['database']['mssql']
        mssql_conn = pyodbc.connect(
            f"DRIVER={{{mssql_config['driver']}}};"
            f"SERVER={mssql_config['server']},{mssql_config['port']};"
            f"DATABASE={mssql_config['database']};"
            f"UID={mssql_config['user']};"
            f"PWD={mssql_config['password']};"
            "TrustServerCertificate=yes;"
        )
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        source_query = f"SELECT * FROM {params['source_schema']}.{params['source_table_name']}"
        df = pd.read_sql(source_query, mssql_conn)
        
        console.print(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫ –∏–∑ {params['source_schema']}.{params['source_table_name']}")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL
        if len(df) > 0:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            columns_list = list(df.columns)
            placeholders = ', '.join(['%s'] * len(columns_list))
            columns_str = ', '.join(columns_list)
            
            # –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å OVERRIDING SYSTEM VALUE –¥–ª—è identity –∫–æ–ª–æ–Ω–æ–∫
            insert_sql = f"""
            INSERT INTO {params['target_schema']}.{params['target_table_name']} ({columns_str}) 
            OVERRIDING SYSTEM VALUE 
            VALUES ({placeholders})
            """
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å—Ç–∞–≤–∫–∏
            cursor.executemany(insert_sql, df.values.tolist())
            conn.commit()
            
            console.print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫ –≤ {params['target_schema']}.{params['target_table_name']}")
        else:
            console.print("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞, —Å–æ–∑–¥–∞–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞")
        
        # –≠–¢–ê–ü 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        console.print("[blue]–≠—Ç–∞–ø 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤[/blue]")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫
        cursor.execute(f"SELECT COUNT(*) FROM {params['target_schema']}.{params['target_table_name']}")
        result = cursor.fetchone()
        target_count = result[0]
        
        console.print(f"üìä –°—Ç—Ä–æ–∫ –≤ —Ü–µ–ª–µ–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ: {target_count}")
        
        if target_count == len(df):
            console.print(f"[green]‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã {table_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ![/green]")
            return True
        else:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç![/red]")
            return False
            
    except Exception as e:
        console.print(f"[red]‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:[/red] {e}")
        return False
    finally:
        if 'conn' in locals():
            conn.close()
        if 'mssql_conn' in locals():
            mssql_conn.close()

if __name__ == "__main__":
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∏–≥—Ä–∞—Ü–∏–∏ - —Ç–æ–ª—å–∫–æ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã
    TABLE_NAME = "accnt"  # –ò–º—è —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
    
    success = migrate_single_table(TABLE_NAME)
    sys.exit(0 if success else 1)








