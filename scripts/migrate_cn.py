#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã cn –∏–∑ MS SQL Server –≤ PostgreSQL
"""
import psycopg2
import pyodbc
import pandas as pd
from rich.console import Console

console = Console()

def connect_databases():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö"""
    console.print("[blue]üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö...[/blue]")
    
    # PostgreSQL
    pg_conn = psycopg2.connect(
        host="localhost",
        port=5432,
        dbname="fish_eye",
        user="postgres",
        password="postgres"
    )
    
    # MS SQL Server
    mssql_conn = pyodbc.connect(
        "DRIVER={ODBC Driver 17 for SQL Server};"
        "SERVER=localhost,1433;"
        "DATABASE=FishEye;"
        "UID=sa;"
        "PWD=kolob_OK1;"
        "TrustServerCertificate=yes;"
    )
    
    console.print("[green]‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã[/green]")
    return pg_conn, mssql_conn

def check_table_readiness(pg_conn, mssql_conn):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ç–∞–±–ª–∏—Ü—ã cn –∫ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    console.print("[blue]üîç –≠–¢–ê–ü 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ç–∞–±–ª–∏—Ü—ã cn[/blue]")
    
    pg_cursor = pg_conn.cursor()
    mssql_cursor = mssql_conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ MS SQL Server
    mssql_cursor.execute("SELECT COUNT(*) FROM ags.cn")
    row_count_mssql = mssql_cursor.fetchone()[0]
    console.print(f"üìä –°—Ç—Ä–æ–∫ –≤ MS SQL Server: {row_count_mssql}")
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –≤ PostgreSQL
    try:
        pg_cursor.execute("SELECT COUNT(*) FROM ags.cn")
        row_count_pg = pg_cursor.fetchone()[0]
        console.print(f"üìä –°—Ç—Ä–æ–∫ –≤ PostgreSQL: {row_count_pg}")
        table_exists = True
    except:
        console.print("üìä –¢–∞–±–ª–∏—Ü–∞ cn –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ PostgreSQL")
        row_count_pg = 0
        table_exists = False
    
    # –ü–æ–ª—É—á–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã –∏–∑ MS SQL Server
    console.print("[blue]üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã cn –∏–∑ MS SQL Server[/blue]")
    
    mssql_cursor.execute("""
    SELECT 
        COLUMN_NAME,
        DATA_TYPE,
        IS_NULLABLE,
        CHARACTER_MAXIMUM_LENGTH,
        NUMERIC_PRECISION,
        NUMERIC_SCALE,
        COLUMN_DEFAULT
    FROM INFORMATION_SCHEMA.COLUMNS 
    WHERE TABLE_SCHEMA = 'ags' AND TABLE_NAME = 'cn'
    ORDER BY ORDINAL_POSITION
    """)
    
    columns_info = mssql_cursor.fetchall()
    console.print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–æ–Ω–æ–∫: {len(columns_info)}")
    
    for i, col in enumerate(columns_info):
        col_name, data_type, nullable, max_length, precision, scale, default = col
        console.print(f"  {i+1}. {col_name}: {data_type} ({'NULL' if nullable == 'YES' else 'NOT NULL'})")
        
        if max_length:
            console.print(f"     –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {max_length}")
        if precision:
            console.print(f"     –¢–æ—á–Ω–æ—Å—Ç—å: {precision}, –ú–∞—Å—à—Ç–∞–±: {scale}")
        if default:
            console.print(f"     –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default}")
    
    # –û—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    readiness_score = 0
    
    if row_count_mssql > 0:
        readiness_score += 25
        console.print("[green]‚úÖ –î–∞–Ω–Ω—ã–µ –≤ MS SQL Server –Ω–∞–π–¥–µ–Ω—ã[/green]")
    
    if len(columns_info) > 0:
        readiness_score += 25
        console.print("[green]‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—É—á–µ–Ω–∞[/green]")
    
    if not table_exists:
        readiness_score += 25
        console.print("[green]‚úÖ –¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ PostgreSQL (–≥–æ—Ç–æ–≤–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é)[/green]")
    else:
        console.print("[yellow]‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ PostgreSQL[/yellow]")
    
    if row_count_mssql == 2329:  # –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
        readiness_score += 25
        console.print("[green]‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É[/green]")
    
    console.print(f"[blue]üìä –û—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {readiness_score}%[/blue]")
    
    return readiness_score >= 75, columns_info, row_count_mssql

def create_table_structure(columns_info):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã –≤ PostgreSQL"""
    console.print("[blue]üîß –≠–¢–ê–ü 2: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã cn –≤ PostgreSQL[/blue]")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    pg_conn = psycopg2.connect(
        host="localhost",
        port=5432,
        dbname="fish_eye",
        user="postgres",
        password="postgres"
    )
    pg_cursor = pg_conn.cursor()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º DDL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
    ddl_parts = ["CREATE TABLE ags.cn ("]
    
    for col in columns_info:
        col_name, data_type, nullable, max_length, precision, scale, default = col
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö MS SQL -> PostgreSQL
        if data_type == "int":
            pg_type = "INTEGER"
        elif data_type == "varchar":
            pg_type = f"VARCHAR({max_length})" if max_length and max_length > 0 else "VARCHAR"
        elif data_type == "nvarchar":
            # –î–ª—è nvarchar —Å max_length = -1 (MAX) –∏—Å–ø–æ–ª—å–∑—É–µ–º TEXT
            if max_length == -1:
                pg_type = "TEXT"
            else:
                pg_type = f"VARCHAR({max_length})" if max_length and max_length > 0 else "VARCHAR"
        elif data_type == "datetime":
            pg_type = "TIMESTAMP"
        elif data_type == "bit":
            pg_type = "BOOLEAN"
        elif data_type == "decimal":
            pg_type = f"DECIMAL({precision},{scale})" if precision else "DECIMAL"
        else:
            pg_type = data_type.upper()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        constraints = []
        if nullable == "NO":
            constraints.append("NOT NULL")
        
        if default:
            constraints.append(f"DEFAULT {default}")
        
        constraint_str = " ".join(constraints)
        ddl_parts.append(f"    {col_name} {pg_type} {constraint_str},")
    
    # –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø—è—Ç—É—é –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–∫–æ–±–∫—É
    ddl_parts[-1] = ddl_parts[-1].rstrip(",")
    ddl_parts.append(");")
    
    ddl = "\n".join(ddl_parts)
    console.print("[blue]üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π DDL:[/blue]")
    console.print(ddl)
    
    try:
        # –£–¥–∞–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        pg_cursor.execute("DROP TABLE IF EXISTS ags.cn CASCADE;")
        pg_conn.commit()
        console.print("[yellow]‚ö†Ô∏è –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ç–∞–±–ª–∏—Ü–∞ —É–¥–∞–ª–µ–Ω–∞[/yellow]")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        pg_cursor.execute(ddl)
        pg_conn.commit()
        console.print("[green]‚úÖ –¢–∞–±–ª–∏—Ü–∞ cn —Å–æ–∑–¥–∞–Ω–∞ –≤ PostgreSQL[/green]")
        return True
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}[/red]")
        try:
            pg_conn.rollback()
        except:
            pass
        return False
    finally:
        pg_conn.close()

def migrate_data(pg_conn, mssql_conn, row_count):
    """–ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ MS SQL Server –≤ PostgreSQL"""
    console.print("[blue]üì¶ –≠–¢–ê–ü 3: –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ MS SQL Server –≤ PostgreSQL[/blue]")
    
    pg_cursor = pg_conn.cursor()
    mssql_cursor = mssql_conn.cursor()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–Ω–∫–∞—Ö –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏
        mssql_cursor.execute("""
        SELECT COLUMN_NAME 
        FROM INFORMATION_SCHEMA.COLUMNS 
        WHERE TABLE_SCHEMA = 'ags' AND TABLE_NAME = 'cn'
        ORDER BY ORDINAL_POSITION
        """)
        column_names = [row[0] for row in mssql_cursor.fetchall()]
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –¥–ª—è INSERT
        placeholders = ",".join(["%s"] * len(column_names))
        columns_str = ",".join(column_names)
        
        insert_sql = f"INSERT INTO ags.cn ({columns_str}) VALUES ({placeholders})"
        
        console.print(f"[blue]üìù SQL –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏: {insert_sql}[/blue]")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ MS SQL Server
        console.print("[blue]üì• –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ MS SQL Server...[/blue]")
        mssql_cursor.execute("SELECT * FROM ags.cn ORDER BY 1")
        
        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ü–∏—è–º–∏
        batch_size = 1000
        total_inserted = 0
        
        while True:
            rows = mssql_cursor.fetchmany(batch_size)
            if not rows:
                break
                
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è PostgreSQL
            converted_rows = []
            for row in rows:
                converted_row = []
                for value in row:
                    if value is None:
                        converted_row.append(None)
                    elif isinstance(value, str):
                        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                        converted_row.append(value.replace("'", "''"))
                    else:
                        converted_row.append(value)
                converted_rows.append(tuple(converted_row))
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            pg_cursor.executemany(insert_sql, converted_rows)
            total_inserted += len(converted_rows)
            
            console.print(f"[blue]üìä –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ —Å—Ç—Ä–æ–∫: {total_inserted}/{row_count}[/blue]")
        
        pg_conn.commit()
        console.print(f"[green]‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã: {total_inserted} —Å—Ç—Ä–æ–∫[/green]")
        return True
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö: {e}[/red]")
        pg_conn.rollback()
        return False

def verify_migration(pg_conn, expected_count):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    console.print("[blue]üîç –≠–¢–ê–ü 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏[/blue]")
    
    pg_cursor = pg_conn.cursor()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
        pg_cursor.execute("SELECT COUNT(*) FROM ags.cn")
        actual_count = pg_cursor.fetchone()[0]
        
        console.print(f"üìä –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {expected_count}")
        console.print(f"üìä –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {actual_count}")
        
        if actual_count == expected_count:
            console.print("[green]‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ —Å–æ–≤–ø–∞–¥–∞–µ—Ç[/green]")
        else:
            console.print(f"[red]‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫: {actual_count} != {expected_count}[/red]")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫
        pg_cursor.execute("SELECT * FROM ags.cn ORDER BY 1 LIMIT 5")
        sample_rows = pg_cursor.fetchall()
        
        console.print("[blue]üìã –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:[/blue]")
        for i, row in enumerate(sample_rows, 1):
            console.print(f"  {i}. {row}")
        
        console.print("[green]‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã cn –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ![/green]")
        return True
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}[/red]")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    console.print("[bold blue]üöÄ –ù–ê–ß–ê–õ–û –ú–ò–ì–†–ê–¶–ò–ò –¢–ê–ë–õ–ò–¶–´ CN[/bold blue]")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
        pg_conn, mssql_conn = connect_databases()
        
        # –≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        is_ready, columns_info, row_count = check_table_readiness(pg_conn, mssql_conn)
        
        if not is_ready:
            console.print("[red]‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ –º–∏–≥—Ä–∞—Ü–∏–∏[/red]")
            return False
        
        # –≠—Ç–∞–ø 2: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        if not create_table_structure(columns_info):
            console.print("[red]‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã[/red]")
            return False
        
        # –≠—Ç–∞–ø 3: –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö
        if not migrate_data(pg_conn, mssql_conn, row_count):
            console.print("[red]‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö[/red]")
            return False
        
        # –≠—Ç–∞–ø 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if not verify_migration(pg_conn, row_count):
            console.print("[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤[/red]")
            return False
        
        console.print("[bold green]üéâ –ú–ò–ì–†–ê–¶–ò–Ø –¢–ê–ë–õ–ò–¶–´ CN –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û![/bold green]")
        return True
        
    except Exception as e:
        console.print(f"[red]‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}[/red]")
        return False
    
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        try:
            pg_conn.close()
            mssql_conn.close()
            console.print("[blue]üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã[/blue]")
        except:
            pass

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)