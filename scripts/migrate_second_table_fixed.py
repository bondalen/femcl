#!/usr/bin/env python3
"""
FEMCL - –ú–∏–≥—Ä–∞—Ü–∏—è –≤—Ç–æ—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã cn (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
–ê–Ω–∞–ª–∏–∑, —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã cn —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –∫–æ–ª–æ–Ω–æ–∫
"""
import psycopg2
import pyodbc
import yaml
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from datetime import datetime

console = Console()

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        with open('/home/alex/projects/sql/femcl/config/config.yaml', 'r', encoding='utf-8') as file:
            config = yaml.safe_load(file)
        return config
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}[/red]")
        return None

def analyze_table_cn():
    """–ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã cn –≤ MS SQL Server"""
    console.print("[blue]üîç –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã cn –≤ MS SQL Server...[/blue]")
    
    config = load_config()
    if not config:
        return None
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MS SQL Server
        mssql_config = config['database']['mssql']
        connection_string = (
            f"DRIVER={{{mssql_config['driver']}}};"
            f"SERVER={mssql_config['server']},{mssql_config['port']};"
            f"DATABASE={mssql_config['database']};"
            f"UID={mssql_config['user']};"
            f"PWD={mssql_config['password']};"
            f"TrustServerCertificate={'yes' if mssql_config['trust_certificate'] else 'no'};"
        )
        
        conn = pyodbc.connect(connection_string)
        cursor = conn.cursor()
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("""
            SELECT 
                COLUMN_NAME,
                DATA_TYPE,
                IS_NULLABLE,
                COLUMN_DEFAULT,
                CHARACTER_MAXIMUM_LENGTH,
                NUMERIC_PRECISION,
                NUMERIC_SCALE,
                ORDINAL_POSITION
            FROM information_schema.columns 
            WHERE table_schema = 'ags' AND table_name = 'cn'
            ORDER BY ORDINAL_POSITION
        """)
        
        columns = cursor.fetchall()
        
        # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT COUNT(*) FROM ags.cn")
        row_count = cursor.fetchone()[0]
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –∫–æ–ª–æ–Ω–æ–∫
        cursor.execute("SELECT TOP 5 cn_key, cn_number, cn_date, cn_note, cnMark, cnTimeOfEntry, cnName FROM ags.cn ORDER BY cn_key")
        sample_data = cursor.fetchall()
        
        conn.close()
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        console.print(f"[green]‚úÖ –¢–∞–±–ª–∏—Ü–∞ cn –Ω–∞–π–¥–µ–Ω–∞ –≤ MS SQL Server[/green]")
        console.print(f"[blue]üìä –°—Ç—Ä–æ–∫: {row_count}[/blue]")
        console.print(f"[blue]üìä –ö–æ–ª–æ–Ω–æ–∫: {len(columns)}[/blue]")
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫–æ–ª–æ–Ω–æ–∫
        table = Table(title="–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã cn")
        table.add_column("–ü–æ–∑–∏—Ü–∏—è", style="cyan", width=8)
        table.add_column("–ö–æ–ª–æ–Ω–∫–∞", style="green")
        table.add_column("–¢–∏–ø", style="yellow")
        table.add_column("NULL", style="blue", width=6)
        table.add_column("–î–ª–∏–Ω–∞", style="magenta", width=8)
        
        for col in columns:
            length = col[4] if col[4] else ""
            table.add_row(
                str(col[7]),  # ORDINAL_POSITION
                col[0],       # COLUMN_NAME
                col[1],       # DATA_TYPE
                col[2],       # IS_NULLABLE
                str(length)   # CHARACTER_MAXIMUM_LENGTH
            )
        
        console.print(table)
        
        # –û–±—Ä–∞–∑–µ—Ü –¥–∞–Ω–Ω—ã—Ö
        if sample_data:
            console.print("\n[blue]üìã –û–±—Ä–∞–∑–µ—Ü –¥–∞–Ω–Ω—ã—Ö:[/blue]")
            sample_table = Table(title="–ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫")
            sample_table.add_column("cn_key", style="cyan")
            sample_table.add_column("cn_number", style="green")
            sample_table.add_column("cn_date", style="yellow")
            sample_table.add_column("cn_note", style="magenta")
            sample_table.add_column("cnMark", style="blue")
            sample_table.add_column("cnTimeOfEntry", style="red")
            sample_table.add_column("cnName", style="white")
            
            for row in sample_data:
                sample_table.add_row(
                    str(row[0]), str(row[1]), str(row[2]), 
                    str(row[3]), str(row[4]), str(row[5]), str(row[6])
                )
            
            console.print(sample_table)
        
        return {
            'columns': columns,
            'row_count': row_count,
            'sample_data': sample_data
        }
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–±–ª–∏—Ü—ã cn: {e}[/red]")
        return None

def create_target_table_cn():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã cn –≤ PostgreSQL —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
    console.print("[blue]üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã cn –≤ PostgreSQL...[/blue]")
    
    try:
        conn = psycopg2.connect(
            host="localhost",
            port=5432,
            dbname="fish_eye",
            user="postgres",
            password="postgres"
        )
        
        cursor = conn.cursor()
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        cursor.execute("DROP TABLE IF EXISTS ags.cn CASCADE")
        
        # DDL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã cn —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –∫–æ–ª–æ–Ω–æ–∫
        ddl = """
        CREATE TABLE ags.cn (
            cn_key INTEGER NOT NULL,
            cn_number VARCHAR(255),
            cn_date DATE,
            cn_note TEXT,
            cnMark INTEGER,
            cnTimeOfEntry TIMESTAMP,
            cnName VARCHAR(255)
        );
        """
        
        cursor.execute(ddl)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞
        cursor.execute("""
            ALTER TABLE ags.cn 
            ADD CONSTRAINT pk_cn PRIMARY KEY (cn_key)
        """)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
        cursor.execute("""
            CREATE INDEX idx_cn_cn_number 
            ON ags.cn (cn_number)
        """)
        
        cursor.execute("""
            CREATE INDEX idx_cn_cnName 
            ON ags.cn (cnName)
        """)
        
        conn.commit()
        
        console.print("[green]‚úÖ –¢–∞–±–ª–∏—Ü–∞ cn —Å–æ–∑–¥–∞–Ω–∞ –≤ PostgreSQL[/green]")
        console.print("[green]‚úÖ –ü–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á —Å–æ–∑–¥–∞–Ω (cn_key)[/green]")
        console.print("[green]‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã (cn_number, cnName)[/green]")
        
        return True
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}[/red]")
        return False
    
    finally:
        if 'conn' in locals():
            conn.close()

def migrate_data_cn():
    """–ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã cn –∏–∑ MS SQL Server –≤ PostgreSQL"""
    console.print("[blue]üì¶ –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã cn –∏–∑ MS SQL Server –≤ PostgreSQL...[/blue]")
    
    config = load_config()
    if not config:
        return False
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MS SQL Server
        mssql_config = config['database']['mssql']
        mssql_conn = pyodbc.connect(
            f"DRIVER={{{mssql_config['driver']}}};"
            f"SERVER={mssql_config['server']},{mssql_config['port']};"
            f"DATABASE={mssql_config['database']};"
            f"UID={mssql_config['user']};"
            f"PWD={mssql_config['password']};"
            f"TrustServerCertificate={'yes' if mssql_config['trust_certificate'] else 'no'};"
        )
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
        postgres_conn = psycopg2.connect(
            host="localhost",
            port=5432,
            dbname="fish_eye",
            user="postgres",
            password="postgres"
        )
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ MS SQL Server —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –∫–æ–ª–æ–Ω–æ–∫
        mssql_cursor = mssql_conn.cursor()
        mssql_cursor.execute("SELECT cn_key, cn_number, cn_date, cn_note, cnMark, cnTimeOfEntry, cnName FROM ags.cn ORDER BY cn_key")
        source_data = mssql_cursor.fetchall()
        
        console.print(f"[blue]üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(source_data)} —Å—Ç—Ä–æ–∫ –∏–∑ MS SQL Server[/blue]")
        
        # –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL
        postgres_cursor = postgres_conn.cursor()
        
        # –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –∫–æ–ª–æ–Ω–æ–∫
        for row in source_data:
            postgres_cursor.execute(
                "INSERT INTO ags.cn (cn_key, cn_number, cn_date, cn_note, cnMark, cnTimeOfEntry, cnName) VALUES (%s, %s, %s, %s, %s, %s, %s)",
                row
            )
        
        postgres_conn.commit()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        postgres_cursor.execute("SELECT COUNT(*) FROM ags.cn")
        target_count = postgres_cursor.fetchone()[0]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        postgres_cursor.execute("SELECT * FROM ags.cn ORDER BY cn_key LIMIT 5")
        target_sample = postgres_cursor.fetchall()
        
        console.print(f"[green]‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {target_count} —Å—Ç—Ä–æ–∫ –≤ PostgreSQL[/green]")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if target_sample:
            console.print("\n[blue]üìã –û–±—Ä–∞–∑–µ—Ü –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:[/blue]")
            sample_table = Table(title="–ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ –≤ PostgreSQL")
            sample_table.add_column("cn_key", style="cyan")
            sample_table.add_column("cn_number", style="green")
            sample_table.add_column("cn_date", style="yellow")
            sample_table.add_column("cn_note", style="magenta")
            sample_table.add_column("cnMark", style="blue")
            sample_table.add_column("cnTimeOfEntry", style="red")
            sample_table.add_column("cnName", style="white")
            
            for row in target_sample:
                sample_table.add_row(
                    str(row[0]), str(row[1]), str(row[2]), 
                    str(row[3]), str(row[4]), str(row[5]), str(row[6])
                )
            
            console.print(sample_table)
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        mssql_conn.close()
        postgres_conn.close()
        
        return True
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö: {e}[/red]")
        return False

def validate_table_cn():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã cn –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    console.print("[blue]üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã cn –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏...[/blue]")
    
    try:
        conn = psycopg2.connect(
            host="localhost",
            port=5432,
            dbname="fish_eye",
            user="postgres",
            password="postgres"
        )
        
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("""
            SELECT EXISTS (
                SELECT 1 FROM information_schema.tables 
                WHERE table_schema = 'ags' AND table_name = 'cn'
            )
        """)
        table_exists = cursor.fetchone()[0]
        
        if not table_exists:
            console.print("[red]‚ùå –¢–∞–±–ª–∏—Ü–∞ cn –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ PostgreSQL[/red]")
            return False
        
        # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT COUNT(*) FROM ags.cn")
        row_count = cursor.fetchone()[0]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞
        cursor.execute("""
            SELECT cn_key, COUNT(*) as cnt
            FROM ags.cn
            GROUP BY cn_key
            HAVING COUNT(*) > 1
        """)
        duplicate_keys = cursor.fetchall()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ NULL –∑–Ω–∞—á–µ–Ω–∏–π –≤ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª—è—Ö
        cursor.execute("""
            SELECT 
                SUM(CASE WHEN cn_key IS NULL THEN 1 ELSE 0 END) as null_keys,
                SUM(CASE WHEN cn_number IS NULL THEN 1 ELSE 0 END) as null_numbers,
                SUM(CASE WHEN cnName IS NULL THEN 1 ELSE 0 END) as null_names
            FROM ags.cn
        """)
        null_analysis = cursor.fetchone()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
        cursor.execute("""
            SELECT indexname, indexdef
            FROM pg_indexes 
            WHERE schemaname = 'ags' AND tablename = 'cn'
        """)
        indexes = cursor.fetchall()
        
        conn.close()
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        console.print(f"[green]‚úÖ –¢–∞–±–ª–∏—Ü–∞ cn –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–∞ –≤ PostgreSQL[/green]")
        console.print(f"[blue]üìä –°—Ç—Ä–æ–∫: {row_count}[/blue]")
        console.print(f"[blue]üìä –ò–Ω–¥–µ–∫—Å–æ–≤: {len(indexes)}[/blue]")
        
        if duplicate_keys:
            console.print(f"[red]‚ùå –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞: {len(duplicate_keys)}[/red]")
        else:
            console.print(f"[green]‚úÖ –ü–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á —É–Ω–∏–∫–∞–ª–µ–Ω[/green]")
        
        if null_analysis[0] > 0:
            console.print(f"[red]‚ùå –ù–∞–π–¥–µ–Ω—ã NULL –∑–Ω–∞—á–µ–Ω–∏—è –≤ cn_key: {null_analysis[0]}[/red]")
        else:
            console.print(f"[green]‚úÖ –ù–µ—Ç NULL –∑–Ω–∞—á–µ–Ω–∏–π –≤ cn_key[/green]")
        
        return True
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}[/red]")
        return False
    
    finally:
        if 'conn' in locals():
            conn.close()

def update_migration_status_cn():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã cn –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
    console.print("[blue]üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã cn...[/blue]")
    
    try:
        conn = psycopg2.connect(
            host="localhost",
            port=5432,
            dbname="fish_eye",
            user="postgres",
            password="postgres"
        )
        
        cursor = conn.cursor()
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ mssql_tables
        cursor.execute("""
            UPDATE mcl.mssql_tables 
            SET 
                migration_status = 'completed',
                migration_date = NOW()
            WHERE object_name = 'cn' AND task_id = 2
        """)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ postgres_tables
        cursor.execute("""
            UPDATE mcl.postgres_tables 
            SET 
                migration_status = 'completed',
                migration_date = NOW()
            WHERE object_name = 'cn'
        """)
        
        conn.commit()
        
        console.print("[green]‚úÖ –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã cn –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 'completed'[/green]")
        
        return True
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}[/red]")
        return False
    
    finally:
        if 'conn' in locals():
            conn.close()

def update_progress_file_cn():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã cn"""
    console.print("[blue]üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã cn...[/blue]")
    
    try:
        progress_file = "/home/alex/projects/sql/femcl/progress/20250127_143000_migration_progress.md"
        
        # –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
        with open(progress_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ó–∞–º–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–µ cn
        old_cn_info = """2. **cn** (ags)
   - –ö–æ–ª–æ–Ω–æ–∫: 7
   - –°—Ç—Ä–æ–∫: 2329
   - –ü–µ—Ä–≤–∏—á–Ω—ã—Ö –∫–ª—é—á–µ–π: 1
   - –ò–Ω–¥–µ–∫—Å–æ–≤: 1
   - –í–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π: 0
   - –°—Ç–∞—Ç—É—Å: pending"""
        
        new_cn_info = f"""2. **cn** (ags) ‚úÖ –ó–ê–í–ï–†–®–ï–ù–û –ò –í–ê–õ–ò–î–ò–†–û–í–ê–ù–û
   - –ö–æ–ª–æ–Ω–æ–∫: 7
   - –°—Ç—Ä–æ–∫: 2329
   - –ü–µ—Ä–≤–∏—á–Ω—ã—Ö –∫–ª—é—á–µ–π: 1
   - –ò–Ω–¥–µ–∫—Å–æ–≤: 3
   - –í–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π: 0
   - –°—Ç–∞—Ç—É—Å: completed
   - –î–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
   - –î–∞—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
   - –†–µ–∑—É–ª—å—Ç–∞—Ç: –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–æ
   - –°—Ç—Ä—É–∫—Ç—É—Ä–∞: cn_key (PK), cn_number, cn_date, cn_note, cnMark, cnTimeOfEntry, cnName
   - –í–∞–ª–∏–¥–∞—Ü–∏—è: ‚úÖ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
   - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ: ‚úÖ –ò—Å—Ö–æ–¥–Ω—ã–µ –∏ —Ü–µ–ª–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç"""
        
        # –ó–∞–º–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ
        updated_content = content.replace(old_cn_info, new_cn_info)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        updated_content = updated_content.replace(
            "- **–ó–∞–≤–µ—Ä—à–µ–Ω–æ:** 1",
            "- **–ó–∞–≤–µ—Ä—à–µ–Ω–æ:** 2"
        )
        updated_content = updated_content.replace(
            "- **–û–∂–∏–¥–∞–µ—Ç:** 68",
            "- **–û–∂–∏–¥–∞–µ—Ç:** 67"
        )
        updated_content = updated_content.replace(
            "- **–ü—Ä–æ–≥—Ä–µ—Å—Å:** 1.4%",
            "- **–ü—Ä–æ–≥—Ä–µ—Å—Å:** 2.9%"
        )
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã
        updated_content = updated_content.replace(
            f"**–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:** {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}",
            f"**–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:** {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
        )
        
        # –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        with open(progress_file, 'w', encoding='utf-8') as f:
            f.write(updated_content)
        
        console.print("[green]‚úÖ –§–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã cn[/green]")
        return True
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}[/red]")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã cn"""
    console.print(Panel.fit("[bold blue]üöÄ FEMCL - –ú–∏–≥—Ä–∞—Ü–∏—è –≤—Ç–æ—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã cn (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)[/bold blue]", border_style="blue"))
    
    # 1. –ê–Ω–∞–ª–∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    analysis_result = analyze_table_cn()
    if not analysis_result:
        console.print("[red]‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É[/red]")
        return False
    
    # 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
    if not create_target_table_cn():
        console.print("[red]‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ü–µ–ª–µ–≤—É—é —Ç–∞–±–ª–∏—Ü—É[/red]")
        return False
    
    # 3. –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö
    if not migrate_data_cn():
        console.print("[red]‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ[/red]")
        return False
    
    # 4. –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã
    if not validate_table_cn():
        console.print("[red]‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É[/red]")
        return False
    
    # 5. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
    if not update_migration_status_cn():
        console.print("[red]‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏[/red]")
        return False
    
    # 6. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    if not update_progress_file_cn():
        console.print("[red]‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞[/red]")
        return False
    
    console.print("\n[bold green]üéâ –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã cn –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ![/bold green]")
    console.print("[green]‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ PostgreSQL[/green]")
    console.print("[green]‚úÖ –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã (2,329 —Å—Ç—Ä–æ–∫)[/green]")
    console.print("[green]‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞[/green]")
    console.print("[green]‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 'completed'[/green]")
    console.print("[green]‚úÖ –§–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω[/green]")
    
    return True

if __name__ == "__main__":
    main()