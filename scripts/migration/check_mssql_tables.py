#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –≤ MS SQL Server
"""
import pyodbc
import yaml
from rich.console import Console
from rich.table import Table

console = Console()

def get_mssql_connection():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MS SQL Server"""
    with open('/home/alex/projects/sql/femcl/config/config.yaml', 'r', encoding='utf-8') as file:
        config = yaml.safe_load(file)
    
    mssql_config = config['database']['mssql']
    
    connection_string = (
        f"DRIVER={mssql_config['driver']};"
        f"SERVER={mssql_config['server']};"
        f"DATABASE={mssql_config['database']};"
        f"UID={mssql_config['user']};"
        f"PWD={mssql_config['password']};"
        f"Trusted_Connection={mssql_config.get('trusted_connection', 'no')};"
    )
    
    return pyodbc.connect(connection_string)

def check_available_tables():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü"""
    console.print("üîç –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–´–• –¢–ê–ë–õ–ò–¶ –í MS SQL SERVER")
    console.print("="*60)
    
    conn = get_mssql_connection()
    cursor = conn.cursor()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        cursor.execute("""
            SELECT 
                TABLE_SCHEMA,
                TABLE_NAME,
                TABLE_TYPE
            FROM INFORMATION_SCHEMA.TABLES 
            WHERE TABLE_TYPE = 'BASE TABLE'
            ORDER BY TABLE_SCHEMA, TABLE_NAME
        """)
        
        tables = cursor.fetchall()
        console.print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ö–µ–º–∞–º
        schemas = {}
        for table in tables:
            schema = table[0]
            if schema not in schemas:
                schemas[schema] = []
            schemas[schema].append(table[1])
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø–æ —Å—Ö–µ–º–∞–º
        for schema, table_list in schemas.items():
            console.print(f"\nüìã –°—Ö–µ–º–∞: {schema} ({len(table_list)} —Ç–∞–±–ª–∏—Ü)")
            for table in table_list[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                console.print(f"   - {table}")
            if len(table_list) > 10:
                console.print(f"   ... –∏ –µ—â—ë {len(table_list) - 10} —Ç–∞–±–ª–∏—Ü")
        
        # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã, –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ –Ω–∞—à–∏ —Ü–µ–ª–µ–≤—ã–µ
        target_tables = ['accnt', 'cn', 'cnInvCmmAgN']
        console.print(f"\nüéØ –ü–û–ò–°–ö –¶–ï–õ–ï–í–´–• –¢–ê–ë–õ–ò–¶:")
        
        for target in target_tables:
            found = False
            for table in tables:
                if target.lower() in table[1].lower():
                    console.print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–æ—Ö–æ–∂–∞—è: {table[0]}.{table[1]}")
                    found = True
                    break
            if not found:
                console.print(f"   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞: {target}")
        
        return tables
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞: {e}[/red]")
        return []
    finally:
        cursor.close()
        conn.close()

def analyze_specific_table(schema, table_name):
    """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
    console.print(f"\nüîç –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {schema}.{table_name}")
    
    conn = get_mssql_connection()
    cursor = conn.cursor()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–Ω–∫–∞—Ö
        cursor.execute(f"""
            SELECT 
                COLUMN_NAME,
                DATA_TYPE,
                IS_NULLABLE,
                CHARACTER_MAXIMUM_LENGTH,
                NUMERIC_PRECISION,
                NUMERIC_SCALE
            FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_SCHEMA = '{schema}' AND TABLE_NAME = '{table_name}'
            ORDER BY ORDINAL_POSITION
        """)
        
        columns = cursor.fetchall()
        console.print(f"   üìã –ö–æ–ª–æ–Ω–æ–∫: {len(columns)}")
        
        for col in columns:
            col_info = f"      - {col[0]}: {col[1]}"
            if col[2] == 'NO':
                col_info += " NOT NULL"
            if col[3]:
                col_info += f"({col[3]})"
            elif col[4]:
                col_info += f"({col[4]},{col[5]})"
            console.print(col_info)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        cursor.execute(f"SELECT COUNT(*) FROM [{schema}].[{table_name}]")
        count = cursor.fetchone()[0]
        console.print(f"   üìä –ó–∞–ø–∏—Å–µ–π: {count}")
        
        if count > 0:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –∑–∞–ø–∏—Å–∏
            cursor.execute(f"SELECT TOP 3 * FROM [{schema}].[{table_name}]")
            rows = cursor.fetchall()
            console.print(f"   üìù –ü–µ—Ä–≤—ã–µ –∑–∞–ø–∏—Å–∏:")
            for i, row in enumerate(rows, 1):
                console.print(f"      {i}. {row}")
        
        return True
        
    except Exception as e:
        console.print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    finally:
        cursor.close()
        conn.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    tables = check_available_tables()
    
    if tables:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü
        console.print(f"\nüîç –ê–ù–ê–õ–ò–ó –ü–ï–†–í–´–• –¢–ê–ë–õ–ò–¶:")
        for i, table in enumerate(tables[:5]):
            analyze_specific_table(table[0], table[1])
            if i >= 4:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 —Ç–∞–±–ª–∏—Ü–∞–º–∏
                break

if __name__ == "__main__":
    main()