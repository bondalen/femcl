#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Ç–∞–±–ª–∏—Ü –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
"""
import os
import sys
import json
import logging
from datetime import datetime
from typing import Dict, List, Optional, Set, Tuple
from collections import defaultdict, deque
import psycopg2
from rich.console import Console
from rich.table import Table
from rich.tree import Tree

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/home/alex/projects/sql/femcl')

console = Console()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/home/alex/projects/sql/femcl/logs/dependency_analysis.log', mode='a'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class DependencyAnalyzer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏"""
    
    def __init__(self, config_path="/home/alex/projects/sql/femcl/config/config.yaml"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
        import yaml
        with open(config_path, 'r', encoding='utf-8') as file:
            self.config = yaml.safe_load(file)
        
        self.connection = None
        self._dependency_graph = None
        self._migration_order = None
        self._circular_dependencies = None
        self._ensure_dependency_tables()
    
    def _get_connection(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
        if self.connection is None or self.connection.closed:
            postgres_config = self.config['database']['postgres']
            self.connection = psycopg2.connect(
                host=postgres_config['host'],
                port=postgres_config['port'],
                dbname=postgres_config['database'],
                user=postgres_config['user'],
                password=postgres_config['password'],
                connect_timeout=postgres_config['connection_timeout'],
                sslmode=postgres_config['ssl_mode']
            )
        return self.connection
    
    def _execute_query(self, query, params=None):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞"""
        conn = self._get_connection()
        try:
            cursor = conn.cursor()
            cursor.execute(query, params)
            
            if cursor.description:
                columns = [desc[0] for desc in cursor.description]
                rows = cursor.fetchall()
                return [dict(zip(columns, row)) for row in rows]
            else:
                conn.commit()
                return []
        finally:
            if cursor:
                cursor.close()
    
    def _ensure_dependency_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"""
        create_dependencies_table = """
        CREATE TABLE IF NOT EXISTS mcl.table_dependencies (
            id SERIAL PRIMARY KEY,
            source_table_name VARCHAR(255) NOT NULL,
            target_table_name VARCHAR(255) NOT NULL,
            dependency_type VARCHAR(50) NOT NULL,
            is_critical BOOLEAN DEFAULT FALSE,
            is_circular BOOLEAN DEFAULT FALSE,
            dependency_level INTEGER DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            UNIQUE(source_table_name, target_table_name)
        );
        """
        
        create_readiness_table = """
        CREATE TABLE IF NOT EXISTS mcl.referenced_table_readiness (
            id SERIAL PRIMARY KEY,
            table_name VARCHAR(255) NOT NULL,
            referenced_table_name VARCHAR(255) NOT NULL,
            is_ready BOOLEAN DEFAULT FALSE,
            readiness_reason TEXT,
            checked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            UNIQUE(table_name, referenced_table_name)
        );
        """
        
        create_indexes = """
        CREATE INDEX IF NOT EXISTS idx_table_dependencies_source 
        ON mcl.table_dependencies(source_table_name);
        
        CREATE INDEX IF NOT EXISTS idx_table_dependencies_target 
        ON mcl.table_dependencies(target_table_name);
        
        CREATE INDEX IF NOT EXISTS idx_table_dependencies_type 
        ON mcl.table_dependencies(dependency_type);
        
        CREATE INDEX IF NOT EXISTS idx_referenced_readiness_table 
        ON mcl.referenced_table_readiness(table_name);
        """
        
        try:
            self._execute_query(create_dependencies_table)
            self._execute_query(create_readiness_table)
            self._execute_query(create_indexes)
            logger.info("–¢–∞–±–ª–∏—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å–æ–∑–¥–∞–Ω—ã –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
            raise
    
    def analyze_table_dependencies(self, table_name: str) -> Dict:
        """
        –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        
        Args:
            table_name (str): –ò–º—è —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        
        Returns:
            dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö —Ç–∞–±–ª–∏—Ü—ã
        """
        console.print(f"[blue]üîç –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã {table_name}[/blue]")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        fk_query = """
        SELECT 
            pfk.constraint_name,
            pfk.referenced_table_id,
            pfk.delete_action,
            pfk.update_action,
            pc_ref.column_name as referenced_column_name,
            pc.column_name as source_column_name
        FROM mcl.postgres_foreign_keys pfk
        JOIN mcl.postgres_foreign_key_columns pfkc ON pfk.id = pfkc.foreign_key_id
        JOIN mcl.postgres_columns pc ON pfkc.column_id = pc.id
        JOIN mcl.postgres_columns pc_ref ON pfkc.referenced_column_id = pc_ref.id
        JOIN mcl.postgres_tables pt ON pfk.table_id = pt.id
        WHERE pt.object_name = %s
        """
        
        foreign_keys = self._execute_query(fk_query, (table_name,))
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ —Å—Å—ã–ª–æ—á–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        referenced_tables = []
        critical_dependencies = []
        
        for fk in foreign_keys:
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å—Å—ã–ª–æ—á–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
            ref_table_query = """
            SELECT object_name FROM mcl.postgres_tables WHERE id = %s
            """
            ref_table_result = self._execute_query(ref_table_query, (fk['referenced_table_id'],))
            
            if ref_table_result:
                ref_table_name = ref_table_result[0]['object_name']
                referenced_tables.append(ref_table_name)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
                is_critical = fk['delete_action'] in ['RESTRICT', 'CASCADE']
                if is_critical:
                    critical_dependencies.append({
                        'constraint_name': fk['constraint_name'],
                        'referenced_table': ref_table_name,
                        'delete_action': fk['delete_action'],
                        'update_action': fk['update_action']
                    })
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (—Ç–∞–±–ª–∏—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞ —Ç–µ–∫—É—â—É—é)
        reverse_query = """
        SELECT DISTINCT pt.object_name as dependent_table
        FROM mcl.postgres_foreign_keys pfk
        JOIN mcl.postgres_tables pt ON pfk.table_id = pt.id
        JOIN mcl.postgres_tables pt_ref ON pfk.referenced_table_id = pt_ref.id
        WHERE pt_ref.object_name = %s
        """
        
        dependent_tables = self._execute_query(reverse_query, (table_name,))
        dependent_table_names = [table['dependent_table'] for table in dependent_tables]
        
        result = {
            'table_name': table_name,
            'referenced_tables': list(set(referenced_tables)),
            'dependent_tables': dependent_table_names,
            'critical_dependencies': critical_dependencies,
            'total_dependencies': len(referenced_tables),
            'critical_count': len(critical_dependencies),
            'dependency_level': len(referenced_tables) + len(dependent_table_names)
        }
        
        console.print(f"   üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {result['total_dependencies']}")
        console.print(f"   üîó –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {result['critical_count']}")
        console.print(f"   üìà –£—Ä–æ–≤–µ–Ω—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {result['dependency_level']}")
        
        logger.info(f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è {table_name}: {result}")
        return result
    
    def check_referenced_tables_ready(self, table_name: str) -> Dict:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å—Å—ã–ª–æ—á–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        
        Args:
            table_name (str): –ò–º—è —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
        Returns:
            dict: –°—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å—Å—ã–ª–æ—á–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        """
        console.print(f"[blue]üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å—Å—ã–ª–æ—á–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –¥–ª—è {table_name}[/blue]")
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ç–∞–±–ª–∏—Ü—ã
        dependencies = self.analyze_table_dependencies(table_name)
        referenced_tables = dependencies['referenced_tables']
        
        if not referenced_tables:
            return {
                'table_name': table_name,
                'ready_percentage': 100.0,
                'ready_tables': [],
                'not_ready_tables': [],
                'total_referenced': 0
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–π —Å—Å—ã–ª–æ—á–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        ready_tables = []
        not_ready_tables = []
        
        for ref_table in referenced_tables:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ PostgreSQL
            check_table_query = """
            SELECT EXISTS (
                SELECT 1 FROM information_schema.tables 
                WHERE table_schema = 'ags' AND table_name = %s
            ) as table_exists
            """
            
            table_exists = self._execute_query(check_table_query, (ref_table,))
            
            if table_exists and table_exists[0]['table_exists']:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                status_query = """
                SELECT current_status FROM mcl.migration_status WHERE table_name = %s
                """
                status_result = self._execute_query(status_query, (ref_table,))
                
                if status_result and status_result[0]['current_status'] == 'completed':
                    ready_tables.append(ref_table)
                else:
                    not_ready_tables.append({
                        'table': ref_table,
                        'reason': 'not_completed',
                        'status': status_result[0]['current_status'] if status_result else 'unknown'
                    })
            else:
                not_ready_tables.append({
                    'table': ref_table,
                    'reason': 'not_exists',
                    'status': 'missing'
                })
        
        ready_percentage = (len(ready_tables) / len(referenced_tables) * 100) if referenced_tables else 100.0
        
        result = {
            'table_name': table_name,
            'ready_percentage': ready_percentage,
            'ready_tables': ready_tables,
            'not_ready_tables': not_ready_tables,
            'total_referenced': len(referenced_tables)
        }
        
        console.print(f"   ‚úÖ –ì–æ—Ç–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü: {len(ready_tables)}/{len(referenced_tables)}")
        console.print(f"   üìä –ü—Ä–æ—Ü–µ–Ω—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {ready_percentage:.1f}%")
        
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–ª—è {table_name}: {result}")
        return result
    
    def detect_circular_dependencies(self) -> List[List[str]]:
        """
        –í—ã—è–≤–ª–µ–Ω–∏–µ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        
        Returns:
            list: –°–ø–∏—Å–æ–∫ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        """
        console.print("[blue]üîç –ü–æ–∏—Å–∫ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π[/blue]")
        
        # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        graph = self._build_dependency_graph()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º DFS –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–∏–∫–ª–æ–≤
        visited = set()
        rec_stack = set()
        cycles = []
        
        def dfs(node, path):
            if node in rec_stack:
                # –ù–∞–π–¥–µ–Ω —Ü–∏–∫–ª
                cycle_start = path.index(node)
                cycle = path[cycle_start:] + [node]
                cycles.append(cycle)
                return
            
            if node in visited:
                return
            
            visited.add(node)
            rec_stack.add(node)
            path.append(node)
            
            for neighbor in graph.get(node, []):
                dfs(neighbor, path.copy())
            
            rec_stack.remove(node)
            path.pop()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —É–∑–ª—ã
        for node in graph:
            if node not in visited:
                dfs(node, [])
        
        console.print(f"   üîÑ –ù–∞–π–¥–µ–Ω–æ —Ü–∏–∫–ª–æ–≤: {len(cycles)}")
        for i, cycle in enumerate(cycles, 1):
            console.print(f"   –¶–∏–∫–ª {i}: {' ‚Üí '.join(cycle)}")
        
        logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(cycles)} —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        return cycles
    
    def get_migration_order(self) -> List[str]:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
        
        Returns:
            list: –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –≤ –ø–æ—Ä—è–¥–∫–µ –º–∏–≥—Ä–∞—Ü–∏–∏
        """
        console.print("[blue]üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏[/blue]")
        
        # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        graph = self._build_dependency_graph()
        
        # –¢–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        in_degree = defaultdict(int)
        for node in graph:
            in_degree[node] = 0
        
        for node in graph:
            for neighbor in graph[node]:
                in_degree[neighbor] += 1
        
        # –ê–ª–≥–æ—Ä–∏—Ç–º Kahn
        queue = deque([node for node in in_degree if in_degree[node] == 0])
        result = []
        
        while queue:
            node = queue.popleft()
            result.append(node)
            
            for neighbor in graph.get(node, []):
                in_degree[neighbor] -= 1
                if in_degree[neighbor] == 0:
                    queue.append(neighbor)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        all_tables_query = """
        SELECT object_name FROM mcl.postgres_tables ORDER BY object_name
        """
        all_tables = self._execute_query(all_tables_query)
        all_table_names = [table['object_name'] for table in all_tables]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
        for table in all_table_names:
            if table not in result:
                result.append(table)
        
        console.print(f"   üìã –û–ø—Ä–µ–¥–µ–ª—ë–Ω –ø–æ—Ä—è–¥–æ–∫ –¥–ª—è {len(result)} —Ç–∞–±–ª–∏—Ü")
        console.print(f"   üéØ –ü–µ—Ä–≤—ã–µ 5 —Ç–∞–±–ª–∏—Ü: {result[:5]}")
        
        logger.info(f"–ü–æ—Ä—è–¥–æ–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –¥–ª—è {len(result)} —Ç–∞–±–ª–∏—Ü")
        return result
    
    def _build_dependency_graph(self) -> Dict[str, List[str]]:
        """
        –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        
        Returns:
            dict: –ì—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ adjacency list
        """
        if self._dependency_graph is not None:
            return self._dependency_graph
        
        console.print("[blue]üîß –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π[/blue]")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏
        fk_query = """
        SELECT 
            pt.object_name as source_table,
            pt_ref.object_name as target_table,
            pfk.delete_action,
            pfk.update_action
        FROM mcl.postgres_foreign_keys pfk
        JOIN mcl.postgres_tables pt ON pfk.table_id = pt.id
        JOIN mcl.postgres_tables pt_ref ON pfk.referenced_table_id = pt_ref.id
        """
        
        foreign_keys = self._execute_query(fk_query)
        
        # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ
        graph = defaultdict(list)
        
        for fk in foreign_keys:
            source = fk['source_table']
            target = fk['target_table']
            graph[source].append(target)
        
        self._dependency_graph = dict(graph)
        
        console.print(f"   üìä –ü–æ—Å—Ç—Ä–æ–µ–Ω –≥—Ä–∞—Ñ —Å {len(graph)} —É–∑–ª–∞–º–∏")
        console.print(f"   üîó –ù–∞–π–¥–µ–Ω–æ {len(foreign_keys)} –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        
        logger.info(f"–ì—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø–æ—Å—Ç—Ä–æ–µ–Ω: {len(graph)} —É–∑–ª–æ–≤, {len(foreign_keys)} —Ä—ë–±–µ—Ä")
        return self._dependency_graph
    
    def get_dependency_graph(self) -> Dict[str, List[str]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        
        Returns:
            dict: –ì—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ adjacency list
        """
        return self._build_dependency_graph()
    
    def analyze_dependency_chain(self, table_name: str) -> List[str]:
        """
        –ê–Ω–∞–ª–∏–∑ —Ü–µ–ø–æ—á–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        
        Args:
            table_name (str): –ò–º—è —Ç–∞–±–ª–∏—Ü—ã
        
        Returns:
            list: –¶–µ–ø–æ—á–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        """
        console.print(f"[blue]üîç –ê–Ω–∞–ª–∏–∑ —Ü–µ–ø–æ—á–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è {table_name}[/blue]")
        
        graph = self._build_dependency_graph()
        visited = set()
        chain = []
        
        def dfs(node, path):
            if node in visited:
                return
            
            visited.add(node)
            path.append(node)
            
            for neighbor in graph.get(node, []):
                dfs(neighbor, path)
        
        dfs(table_name, chain)
        
        console.print(f"   üîó –¶–µ–ø–æ—á–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {' ‚Üí '.join(chain)}")
        logger.info(f"–¶–µ–ø–æ—á–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è {table_name}: {chain}")
        return chain
    
    def get_critical_dependencies(self) -> List[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        
        Returns:
            list: –°–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        """
        console.print("[blue]üîç –ü–æ–∏—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π[/blue]")
        
        critical_query = """
        SELECT 
            pt.object_name as source_table,
            pt_ref.object_name as target_table,
            pfk.constraint_name,
            pfk.delete_action,
            pfk.update_action
        FROM mcl.postgres_foreign_keys pfk
        JOIN mcl.postgres_tables pt ON pfk.table_id = pt.id
        JOIN mcl.postgres_tables pt_ref ON pfk.referenced_table_id = pt_ref.id
        WHERE pfk.delete_action IN ('RESTRICT', 'CASCADE')
        """
        
        critical_deps = self._execute_query(critical_query)
        
        console.print(f"   ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {len(critical_deps)}")
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(critical_deps)} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        return critical_deps
    
    def validate_dependency_integrity(self, table_name: str) -> bool:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        
        Args:
            table_name (str): –ò–º—è —Ç–∞–±–ª–∏—Ü—ã
        
        Returns:
            bool: True –µ—Å–ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
        """
        console.print(f"[blue]üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è {table_name}[/blue]")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å—Å—ã–ª–æ—á–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
            readiness = self.check_referenced_tables_ready(table_name)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å—Å—ã–ª–æ—á–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≥–æ—Ç–æ–≤—ã
            is_valid = readiness['ready_percentage'] == 100.0
            
            if is_valid:
                console.print(f"   ‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è {table_name} –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
            else:
                console.print(f"   ‚ùå –ù–µ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è {table_name} –≥–æ—Ç–æ–≤—ã")
                for not_ready in readiness['not_ready_tables']:
                    console.print(f"      - {not_ready['table']}: {not_ready['reason']}")
            
            logger.info(f"–í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è {table_name}: {is_valid}")
            return is_valid
            
        except Exception as e:
            console.print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è {table_name}: {e}")
            return False
    
    def display_dependency_tree(self, table_name: str):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã"""
        console.print(f"[blue]üå≥ –î–µ—Ä–µ–≤–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è {table_name}[/blue]")
        
        tree = Tree(f"[bold green]{table_name}[/bold green]")
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        dependencies = self.analyze_table_dependencies(table_name)
        
        for ref_table in dependencies['referenced_tables']:
            branch = tree.add(f"[yellow]{ref_table}[/yellow]")
            
            # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å—Å—ã–ª–æ—á–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
            ref_deps = self.analyze_table_dependencies(ref_table)
            for sub_ref in ref_deps['referenced_tables']:
                branch.add(f"[dim]{sub_ref}[/dim]")
        
        console.print(tree)
    
    def get_migration_statistics(self) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        
        Returns:
            dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        """
        console.print("[blue]üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π[/blue]")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        all_tables_query = "SELECT object_name FROM mcl.postgres_tables ORDER BY object_name"
        all_tables = self._execute_query(all_tables_query)
        all_table_names = [table['object_name'] for table in all_tables]
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        total_dependencies = 0
        tables_with_deps = 0
        max_dependencies = 0
        dependency_levels = []
        
        for table_name in all_table_names:
            deps = self.analyze_table_dependencies(table_name)
            if deps['total_dependencies'] > 0:
                tables_with_deps += 1
                total_dependencies += deps['total_dependencies']
                max_dependencies = max(max_dependencies, deps['total_dependencies'])
                dependency_levels.append(deps['dependency_level'])
        
        # –ù–∞—Ö–æ–¥–∏–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        cycles = self.detect_circular_dependencies()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        critical = self.get_critical_dependencies()
        
        statistics = {
            'total_tables': len(all_table_names),
            'tables_with_dependencies': tables_with_deps,
            'total_dependencies': total_dependencies,
            'max_dependencies_per_table': max_dependencies,
            'avg_dependencies': total_dependencies / tables_with_deps if tables_with_deps > 0 else 0,
            'circular_dependencies': len(cycles),
            'critical_dependencies': len(critical),
            'avg_dependency_level': sum(dependency_levels) / len(dependency_levels) if dependency_levels else 0
        }
        
        console.print(f"   üìä –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü: {statistics['total_tables']}")
        console.print(f"   üîó –¢–∞–±–ª–∏—Ü —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏: {statistics['tables_with_dependencies']}")
        console.print(f"   üìà –í—Å–µ–≥–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {statistics['total_dependencies']}")
        console.print(f"   üîÑ –¶–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {statistics['circular_dependencies']}")
        console.print(f"   ‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {statistics['critical_dependencies']}")
        
        logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {statistics}")
        return statistics
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if self.connection and not self.connection.closed:
            self.connection.close()

# –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –°–æ–∑–¥–∞—ë–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = DependencyAnalyzer()
    
    try:
        # –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        table_name = "accnt"
        deps = analyzer.analyze_table_dependencies(table_name)
        console.print(f"–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è {table_name}: {deps}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        readiness = analyzer.check_referenced_tables_ready(table_name)
        console.print(f"–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –¥–ª—è {table_name}: {readiness}")
        
        # –ü–æ–∏—Å–∫ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        cycles = analyzer.detect_circular_dependencies()
        console.print(f"–¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {cycles}")
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
        order = analyzer.get_migration_order()
        console.print(f"–ü–æ—Ä—è–¥–æ–∫ –º–∏–≥—Ä–∞—Ü–∏–∏: {order[:10]}...")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = analyzer.get_migration_statistics()
        console.print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
        
    finally:
        analyzer.close()