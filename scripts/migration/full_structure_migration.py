#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–Ω–æ—Å —Ç–∞–±–ª–∏—Ü —Å —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ MS SQL Server –≤ PostgreSQL
"""
import pyodbc
import psycopg2
import yaml
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.progress import Progress, BarColumn, TextColumn, TimeElapsedColumn
from datetime import datetime

console = Console()

def get_mssql_connection():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MS SQL Server"""
    with open('/home/alex/projects/sql/femcl/config/config.yaml', 'r', encoding='utf-8') as file:
        config = yaml.safe_load(file)
    
    mssql_config = config['database']['mssql']
    
    connection_string = (
        f"DRIVER={mssql_config['driver']};"
        f"SERVER={mssql_config['server']};"
        f"DATABASE={mssql_config['database']};"
        f"UID={mssql_config['user']};"
        f"PWD={mssql_config['password']};"
        f"Trusted_Connection={mssql_config.get('trusted_connection', 'no')};"
    )
    
    return pyodbc.connect(connection_string)

def get_postgres_connection():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL"""
    with open('/home/alex/projects/sql/femcl/config/config.yaml', 'r', encoding='utf-8') as file:
        config = yaml.safe_load(file)
    
    postgres_config = config['database']['postgres']
    
    return psycopg2.connect(
        host=postgres_config['host'],
        port=postgres_config['port'],
        dbname=postgres_config['database'],
        user=postgres_config['user'],
        password=postgres_config['password']
    )

def get_table_structure(table_name):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã –∏–∑ MS SQL Server"""
    mssql_conn = get_mssql_connection()
    cursor = mssql_conn.cursor()
    
    try:
        cursor.execute(f"""
            SELECT 
                COLUMN_NAME,
                DATA_TYPE,
                IS_NULLABLE,
                CHARACTER_MAXIMUM_LENGTH,
                NUMERIC_PRECISION,
                NUMERIC_SCALE,
                COLUMN_DEFAULT
            FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_SCHEMA = 'ags' AND TABLE_NAME = '{table_name}'
            ORDER BY ORDINAL_POSITION
        """)
        
        columns = cursor.fetchall()
        return columns
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}[/red]")
        return []
    finally:
        cursor.close()
        mssql_conn.close()

def convert_mssql_to_postgres_type(mssql_type, max_length, precision, scale):
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –∏–∑ MS SQL Server –≤ PostgreSQL"""
    type_mapping = {
        'int': 'INTEGER',
        'bigint': 'BIGINT',
        'smallint': 'SMALLINT',
        'tinyint': 'SMALLINT',
        'bit': 'BOOLEAN',
        'decimal': f'DECIMAL({precision},{scale})' if precision and scale else 'DECIMAL',
        'numeric': f'DECIMAL({precision},{scale})' if precision and scale else 'DECIMAL',
        'money': 'DECIMAL(19,4)',
        'smallmoney': 'DECIMAL(10,4)',
        'float': 'DOUBLE PRECISION',
        'real': 'REAL',
        'datetime': 'TIMESTAMP',
        'datetime2': 'TIMESTAMP',
        'smalldatetime': 'TIMESTAMP',
        'date': 'DATE',
        'time': 'TIME',
        'char': f'CHAR({max_length})' if max_length else 'CHAR(1)',
        'varchar': f'VARCHAR({max_length})' if max_length and max_length > 0 else 'TEXT',
        'nchar': f'CHAR({max_length})' if max_length else 'CHAR(1)',
        'nvarchar': f'VARCHAR({max_length})' if max_length and max_length > 0 else 'TEXT',
        'text': 'TEXT',
        'ntext': 'TEXT',
        'image': 'BYTEA',
        'varbinary': 'BYTEA',
        'uniqueidentifier': 'UUID'
    }
    
    return type_mapping.get(mssql_type.lower(), 'TEXT')

def create_table_structure(table_name, columns):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã –≤ PostgreSQL"""
    postgres_conn = get_postgres_connection()
    cursor = postgres_conn.cursor()
    
    try:
        # –°—Ç—Ä–æ–∏–º DDL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
        ddl_parts = []
        
        for col in columns:
            col_name = col[0]
            mssql_type = col[1]
            is_nullable = col[2] == 'YES'
            max_length = col[3]
            precision = col[4]
            scale = col[5]
            default_value = col[6]
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
            postgres_type = convert_mssql_to_postgres_type(mssql_type, max_length, precision, scale)
            
            # –°—Ç—Ä–æ–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            col_def = f'"{col_name}" {postgres_type}'
            
            if not is_nullable:
                col_def += ' NOT NULL'
            
            if default_value:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if 'getdate()' in str(default_value).lower():
                    col_def += ' DEFAULT CURRENT_TIMESTAMP'
                elif 'newid()' in str(default_value).lower():
                    col_def += ' DEFAULT gen_random_uuid()'
                else:
                    col_def += f' DEFAULT {default_value}'
            
            ddl_parts.append(col_def)
        
        # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É
        target_table = f'ags.{table_name}' if table_name != 'cnInvCmmAgN' else 'ags."cnInvCmmAgN"'
        ddl = f'CREATE TABLE {target_table} (\n    ' + ',\n    '.join(ddl_parts) + '\n);'
        
        console.print(f"üî® –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {target_table}")
        console.print(f"   üìã –ö–æ–ª–æ–Ω–æ–∫: {len(columns)}")
        
        cursor.execute(ddl)
        postgres_conn.commit()
        
        console.print(f"   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ {target_table} —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}[/red]")
        postgres_conn.rollback()
        return False
    finally:
        cursor.close()
        postgres_conn.close()

def migrate_table_data(table_name, columns):
    """–ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã"""
    mssql_conn = get_mssql_connection()
    postgres_conn = get_postgres_connection()
    
    mssql_cursor = mssql_conn.cursor()
    postgres_cursor = postgres_conn.cursor()
    
    try:
        console.print(f"üöÄ –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã: {table_name}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ MS SQL Server
        column_names = [col[0] for col in columns]
        select_columns = ', '.join([f'[{col}]' for col in column_names])
        query = f"SELECT {select_columns} FROM ags.{table_name}"
        
        mssql_cursor.execute(query)
        rows = mssql_cursor.fetchall()
        
        console.print(f"   üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(rows)}")
        
        if len(rows) == 0:
            console.print(f"   ‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ {table_name} –ø—É—Å—Ç–∞")
            return True
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ PostgreSQL
        target_table = f'ags.{table_name}' if table_name != 'cnInvCmmAgN' else 'ags."cnInvCmmAgN"'
        insert_columns = ', '.join([f'"{col}"' for col in column_names])
        placeholders = ', '.join(['%s'] * len(column_names))
        
        insert_query = f"""
            INSERT INTO {target_table} ({insert_columns})
            VALUES ({placeholders})
        """
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç–∞–º–∏
        batch_size = 1000
        total_inserted = 0
        
        for i in range(0, len(rows), batch_size):
            batch = rows[i:i + batch_size]
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è PostgreSQL
            processed_batch = []
            for row in batch:
                processed_row = []
                for j, value in enumerate(row):
                    if value is None:
                        processed_row.append(None)
                    elif isinstance(value, datetime):
                        processed_row.append(value)
                    else:
                        processed_row.append(str(value))
                processed_batch.append(tuple(processed_row))
            
            postgres_cursor.executemany(insert_query, processed_batch)
            total_inserted += len(batch)
            
            if i % (batch_size * 10) == 0:
                console.print(f"      üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_inserted}/{len(rows)} –∑–∞–ø–∏—Å–µ–π")
        
        postgres_conn.commit()
        console.print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: {total_inserted} –∑–∞–ø–∏—Å–µ–π")
        
        return True
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}[/red]")
        postgres_conn.rollback()
        return False
    finally:
        mssql_cursor.close()
        mssql_conn.close()
        postgres_cursor.close()
        postgres_conn.close()

def verify_full_migration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞"""
    console.print(Panel.fit(
        "[bold yellow]üîç –ü–†–û–í–ï–†–ö–ê –ü–û–õ–ù–û–ì–û –ü–ï–†–ï–ù–û–°–ê[/bold yellow]",
        border_style="yellow"
    ))
    
    mssql_conn = get_mssql_connection()
    postgres_conn = get_postgres_connection()
    
    mssql_cursor = mssql_conn.cursor()
    postgres_cursor = postgres_conn.cursor()
    
    try:
        tables = ['accnt', 'cn', 'cnInvCmmAgN']
        
        console.print("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –¥–∞–Ω–Ω—ã—Ö:")
        
        migration_success = True
        
        for table in tables:
            console.print(f"\nüîç –¢–∞–±–ª–∏—Ü–∞: {table}")
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            mssql_cursor.execute(f"SELECT COUNT(*) FROM ags.{table}")
            mssql_count = mssql_cursor.fetchone()[0]
            
            target_table = f'ags.{table}' if table != 'cnInvCmmAgN' else 'ags."cnInvCmmAgN"'
            postgres_cursor.execute(f"SELECT COUNT(*) FROM {target_table}")
            postgres_count = postgres_cursor.fetchone()[0]
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫
            mssql_cursor.execute(f"""
                SELECT COUNT(*) FROM INFORMATION_SCHEMA.COLUMNS 
                WHERE TABLE_SCHEMA = 'ags' AND TABLE_NAME = '{table}'
            """)
            mssql_columns = mssql_cursor.fetchone()[0]
            
            postgres_cursor.execute(f"""
                SELECT COUNT(*) FROM information_schema.columns 
                WHERE table_schema = 'ags' AND table_name = %s
            """, (table,))
            postgres_columns = postgres_cursor.fetchone()[0]
            
            # –°—Ç–∞—Ç—É—Å
            records_ok = mssql_count == postgres_count
            columns_ok = mssql_columns == postgres_columns
            
            status = "‚úÖ" if records_ok and columns_ok else "‚ùå"
            console.print(f"   {status} –ó–∞–ø–∏—Å–µ–π: {mssql_count} ‚Üí {postgres_count}")
            console.print(f"   {status} –ö–æ–ª–æ–Ω–æ–∫: {mssql_columns} ‚Üí {postgres_columns}")
            
            if not (records_ok and columns_ok):
                migration_success = False
        
        return migration_success
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}[/red]")
        return False
    finally:
        mssql_cursor.close()
        mssql_conn.close()
        postgres_cursor.close()
        postgres_conn.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞"""
    console.print(Panel.fit(
        "[bold green]üöÄ –ü–û–õ–ù–´–ô –ü–ï–†–ï–ù–û–° –° –†–ï–ê–õ–¨–ù–û–ô –°–¢–†–£–ö–¢–£–†–û–ô[/bold green]\n"
        "–ò–∑ MS SQL Server –≤ PostgreSQL",
        border_style="green"
    ))
    
    # –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    console.print("\n" + "="*70)
    console.print("[bold blue]–®–ê–ì 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü[/bold blue]")
    console.print("="*70)
    
    tables = ['accnt', 'cn', 'cnInvCmmAgN']
    
    for table in tables:
        console.print(f"\nüîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã: {table}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        columns = get_table_structure(table)
        if not columns:
            console.print(f"[red]‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã {table}[/red]")
            continue
        
        console.print(f"   üìã –ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–æ–Ω–æ–∫: {len(columns)}")
        
        # –°–æ–∑–¥–∞—ë–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        if not create_table_structure(table, columns):
            console.print(f"[red]‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã {table}[/red]")
            continue
    
    # –®–∞–≥ 2: –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö
    console.print("\n" + "="*70)
    console.print("[bold blue]–®–ê–ì 2: –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö[/bold blue]")
    console.print("="*70)
    
    for table in tables:
        columns = get_table_structure(table)
        if not migrate_table_data(table, columns):
            console.print(f"[red]‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã {table}[/red]")
            continue
    
    # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞
    console.print("\n" + "="*70)
    console.print("[bold blue]–®–ê–ì 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞[/bold blue]")
    console.print("="*70)
    
    if not verify_full_migration():
        console.print("[red]‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞[/red]")
        return False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
    console.print("\n" + "="*70)
    console.print("[bold blue]üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢[/bold blue]")
    console.print("="*70)
    
    console.print("[green]‚úÖ –ü–û–õ–ù–´–ô –ü–ï–†–ï–ù–û–° –ó–ê–í–ï–†–®–Å–ù –£–°–ü–ï–®–ù–û![/green]")
    console.print("[green]‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã —Å –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∏ –¥–∞–Ω–Ω—ã–º–∏[/green]")
    console.print("[green]‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø–µ—Ä–µ–Ω–æ—Å—É –≤—Å–µ—Ö 166 —Ç–∞–±–ª–∏—Ü —Å –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π[/green]")
    
    return True

if __name__ == "__main__":
    main()