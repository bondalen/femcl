#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
"""
import os
import sys
import json
import logging
import threading
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from enum import Enum
import yaml
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.progress import Progress, BarColumn, TextColumn, TimeElapsedColumn

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/home/alex/projects/sql/femcl')

from scripts.migration.table_list_manager import TableListManager
from scripts.migration.dependency_analyzer import DependencyAnalyzer
from scripts.migration.monitoring_reporter import MigrationMonitor

console = Console()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/home/alex/projects/sql/femcl/logs/coordinator.log', mode='a'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class MigrationState(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –º–∏–≥—Ä–∞—Ü–∏–∏"""
    INITIALIZING = "INITIALIZING"
    READY = "READY"
    RUNNING = "RUNNING"
    PAUSED = "PAUSED"
    COMPLETED = "COMPLETED"
    ERROR = "ERROR"
    STOPPED = "STOPPED"

class MigrationCoordinator:
    """–ì–ª–∞–≤–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã –º–∏–≥—Ä–∞—Ü–∏–∏"""
    
    def __init__(self, config_path="/home/alex/projects/sql/femcl/config/config.yaml"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞"""
        self.config_path = config_path
        self.config = self._load_config()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        self.state = MigrationState.INITIALIZING
        self.start_time = None
        self.pause_time = None
        self.error_count = 0
        self.last_error = None
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        self.table_manager = None
        self.dependency_analyzer = None
        self.monitor = None
        
        # –ü–æ—Ç–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        self.migration_thread = None
        self.migration_active = False
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.batch_size = self.config.get('migration', {}).get('batch_size', 10)
        self.max_parallel = self.config.get('migration', {}).get('max_parallel', 5)
        self.retry_attempts = self.config.get('migration', {}).get('retry_attempts', 3)
        self.timeout_seconds = self.config.get('migration', {}).get('timeout_seconds', 3600)
        
        logger.info("MigrationCoordinator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            with open(self.config_path, 'r', encoding='utf-8') as file:
                return yaml.safe_load(file)
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            return {
                'migration': {
                    'batch_size': 10,
                    'max_parallel': 5,
                    'retry_attempts': 3,
                    'timeout_seconds': 3600
                },
                'monitoring': {
                    'interval_seconds': 30,
                    'real_time_enabled': True,
                    'dashboard_enabled': True
                },
                'notifications': {
                    'enabled': True,
                    'email_enabled': False,
                    'slack_enabled': False
                }
            }
    
    def initialize_migration_system(self) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–∏–≥—Ä–∞—Ü–∏–∏
        
        Returns:
            bool: True –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        """
        console.print("[blue]üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–∏–≥—Ä–∞—Ü–∏–∏[/blue]")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            console.print("   üìã –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü...")
            self.table_manager = TableListManager(self.config_path)
            
            console.print("   üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
            self.dependency_analyzer = DependencyAnalyzer(self.config_path)
            
            console.print("   üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞...")
            self.monitor = MigrationMonitor(self.config_path)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü
            console.print("   üìù –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü...")
            init_result = self.table_manager.initialize_table_list()
            console.print(f"      –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {init_result['initialized']} —Ç–∞–±–ª–∏—Ü")
            
            # –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            console.print("   üîó –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
            migration_order = self.dependency_analyzer.get_migration_order()
            console.print(f"      –û–ø—Ä–µ–¥–µ–ª—ë–Ω –ø–æ—Ä—è–¥–æ–∫ –¥–ª—è {len(migration_order)} —Ç–∞–±–ª–∏—Ü")
            
            # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            console.print("   üìà –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
            self.monitor.start_monitoring()
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            self.state = MigrationState.READY
            self.start_time = datetime.now()
            
            console.print("[green]‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ[/green]")
            logger.info("–°–∏—Å—Ç–µ–º–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}[/red]")
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
            self.state = MigrationState.ERROR
            self.last_error = str(e)
            return False
    
    def start_migration_process(self) -> bool:
        """
        –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω
        """
        console.print("[blue]üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏[/blue]")
        
        if self.state != MigrationState.READY:
            console.print(f"[yellow]‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ –º–∏–≥—Ä–∞—Ü–∏–∏. –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {self.state.value}[/yellow]")
            return False
        
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            readiness = self.validate_migration_readiness()
            if not readiness['is_ready']:
                console.print(f"[yellow]‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞: {readiness['issues']}[/yellow]")
                return False
            
            # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
            self.state = MigrationState.RUNNING
            self.migration_active = True
            self.start_time = datetime.now()
            
            # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
            self.migration_thread = threading.Thread(target=self._migration_loop, daemon=True)
            self.migration_thread.start()
            
            console.print("[green]‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω[/green]")
            logger.info("–ü—Ä–æ—Ü–µ—Å—Å –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω")
            return True
            
        except Exception as e:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}[/red]")
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            self.state = MigrationState.ERROR
            self.last_error = str(e)
            return False
    
    def _migration_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–∏–≥—Ä–∞—Ü–∏–∏"""
        console.print("[blue]üîÑ –ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ –º–∏–≥—Ä–∞—Ü–∏–∏[/blue]")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –º–∏–≥—Ä–∞—Ü–∏–∏
            plan = self.get_migration_plan()
            tables_to_migrate = plan['tables']
            
            console.print(f"   üìã –ü–ª–∞–Ω –º–∏–≥—Ä–∞—Ü–∏–∏: {len(tables_to_migrate)} —Ç–∞–±–ª–∏—Ü")
            
            # –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü
            for i, table_name in enumerate(tables_to_migrate):
                if not self.migration_active:
                    break
                
                console.print(f"   üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã {i+1}/{len(tables_to_migrate)}: {table_name}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
                readiness = self.dependency_analyzer.check_referenced_tables_ready(table_name)
                if readiness['ready_percentage'] < 100.0:
                    console.print(f"      ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
                    time.sleep(5)
                    continue
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Ç–∞–±–ª–∏—Ü—ã
                success = self._migrate_single_table(table_name)
                if success:
                    console.print(f"      ‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table_name} –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                else:
                    console.print(f"      ‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã {table_name}")
                    self.error_count += 1
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏
            if self.migration_active:
                self.state = MigrationState.COMPLETED
                console.print("[green]üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ![/green]")
                logger.info("–ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            console.print(f"[red]‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}[/red]")
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            self.state = MigrationState.ERROR
            self.last_error = str(e)
    
    def _migrate_single_table(self, table_name: str) -> bool:
        """
        –ú–∏–≥—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        
        Args:
            table_name (str): –ò–º—è —Ç–∞–±–ª–∏—Ü—ã
        
        Returns:
            bool: True –µ—Å–ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        """
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"
            self.table_manager.update_table_status(table_name, 'in_progress')
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
            # –ü–æ–∫–∞ —á—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
            time.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
            
            # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é
            metrics = {
                'duration_seconds': 1.0,
                'records_migrated': 100,
                'structure_elements': 5
            }
            self.table_manager.mark_table_completed(table_name, metrics)
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
            self.table_manager.update_table_status(table_name, 'failed', {'error': str(e)})
            return False
    
    def get_migration_status(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
        
        Returns:
            dict: –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç–∞–±–ª–∏—Ü
            progress = self.table_manager.get_migration_progress()
            
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∞
            metrics = self.monitor.get_real_time_metrics()
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            runtime = None
            if self.start_time:
                runtime = (datetime.now() - self.start_time).total_seconds()
            
            # –í—ã—á–∏—Å–ª—è–µ–º ETA
            eta = None
            if self.state == MigrationState.RUNNING and progress['completed'] > 0:
                remaining = progress['total'] - progress['completed']
                if remaining > 0 and runtime:
                    avg_time_per_table = runtime / progress['completed']
                    eta_seconds = remaining * avg_time_per_table
                    eta = datetime.now() + timedelta(seconds=eta_seconds)
            
            status = {
                'state': self.state.value,
                'progress': progress,
                'metrics': metrics,
                'runtime_seconds': runtime,
                'eta': eta.isoformat() if eta else None,
                'error_count': self.error_count,
                'last_error': self.last_error,
                'start_time': self.start_time.isoformat() if self.start_time else None,
                'pause_time': self.pause_time.isoformat() if self.pause_time else None
            }
            
            return status
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return {
                'state': self.state.value,
                'error': str(e)
            }
    
    def pause_migration(self) -> bool:
        """
        –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
        
        Returns:
            bool: True –µ—Å–ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
        """
        console.print("[yellow]‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏[/yellow]")
        
        if self.state != MigrationState.RUNNING:
            console.print(f"[yellow]‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {self.state.value}[/yellow]")
            return False
        
        try:
            self.state = MigrationState.PAUSED
            self.pause_time = datetime.now()
            self.migration_active = False
            
            console.print("[green]‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞[/green]")
            logger.info("–ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            return True
            
        except Exception as e:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}[/red]")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    def resume_migration(self) -> bool:
        """
        –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏
        
        Returns:
            bool: True –µ—Å–ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞
        """
        console.print("[blue]‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏[/blue]")
        
        if self.state != MigrationState.PAUSED:
            console.print(f"[yellow]‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {self.state.value}[/yellow]")
            return False
        
        try:
            self.state = MigrationState.RUNNING
            self.pause_time = None
            self.migration_active = True
            
            # –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ç–æ–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
            if not self.migration_thread or not self.migration_thread.is_alive():
                self.migration_thread = threading.Thread(target=self._migration_loop, daemon=True)
                self.migration_thread.start()
            
            console.print("[green]‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞[/green]")
            logger.info("–ú–∏–≥—Ä–∞—Ü–∏—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            return True
            
        except Exception as e:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}[/red]")
            logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    def stop_migration(self) -> bool:
        """
        –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
        
        Returns:
            bool: True –µ—Å–ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
        """
        console.print("[red]üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏[/red]")
        
        try:
            self.state = MigrationState.STOPPED
            self.migration_active = False
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            if self.monitor:
                self.monitor.stop_monitoring()
            
            console.print("[green]‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞[/green]")
            logger.info("–ú–∏–≥—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            return True
            
        except Exception as e:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}[/red]")
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    def get_system_health(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
        
        Returns:
            dict: –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        """
        try:
            health = {
                'overall_status': 'HEALTHY',
                'components': {},
                'has_errors': False,
                'errors': []
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            if self.table_manager:
                try:
                    progress = self.table_manager.get_migration_progress()
                    health['components']['table_manager'] = {
                        'status': 'HEALTHY',
                        'progress': progress['percentage']
                    }
                except Exception as e:
                    health['components']['table_manager'] = {
                        'status': 'ERROR',
                        'error': str(e)
                    }
                    health['has_errors'] = True
                    health['errors'].append(f"Table Manager: {e}")
            
            if self.dependency_analyzer:
                try:
                    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
                    health['components']['dependency_analyzer'] = {
                        'status': 'HEALTHY'
                    }
                except Exception as e:
                    health['components']['dependency_analyzer'] = {
                        'status': 'ERROR',
                        'error': str(e)
                    }
                    health['has_errors'] = True
                    health['errors'].append(f"Dependency Analyzer: {e}")
            
            if self.monitor:
                try:
                    metrics = self.monitor.get_real_time_metrics()
                    health['components']['monitor'] = {
                        'status': 'HEALTHY',
                        'metrics_count': len(metrics.get('metrics', {}))
                    }
                except Exception as e:
                    health['components']['monitor'] = {
                        'status': 'ERROR',
                        'error': str(e)
                    }
                    health['has_errors'] = True
                    health['errors'].append(f"Monitor: {e}")
            
            # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
            if health['has_errors']:
                health['overall_status'] = 'DEGRADED'
            
            return health
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã: {e}")
            return {
                'overall_status': 'ERROR',
                'error': str(e)
            }
    
    def handle_error(self, error_info: Dict[str, Any]) -> bool:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–∏—Å—Ç–µ–º—ã
        
        Args:
            error_info (dict): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
        
        Returns:
            bool: True –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
        """
        console.print(f"[red]üö® –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏: {error_info.get('type', 'UNKNOWN')}[/red]")
        
        try:
            error_type = error_info.get('type', 'UNKNOWN')
            error_message = error_info.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            logger.error(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ {error_type}: {error_message}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if self.monitor:
                self.monitor.send_notification(
                    event_type=error_type,
                    message=error_message,
                    severity='ERROR'
                )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if error_type == 'CRITICAL':
                self.state = MigrationState.ERROR
                self.migration_active = False
            elif error_type == 'TEMPORARY':
                # –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                time.sleep(5)
            elif error_type == 'DEPENDENCY':
                # –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
                time.sleep(10)
            
            console.print(f"[green]‚úÖ –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {error_type}[/green]")
            return True
            
        except Exception as e:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏: {e}[/red]")
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏: {e}")
            return False
    
    def get_migration_plan(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
        
        Returns:
            dict: –î–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –º–∏–≥—Ä–∞—Ü–∏–∏
        """
        try:
            if not self.dependency_analyzer:
                return {'tables': [], 'error': 'Dependency analyzer not initialized'}
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
            migration_order = self.dependency_analyzer.get_migration_order()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö
            dependency_graph = self.dependency_analyzer.get_dependency_graph()
            
            # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            critical_deps = self.dependency_analyzer.get_critical_dependencies()
            
            plan = {
                'tables': migration_order,
                'total_tables': len(migration_order),
                'dependency_graph': dependency_graph,
                'critical_dependencies': len(critical_deps),
                'estimated_duration_hours': len(migration_order) * 0.1,  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
                'created_at': datetime.now().isoformat()
            }
            
            return plan
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            return {'tables': [], 'error': str(e)}
    
    def validate_migration_readiness(self) -> Dict[str, Any]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –º–∏–≥—Ä–∞—Ü–∏–∏
        
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        console.print("[blue]üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –º–∏–≥—Ä–∞—Ü–∏–∏[/blue]")
        
        try:
            issues = []
            readiness_percentage = 100.0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            if not self.table_manager:
                issues.append("Table manager not initialized")
                readiness_percentage -= 25
            
            if not self.dependency_analyzer:
                issues.append("Dependency analyzer not initialized")
                readiness_percentage -= 25
            
            if not self.monitor:
                issues.append("Monitor not initialized")
                readiness_percentage -= 25
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
            if self.state == MigrationState.ERROR:
                issues.append("System in error state")
                readiness_percentage -= 50
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            if self.dependency_analyzer:
                try:
                    cycles = self.dependency_analyzer.detect_circular_dependencies()
                    if cycles:
                        issues.append(f"Circular dependencies detected: {len(cycles)}")
                        readiness_percentage -= 10
                except Exception as e:
                    issues.append(f"Dependency analysis error: {e}")
                    readiness_percentage -= 15
            
            is_ready = readiness_percentage >= 80.0 and len(issues) == 0
            
            result = {
                'is_ready': is_ready,
                'readiness_percentage': readiness_percentage,
                'issues': issues,
                'validated_at': datetime.now().isoformat()
            }
            
            console.print(f"   üìä –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {readiness_percentage:.1f}%")
            if issues:
                console.print(f"   ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã: {len(issues)}")
                for issue in issues:
                    console.print(f"      - {issue}")
            else:
                console.print("   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –º–∏–≥—Ä–∞—Ü–∏–∏")
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {e}")
            return {
                'is_ready': False,
                'readiness_percentage': 0.0,
                'issues': [f"Validation error: {e}"],
                'validated_at': datetime.now().isoformat()
            }
    
    def display_status_dashboard(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞ —Å—Ç–∞—Ç—É—Å–∞"""
        console.print("[blue]üìä –î–∞—à–±–æ—Ä–¥ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏[/blue]")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
            status = self.get_migration_status()
            
            # –°–æ–∑–¥–∞—ë–º –ø–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞
            status_panel = Panel(
                f"[bold]–°–æ—Å—Ç–æ—è–Ω–∏–µ:[/bold] {status['state']}\n"
                f"[bold]–ü—Ä–æ–≥—Ä–µ—Å—Å:[/bold] {status['progress']['percentage']:.1f}%\n"
                f"[bold]–ó–∞–≤–µ—Ä—à–µ–Ω–æ:[/bold] {status['progress']['completed']}/{status['progress']['total']}\n"
                f"[bold]–û—à–∏–±–æ–∫:[/bold] {status['error_count']}\n"
                f"[bold]–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:[/bold] {status['runtime_seconds']:.1f} —Å–µ–∫" if status['runtime_seconds'] else "–ù–µ –∑–∞–ø—É—â–µ–Ω–æ",
                title="–°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏",
                border_style="blue"
            )
            
            console.print(status_panel)
            
            # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            if 'status_breakdown' in status['progress']:
                table = Table(title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º")
                table.add_column("–°—Ç–∞—Ç—É—Å", style="cyan")
                table.add_column("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", style="magenta")
                table.add_column("–ü—Ä–æ—Ü–µ–Ω—Ç", style="green")
                
                total = status['progress']['total']
                for status_name, count in status['progress']['status_breakdown'].items():
                    percentage = (count / total * 100) if total > 0 else 0
                    table.add_row(status_name, str(count), f"{percentage:.1f}%")
                
                console.print(table)
            
        except Exception as e:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞: {e}[/red]")
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞: {e}")
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞"""
        console.print("[blue]üîí –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞[/blue]")
        
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
            if self.migration_active:
                self.stop_migration()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            if self.table_manager:
                self.table_manager.close()
            
            if self.dependency_analyzer:
                self.dependency_analyzer.close()
            
            if self.monitor:
                self.monitor.close()
            
            console.print("[green]‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –∑–∞–∫—Ä—ã—Ç[/green]")
            logger.info("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –∑–∞–∫—Ä—ã—Ç")
            
        except Exception as e:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞: {e}[/red]")
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞: {e}")

# –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –°–æ–∑–¥–∞—ë–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä
    coordinator = MigrationCoordinator()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
        if coordinator.initialize_migration_system():
            console.print("–°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            readiness = coordinator.validate_migration_readiness()
            console.print(f"–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {readiness['readiness_percentage']:.1f}%")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–Ω–∞
            plan = coordinator.get_migration_plan()
            console.print(f"–ü–ª–∞–Ω –≤–∫–ª—é—á–∞–µ—Ç {len(plan['tables'])} —Ç–∞–±–ª–∏—Ü")
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            coordinator.display_status_dashboard()
        
    finally:
        coordinator.close()