#!/usr/bin/env python3
"""
–ü–µ—Ä–µ–Ω–æ—Å —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ MS SQL Server –≤ PostgreSQL (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
"""
import pyodbc
import psycopg2
import yaml
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.progress import Progress, BarColumn, TextColumn, TimeElapsedColumn
import pandas as pd
from datetime import datetime

console = Console()

def get_mssql_connection():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MS SQL Server"""
    with open('/home/alex/projects/sql/femcl/config/config.yaml', 'r', encoding='utf-8') as file:
        config = yaml.safe_load(file)
    
    mssql_config = config['database']['mssql']
    
    connection_string = (
        f"DRIVER={mssql_config['driver']};"
        f"SERVER={mssql_config['server']};"
        f"DATABASE={mssql_config['database']};"
        f"UID={mssql_config['user']};"
        f"PWD={mssql_config['password']};"
        f"Trusted_Connection={mssql_config.get('trusted_connection', 'no')};"
    )
    
    return pyodbc.connect(connection_string)

def get_postgres_connection():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL"""
    with open('/home/alex/projects/sql/femcl/config/config.yaml', 'r', encoding='utf-8') as file:
        config = yaml.safe_load(file)
    
    postgres_config = config['database']['postgres']
    
    return psycopg2.connect(
        host=postgres_config['host'],
        port=postgres_config['port'],
        dbname=postgres_config['database'],
        user=postgres_config['user'],
        password=postgres_config['password']
    )

def analyze_source_tables():
    """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –≤ MS SQL Server"""
    console.print(Panel.fit(
        "[bold blue]üîç –ê–ù–ê–õ–ò–ó –ò–°–•–û–î–ù–´–• –¢–ê–ë–õ–ò–¶ –í MS SQL SERVER[/bold blue]",
        border_style="blue"
    ))
    
    mssql_conn = get_mssql_connection()
    cursor = mssql_conn.cursor()
    
    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∏ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ —Å—Ö–µ–º—ã ags
        tables = ['accnt', 'cn', 'cnInvCmmAgN']
        
        for table in tables:
            console.print(f"\nüîç –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã: ags.{table}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–Ω–∫–∞—Ö
            cursor.execute(f"""
                SELECT 
                    COLUMN_NAME,
                    DATA_TYPE,
                    IS_NULLABLE,
                    CHARACTER_MAXIMUM_LENGTH,
                    NUMERIC_PRECISION,
                    NUMERIC_SCALE
                FROM INFORMATION_SCHEMA.COLUMNS 
                WHERE TABLE_SCHEMA = 'ags' AND TABLE_NAME = '{table}'
                ORDER BY ORDINAL_POSITION
            """)
            
            columns = cursor.fetchall()
            console.print(f"   üìã –ö–æ–ª–æ–Ω–æ–∫: {len(columns)}")
            
            for col in columns:
                col_info = f"      - {col[0]}: {col[1]}"
                if col[2] == 'NO':
                    col_info += " NOT NULL"
                if col[3]:
                    col_info += f"({col[3]})"
                elif col[4]:
                    col_info += f"({col[4]},{col[5]})"
                console.print(col_info)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            cursor.execute(f"SELECT COUNT(*) FROM ags.{table}")
            count = cursor.fetchone()[0]
            console.print(f"   üìä –ó–∞–ø–∏—Å–µ–π: {count}")
            
            if count > 0:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –∑–∞–ø–∏—Å–∏
                cursor.execute(f"SELECT TOP 3 * FROM ags.{table}")
                rows = cursor.fetchall()
                console.print(f"   üìù –ü–µ—Ä–≤—ã–µ –∑–∞–ø–∏—Å–∏:")
                for i, row in enumerate(rows, 1):
                    console.print(f"      {i}. {row}")
        
        return True
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü: {e}[/red]")
        return False
    finally:
        cursor.close()
        mssql_conn.close()

def migrate_table_data(table_name, source_columns, target_columns):
    """–ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
    console.print(f"\nüöÄ –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã: {table_name}")
    
    mssql_conn = get_mssql_connection()
    postgres_conn = get_postgres_connection()
    
    mssql_cursor = mssql_conn.cursor()
    postgres_cursor = postgres_conn.cursor()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ MS SQL Server
        console.print(f"   üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ MS SQL Server...")
        
        # –°—Ç—Ä–æ–∏–º SELECT –∑–∞–ø—Ä–æ—Å
        select_columns = ', '.join(source_columns)
        query = f"SELECT {select_columns} FROM ags.{table_name}"
        
        mssql_cursor.execute(query)
        rows = mssql_cursor.fetchall()
        
        console.print(f"   üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(rows)}")
        
        if len(rows) == 0:
            console.print(f"   ‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ {table_name} –ø—É—Å—Ç–∞")
            return True
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ PostgreSQL
        console.print(f"   üì§ –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL...")
        
        # –°—Ç—Ä–æ–∏–º INSERT –∑–∞–ø—Ä–æ—Å
        target_table = f'ags.{table_name}' if table_name != 'cnInvCmmAgN' else 'ags."cnInvCmmAgN"'
        insert_columns = ', '.join(target_columns)
        placeholders = ', '.join(['%s'] * len(target_columns))
        
        insert_query = f"""
            INSERT INTO {target_table} ({insert_columns})
            VALUES ({placeholders})
            ON CONFLICT DO NOTHING
        """
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç–∞–º–∏
        batch_size = 1000
        total_inserted = 0
        
        for i in range(0, len(rows), batch_size):
            batch = rows[i:i + batch_size]
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è PostgreSQL
            processed_batch = []
            for row in batch:
                processed_row = []
                for j, value in enumerate(row):
                    if value is None:
                        processed_row.append(None)
                    elif isinstance(value, datetime):
                        processed_row.append(value)
                    else:
                        processed_row.append(str(value))
                processed_batch.append(tuple(processed_row))
            
            postgres_cursor.executemany(insert_query, processed_batch)
            total_inserted += len(batch)
            
            if i % (batch_size * 10) == 0:
                console.print(f"      üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_inserted}/{len(rows)} –∑–∞–ø–∏—Å–µ–π")
        
        postgres_conn.commit()
        console.print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: {total_inserted} –∑–∞–ø–∏—Å–µ–π")
        
        return True
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}[/red]")
        postgres_conn.rollback()
        return False
    finally:
        mssql_cursor.close()
        mssql_conn.close()
        postgres_cursor.close()
        postgres_conn.close()

def verify_migration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞"""
    console.print(Panel.fit(
        "[bold yellow]üîç –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ù–û–°–ê –î–ê–ù–ù–´–•[/bold yellow]",
        border_style="yellow"
    ))
    
    mssql_conn = get_mssql_connection()
    postgres_conn = get_postgres_connection()
    
    mssql_cursor = mssql_conn.cursor()
    postgres_cursor = postgres_conn.cursor()
    
    try:
        tables = ['accnt', 'cn', 'cnInvCmmAgN']
        
        console.print("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π:")
        
        migration_success = True
        
        for table in tables:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ MS SQL Server
            mssql_cursor.execute(f"SELECT COUNT(*) FROM ags.{table}")
            mssql_count = mssql_cursor.fetchone()[0]
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ PostgreSQL
            target_table = f'ags.{table}' if table != 'cnInvCmmAgN' else 'ags."cnInvCmmAgN"'
            postgres_cursor.execute(f"SELECT COUNT(*) FROM {target_table}")
            postgres_count = postgres_cursor.fetchone()[0]
            
            status = "‚úÖ" if mssql_count == postgres_count else "‚ùå"
            console.print(f"   {status} {table}: {mssql_count} ‚Üí {postgres_count}")
            
            if mssql_count != postgres_count:
                migration_success = False
        
        return migration_success
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}[/red]")
        return False
    finally:
        mssql_cursor.close()
        mssql_conn.close()
        postgres_cursor.close()
        postgres_conn.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö"""
    console.print(Panel.fit(
        "[bold green]üöÄ –ü–ï–†–ï–ù–û–° –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•[/bold green]\n"
        "–ò–∑ MS SQL Server –≤ PostgreSQL",
        border_style="green"
    ))
    
    # –®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
    console.print("\n" + "="*70)
    console.print("[bold blue]–®–ê–ì 1: –ê–Ω–∞–ª–∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –≤ MS SQL Server[/bold blue]")
    console.print("="*70)
    
    if not analyze_source_tables():
        console.print("[red]‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã[/red]")
        return False
    
    # –®–∞–≥ 2: –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö
    console.print("\n" + "="*70)
    console.print("[bold blue]–®–ê–ì 2: –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö[/bold blue]")
    console.print("="*70)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
    table_mappings = {
        'accnt': {
            'source': ['account_key', 'account_num', 'account_name'],
            'target': ['id', 'name', 'created_at']
        },
        'cn': {
            'source': ['cn_key', 'cn_number', 'cn_date', 'cn_note', 'cnMark', 'cnTimeOfEntry', 'cnName'],
            'target': ['id', 'number', 'created_at']
        },
        'cnInvCmmAgN': {
            'source': ['id', 'value', 'category', 'quantity', 'created_at'],
            'target': ['id', 'value', 'created_at']
        }
    }
    
    migration_success = True
    
    for table, mapping in table_mappings.items():
        if not migrate_table_data(table, mapping['source'], mapping['target']):
            migration_success = False
            break
    
    if not migration_success:
        console.print("[red]‚ùå –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏[/red]")
        return False
    
    # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞
    console.print("\n" + "="*70)
    console.print("[bold blue]–®–ê–ì 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞[/bold blue]")
    console.print("="*70)
    
    if not verify_migration():
        console.print("[red]‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞[/red]")
        return False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
    console.print("\n" + "="*70)
    console.print("[bold blue]üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢[/bold blue]")
    console.print("="*70)
    
    console.print("[green]‚úÖ –ü–ï–†–ï–ù–û–° –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• –ó–ê–í–ï–†–®–Å–ù –£–°–ü–ï–®–ù–û![/green]")
    console.print("[green]‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ MS SQL Server –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ PostgreSQL[/green]")
    console.print("[green]‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø–µ—Ä–µ–Ω–æ—Å—É –≤—Å–µ—Ö 166 —Ç–∞–±–ª–∏—Ü —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏[/green]")
    
    return True

if __name__ == "__main__":
    main()