#!/usr/bin/env python3
"""
FEMCL - –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
"""

import os
import sys
import psycopg2
from dotenv import load_dotenv
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn, TaskProgressColumn
import time

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

console = Console()

def start_migration():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    try:
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        host = os.getenv('POSTGRES_HOST', 'localhost')
        port = os.getenv('POSTGRES_PORT', '5432')
        database = os.getenv('POSTGRES_DB', 'Fish_Eye')
        user = os.getenv('POSTGRES_USER', 'alex')
        password = os.getenv('POSTGRES_PASSWORD', '')
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = psycopg2.connect(
            host=host,
            port=port,
            database=database,
            user=user,
            password=password
        )
        
        console.print(Panel.fit("[bold blue]FEMCL - –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏[/bold blue]", border_style="blue"))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –º–∏–≥—Ä–∞—Ü–∏–∏
        with conn.cursor() as cur:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á –º–∏–≥—Ä–∞—Ü–∏–∏
            cur.execute("SELECT COUNT(*) FROM mcl.migration_tasks;")
            tasks_count = cur.fetchone()[0]
            
            if tasks_count == 0:
                console.print("[red]‚ùå –ù–µ—Ç –∑–∞–¥–∞—á –º–∏–≥—Ä–∞—Ü–∏–∏! –°–æ–∑–¥–∞–π—Ç–µ –∑–∞–¥–∞—á—É –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.[/red]")
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ MS SQL —Ç–∞–±–ª–∏—Ü
            cur.execute("SELECT COUNT(*) FROM mcl.mssql_tables;")
            mssql_count = cur.fetchone()[0]
            
            if mssql_count == 0:
                console.print("[red]‚ùå –ù–µ—Ç MS SQL —Ç–∞–±–ª–∏—Ü –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏![/red]")
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–ª–µ–º
            cur.execute("SELECT COUNT(*) FROM mcl.problems WHERE severity_level = 'high';")
            high_problems = cur.fetchone()[0]
            
            if high_problems > 0:
                console.print(f"[yellow]‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {high_problems} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–µ—à–∏—Ç—å –∏—Ö –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏–µ–π.[/yellow]")
                
                # –ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
                cur.execute("""
                    SELECT problem_name, problem_category 
                    FROM mcl.problems 
                    WHERE severity_level = 'high' 
                    ORDER BY problem_name;
                """)
                problems = cur.fetchall()
                
                table = Table(title="–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
                table.add_column("–ü—Ä–æ–±–ª–µ–º–∞", style="red")
                table.add_column("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", style="yellow")
                
                for name, category in problems:
                    table.add_row(name, category)
                
                console.print(table)
                
                # –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã? (y/N): ")
                if response.lower() != 'y':
                    console.print("[yellow]–ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.[/yellow]")
                    return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
        with conn.cursor() as cur:
            cur.execute("""
                SELECT object_name, schema_name, table_size, row_count 
                FROM mcl.mssql_tables 
                WHERE migration_status = 'pending' 
                ORDER BY table_size DESC, row_count DESC;
            """)
            tables_to_migrate = cur.fetchall()
        
        console.print(f"[blue]–ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏:[/blue] {len(tables_to_migrate)}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø-10 —Ç–∞–±–ª–∏—Ü –ø–æ —Ä–∞–∑–º–µ—Ä—É
        if tables_to_migrate:
            table = Table(title="–¢–æ–ø-10 —Ç–∞–±–ª–∏—Ü –ø–æ —Ä–∞–∑–º–µ—Ä—É")
            table.add_column("–¢–∞–±–ª–∏—Ü–∞", style="cyan")
            table.add_column("–°—Ö–µ–º–∞", style="blue")
            table.add_column("–†–∞–∑–º–µ—Ä (MB)", style="green")
            table.add_column("–°—Ç—Ä–æ–∫", style="yellow")
            
            for name, schema, size, rows in tables_to_migrate[:10]:
                size_mb = size / (1024 * 1024) if size else 0
                table.add_row(name, schema, f"{size_mb:.2f}", str(rows))
            
            console.print(table)
        
        # –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        response = input(f"–ù–∞—á–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é {len(tables_to_migrate)} —Ç–∞–±–ª–∏—Ü? (y/N): ")
        if response.lower() != 'y':
            console.print("[yellow]–ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.[/yellow]")
            return
        
        # –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
        console.print("[green]üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏...[/green]")
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            BarColumn(),
            TaskProgressColumn(),
        ) as progress:
            
            task = progress.add_task("–ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü...", total=len(tables_to_migrate))
            
            migrated_count = 0
            failed_count = 0
            
            for table_name, schema_name, table_size, row_count in tables_to_migrate:
                try:
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ "in_progress"
                    with conn.cursor() as cur:
                        cur.execute("""
                            UPDATE mcl.mssql_tables 
                            SET migration_status = 'in_progress', 
                                migration_date = NOW() 
                            WHERE object_name = %s AND schema_name = %s;
                        """, (table_name, schema_name))
                        conn.commit()
                    
                    # –°–∏–º—É–ª—è—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ (–∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É)
                    time.sleep(0.1)  # –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ "completed"
                    with conn.cursor() as cur:
                        cur.execute("""
                            UPDATE mcl.mssql_tables 
                            SET migration_status = 'completed' 
                            WHERE object_name = %s AND schema_name = %s;
                        """, (table_name, schema_name))
                        conn.commit()
                    
                    migrated_count += 1
                    progress.update(task, advance=1, description=f"–ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞: {table_name}")
                    
                except Exception as e:
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ "failed"
                    with conn.cursor() as cur:
                        cur.execute("""
                            UPDATE mcl.mssql_tables 
                            SET migration_status = 'failed', 
                                error_message = %s 
                            WHERE object_name = %s AND schema_name = %s;
                        """, (str(e), table_name, schema_name))
                        conn.commit()
                    
                    failed_count += 1
                    progress.update(task, advance=1, description=f"–û—à–∏–±–∫–∞: {table_name}")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        console.print(Panel.fit("[bold green]–ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞![/bold green]", border_style="green"))
        console.print(f"[green]‚úÖ –£—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ:[/green] {migrated_count}")
        console.print(f"[red]‚ùå –û—à–∏–±–æ–∫:[/red] {failed_count}")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        with conn.cursor() as cur:
            cur.execute("""
                SELECT migration_status, count(*) 
                FROM mcl.mssql_tables 
                GROUP BY migration_status 
                ORDER BY migration_status;
            """)
            final_status = cur.fetchall()
            
            table = Table(title="–ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏")
            table.add_column("–°—Ç–∞—Ç—É—Å", style="cyan")
            table.add_column("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", style="green")
            
            for status, count in final_status:
                table.add_row(status, str(count))
            
            console.print(table)
        
        conn.close()
        
    except psycopg2.Error as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:[/red] {e}")
        sys.exit(1)
    except Exception as e:
        console.print(f"[red]‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:[/red] {e}")
        sys.exit(1)

if __name__ == "__main__":
    start_migration()