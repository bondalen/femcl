#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º —Ç–∞–±–ª–∏—Ü –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏

–û–ë–ù–û–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç ConnectionManager
"""
import os
import sys
import json
import logging
from datetime import datetime
from typing import Dict, List, Optional, Any
from pathlib import Path
from rich.console import Console
from rich.table import Table
from rich.progress import Progress, TaskID

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, str(Path(__file__).parent.parent.parent / "src" / "code"))

from infrastructure.classes import ConnectionManager

console = Console()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/home/alex/projects/sql/femcl/logs/migration_status.log', mode='a'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class TableListManager:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º —Ç–∞–±–ª–∏—Ü –º–∏–≥—Ä–∞—Ü–∏–∏.
    
    –û–ë–ù–û–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç ConnectionManager –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î.
    """
    
    def __init__(self, connection_manager: ConnectionManager):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞.
        
        Args:
            connection_manager: –≠–∫–∑–µ–º–ø–ª—è—Ä ConnectionManager
        """
        self.conn_mgr = connection_manager
        self.task_id = connection_manager.task_id
        self._ensure_migration_table()
    
    def _execute_query(self, query, params=None):
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞.
        
        Args:
            query: SQL –∑–∞–ø—Ä–æ—Å
            params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        
        Returns:
            List[Dict]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–∫ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        """
        conn = self.conn_mgr.get_postgres_connection()
        cursor = conn.cursor()
        cursor.execute(query, params)
        
        if cursor.description:
            columns = [desc[0] for desc in cursor.description]
            rows = cursor.fetchall()
            result = [dict(zip(columns, row)) for row in rows]
        else:
            conn.commit()
            result = []
        
        cursor.close()
        return result
    
    def _ensure_migration_table(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        create_table_query = """
        CREATE TABLE IF NOT EXISTS mcl.migration_status (
            id SERIAL PRIMARY KEY,
            table_name VARCHAR(255) NOT NULL UNIQUE,
            current_status VARCHAR(50) NOT NULL DEFAULT 'pending',
            previous_status VARCHAR(50),
            start_time TIMESTAMP,
            end_time TIMESTAMP,
            attempt_count INTEGER DEFAULT 0,
            last_error TEXT,
            error_details JSONB,
            metrics JSONB,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        """
        
        create_indexes_query = """
        CREATE INDEX IF NOT EXISTS idx_migration_status_table_name 
        ON mcl.migration_status(table_name);
        
        CREATE INDEX IF NOT EXISTS idx_migration_status_current_status 
        ON mcl.migration_status(current_status);
        
        CREATE INDEX IF NOT EXISTS idx_migration_status_updated_at 
        ON mcl.migration_status(updated_at);
        """
        
        try:
            self._execute_query(create_table_query)
            self._execute_query(create_indexes_query)
            logger.info("–¢–∞–±–ª–∏—Ü–∞ migration_status —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã migration_status: {e}")
            raise
    
    def initialize_table_list(self) -> Dict[str, Any]:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
        
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–∞–±–ª–∏—Ü–∞—Ö –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö
        """
        console.print("[blue]üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏[/blue]")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        query = """
        SELECT DISTINCT mt.object_name as table_name
        FROM mcl.mssql_tables mt
        JOIN mcl.postgres_tables pt ON mt.id = pt.source_table_id
        ORDER BY mt.object_name
        """
        
        tables = self._execute_query(query)
        table_names = [table['table_name'] for table in tables]
        
        console.print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(table_names)} —Ç–∞–±–ª–∏—Ü –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        initialized_count = 0
        for table_name in table_names:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å
            check_query = "SELECT id FROM mcl.migration_status WHERE table_name = %s"
            existing = self._execute_query(check_query, (table_name,))
            
            if not existing:
                # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                insert_query = """
                INSERT INTO mcl.migration_status (table_name, current_status, start_time)
                VALUES (%s, %s, %s)
                """
                self._execute_query(insert_query, (table_name, 'pending', datetime.now()))
                initialized_count += 1
        
        result = {
            'total_tables': len(table_names),
            'initialized': initialized_count,
            'already_exists': len(table_names) - initialized_count,
            'tables': table_names
        }
        
        console.print(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {initialized_count} –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü")
        console.print(f"‚ÑπÔ∏è {len(table_names) - initialized_count} —Ç–∞–±–ª–∏—Ü —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∏")
        
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result}")
        return result
    
    def get_incomplete_tables(self) -> List[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        
        Returns:
            list: –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
        """
        query = """
        SELECT table_name 
        FROM mcl.migration_status 
        WHERE current_status NOT IN ('completed', 'blocked')
        ORDER BY table_name
        """
        
        tables = self._execute_query(query)
        incomplete_tables = [table['table_name'] for table in tables]
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(incomplete_tables)} –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü")
        return incomplete_tables
    
    def update_table_status(self, table_name: str, status: str, details: Optional[Dict] = None) -> bool:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–∞–±–ª–∏—Ü—ã
        
        Args:
            table_name (str): –ò–º—è —Ç–∞–±–ª–∏—Ü—ã
            status (str): –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
            details (dict): –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
        
        Returns:
            bool: True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
            current_query = "SELECT current_status FROM mcl.migration_status WHERE table_name = %s"
            current_result = self._execute_query(current_query, (table_name,))
            
            if not current_result:
                logger.warning(f"–¢–∞–±–ª–∏—Ü–∞ {table_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –º–∏–≥—Ä–∞—Ü–∏–∏")
                return False
            
            previous_status = current_result[0]['current_status']
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            update_query = """
            UPDATE mcl.migration_status 
            SET current_status = %s, 
                previous_status = %s, 
                updated_at = CURRENT_TIMESTAMP,
                error_details = %s
            WHERE table_name = %s
            """
            
            error_details = json.dumps(details) if details else None
            self._execute_query(update_query, (status, previous_status, error_details, table_name))
            
            logger.info(f"–°—Ç–∞—Ç—É—Å —Ç–∞–±–ª–∏—Ü—ã {table_name} –∏–∑–º–µ–Ω—ë–Ω: {previous_status} -> {status}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
            return False
    
    def mark_table_completed(self, table_name: str, metrics: Optional[Dict] = None) -> bool:
        """
        –û—Ç–º–µ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π
        
        Args:
            table_name (str): –ò–º—è —Ç–∞–±–ª–∏—Ü—ã
            metrics (dict): –ú–µ—Ç—Ä–∏–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
        
        Returns:
            bool: True –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        """
        try:
            update_query = """
            UPDATE mcl.migration_status 
            SET current_status = 'completed',
                end_time = CURRENT_TIMESTAMP,
                metrics = %s,
                updated_at = CURRENT_TIMESTAMP
            WHERE table_name = %s
            """
            
            metrics_json = json.dumps(metrics) if metrics else None
            self._execute_query(update_query, (metrics_json, table_name))
            
            console.print(f"[green]‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table_name} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–∞—è[/green]")
            logger.info(f"–¢–∞–±–ª–∏—Ü–∞ {table_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã {table_name} –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π: {e}")
            return False
    
    def get_migration_progress(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏
        
        Returns:
            dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
        """
        query = """
        SELECT 
            current_status,
            COUNT(*) as count
        FROM mcl.migration_status 
        GROUP BY current_status
        ORDER BY current_status
        """
        
        status_counts = self._execute_query(query)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total = sum(status['count'] for status in status_counts)
        completed = sum(status['count'] for status in status_counts 
                       if status['current_status'] == 'completed')
        
        progress = {
            'total': total,
            'completed': completed,
            'percentage': (completed / total * 100) if total > 0 else 0,
            'status_breakdown': {status['current_status']: status['count'] 
                               for status in status_counts}
        }
        
        return progress
    
    def get_table_status(self, table_name: str) -> Optional[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Ç–∞–±–ª–∏—Ü—ã
        
        Args:
            table_name (str): –ò–º—è —Ç–∞–±–ª–∏—Ü—ã
        
        Returns:
            str: –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ç–∞–±–ª–∏—Ü—ã –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        """
        query = "SELECT current_status FROM mcl.migration_status WHERE table_name = %s"
        result = self._execute_query(query, (table_name,))
        
        return result[0]['current_status'] if result else None
    
    def get_failed_tables(self) -> List[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü —Å –æ—à–∏–±–∫–∞–º–∏
        
        Returns:
            list: –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'failed'
        """
        query = "SELECT table_name FROM mcl.migration_status WHERE current_status = 'failed'"
        tables = self._execute_query(query)
        return [table['table_name'] for table in tables]
    
    def get_blocked_tables(self) -> List[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        
        Returns:
            list: –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'blocked'
        """
        query = "SELECT table_name FROM mcl.migration_status WHERE current_status = 'blocked'"
        tables = self._execute_query(query)
        return [table['table_name'] for table in tables]
    
    def retry_failed_table(self, table_name: str) -> bool:
        """
        –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã
        
        Args:
            table_name (str): –ò–º—è —Ç–∞–±–ª–∏—Ü—ã
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞
        """
        try:
            update_query = """
            UPDATE mcl.migration_status 
            SET current_status = 'pending',
                attempt_count = attempt_count + 1,
                last_error = NULL,
                error_details = NULL,
                updated_at = CURRENT_TIMESTAMP
            WHERE table_name = %s AND current_status = 'failed'
            """
            
            result = self._execute_query(update_query, (table_name,))
            
            if result:
                console.print(f"[yellow]üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã {table_name} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞[/yellow]")
                logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã {table_name} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞")
                return True
            else:
                logger.warning(f"–¢–∞–±–ª–∏—Ü–∞ {table_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ 'failed'")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è {table_name}: {e}")
            return False
    
    def get_migration_statistics(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
        
        Returns:
            dict: –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º —Ç–∞–±–ª–∏—Ü–∞–º
        """
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        progress = self.get_migration_progress()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        time_query = """
        SELECT 
            COUNT(*) as total_tables,
            COUNT(CASE WHEN end_time IS NOT NULL THEN 1 END) as completed_tables,
            AVG(EXTRACT(EPOCH FROM (end_time - start_time))) as avg_duration_seconds,
            MIN(start_time) as first_start,
            MAX(end_time) as last_completion
        FROM mcl.migration_status
        """
        
        time_stats = self._execute_query(time_query)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
        error_query = """
        SELECT 
            COUNT(*) as total_errors,
            COUNT(CASE WHEN current_status = 'failed' THEN 1 END) as current_failures,
            AVG(attempt_count) as avg_attempts
        FROM mcl.migration_status
        WHERE attempt_count > 0 OR current_status = 'failed'
        """
        
        error_stats = self._execute_query(error_query)
        
        statistics = {
            'progress': progress,
            'time_statistics': time_stats[0] if time_stats else {},
            'error_statistics': error_stats[0] if error_stats else {}
        }
        
        return statistics
    
    def display_progress_table(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        progress = self.get_migration_progress()
        
        table = Table(title="–ü—Ä–æ–≥—Ä–µ—Å—Å –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü")
        table.add_column("–°—Ç–∞—Ç—É—Å", style="cyan")
        table.add_column("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", style="magenta")
        table.add_column("–ü—Ä–æ—Ü–µ–Ω—Ç", style="green")
        
        total = progress['total']
        for status, count in progress['status_breakdown'].items():
            percentage = (count / total * 100) if total > 0 else 0
            table.add_row(status, str(count), f"{percentage:.1f}%")
        
        table.add_row("–ò–¢–û–ì–û", str(total), "100.0%", style="bold")
        
        console.print(table)
        console.print(f"\n[bold green]–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {progress['percentage']:.1f}% ({progress['completed']}/{progress['total']})[/bold green]")
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if self.connection and not self.connection.closed:
            self.connection.close()

# –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ConnectionManager (task_id=2 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    conn_manager = ConnectionManager()
    
    info = conn_manager.get_connection_info()
    console.print(f"[green]‚úÖ –ü—Ä–æ—Ñ–∏–ª—å: {info['profile_name']} (task_id={info['task_id']})[/green]\n")
    
    # –°–æ–∑–¥–∞—ë–º –º–µ–Ω–µ–¥–∂–µ—Ä
    manager = TableListManager(conn_manager)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü
        result = manager.initialize_table_list()
        console.print(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {result['initialized']} –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        manager.display_progress_table()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        incomplete = manager.get_incomplete_tables()
        console.print(f"\n–ù–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü: {len(incomplete)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = manager.get_migration_statistics()
        console.print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:")
        console.print(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –º–∏–≥—Ä–∞—Ü–∏–∏: {stats['time_statistics'].get('avg_duration_seconds', 0):.1f} —Å–µ–∫")
        console.print(f"–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: {stats['error_statistics'].get('avg_attempts', 0):.1f}")
        
    finally:
        manager.close()