#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–º—ë–Ω —Ü–µ–ª–µ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü –≤ —Å–∏—Å—Ç–µ–º–µ –º–∏–≥—Ä–∞—Ü–∏–∏
"""
import re
from typing import Optional

class TableNameResolver:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–º—ë–Ω —Ü–µ–ª–µ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü"""
    
    def __init__(self, target_schema: str = "ags"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑–æ–ª–≤–µ—Ä–∞ –∏–º—ë–Ω —Ç–∞–±–ª–∏—Ü
        
        Args:
            target_schema: –¶–µ–ª–µ–≤–∞—è —Å—Ö–µ–º–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "ags")
        """
        self.target_schema = target_schema
    
    def get_target_table_name(self, source_table_name: str) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ü–µ–ª–µ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
        
        Args:
            source_table_name: –ò–º—è –∏—Å—Ö–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
            
        Returns:
            –ü–æ–ª–Ω–æ–µ –∏–º—è —Ü–µ–ª–µ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–∫–ª—é—á–∞—Ç—å –∏–º—è –≤ –∫–∞–≤—ã—á–∫–∏
        if self._needs_quotes(source_table_name):
            return f'{self.target_schema}."{source_table_name}"'
        else:
            return f'{self.target_schema}.{source_table_name}'
    
    def _needs_quotes(self, table_name: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–∫–ª—é—á–∞—Ç—å –∏–º—è —Ç–∞–±–ª–∏—Ü—ã –≤ –∫–∞–≤—ã—á–∫–∏
        
        Args:
            table_name: –ò–º—è —Ç–∞–±–ª–∏—Ü—ã
            
        Returns:
            True, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã –∫–∞–≤—ã—á–∫–∏
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∫–∞–≤—ã—á–µ–∫
        
        # 1. –°–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã
        if any(c.isupper() for c in table_name):
            return True
        
        # 2. –°–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (–∫—Ä–æ–º–µ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è)
        if re.search(r'[^a-z0-9_]', table_name, re.IGNORECASE):
            return True
        
        # 3. –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ü–∏—Ñ—Ä—ã
        if table_name[0].isdigit():
            return True
        
        # 4. –Ø–≤–ª—è–µ—Ç—Å—è –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ª–æ–≤–æ–º PostgreSQL
        reserved_words = {
            'user', 'order', 'group', 'select', 'from', 'where', 'table',
            'index', 'view', 'sequence', 'function', 'trigger', 'schema'
        }
        if table_name.lower() in reserved_words:
            return True
        
        return False
    
    def get_safe_column_name(self, column_name: str) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –∫–æ–ª–æ–Ω–∫–∏
        
        Args:
            column_name: –ò–º—è –∫–æ–ª–æ–Ω–∫–∏
            
        Returns:
            –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è –∫–æ–ª–æ–Ω–∫–∏
        """
        if self._needs_quotes(column_name):
            return f'"{column_name}"'
        else:
            return column_name
    
    def analyze_table_names(self, table_names: list) -> dict:
        """
        –ê–Ω–∞–ª–∏–∑ —Å–ø–∏—Å–∫–∞ –∏–º—ë–Ω —Ç–∞–±–ª–∏—Ü
        
        Args:
            table_names: –°–ø–∏—Å–æ–∫ –∏–º—ë–Ω —Ç–∞–±–ª–∏—Ü
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∞–Ω–∞–ª–∏–∑–æ–º
        """
        analysis = {
            'total_tables': len(table_names),
            'quoted_tables': [],
            'unquoted_tables': [],
            'special_cases': []
        }
        
        for table_name in table_names:
            target_name = self.get_target_table_name(table_name)
            
            if self._needs_quotes(table_name):
                analysis['quoted_tables'].append({
                    'source': table_name,
                    'target': target_name,
                    'reason': self._get_quote_reason(table_name)
                })
            else:
                analysis['unquoted_tables'].append({
                    'source': table_name,
                    'target': target_name
                })
        
        return analysis
    
    def _get_quote_reason(self, table_name: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫–∞–≤—ã—á–µ–∫"""
        reasons = []
        
        if any(c.isupper() for c in table_name):
            reasons.append("–∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã")
        
        if re.search(r'[^a-z0-9_]', table_name, re.IGNORECASE):
            reasons.append("—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã")
        
        if table_name[0].isdigit():
            reasons.append("–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ü–∏—Ñ—Ä—ã")
        
        reserved_words = {
            'user', 'order', 'group', 'select', 'from', 'where', 'table'
        }
        if table_name.lower() in reserved_words:
            reasons.append("–∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ")
        
        return ", ".join(reasons) if reasons else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞"

def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Ä–µ–∑–æ–ª–≤–µ—Ä–∞ –∏–º—ë–Ω —Ç–∞–±–ª–∏—Ü"""
    from rich.console import Console
    from rich.table import Table
    
    console = Console()
    
    console.print("üîç –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ï–ó–û–õ–í–ï–†–ê –ò–ú–Å–ù –¢–ê–ë–õ–ò–¶")
    console.print("="*60)
    
    # –°–æ–∑–¥–∞—ë–º —Ä–µ–∑–æ–ª–≤–µ—Ä
    resolver = TableNameResolver("ags")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∏–º–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü
    test_tables = [
        "accnt",
        "cn", 
        "cnInvCmmAgN",
        "cn_inv_dbt",
        "cn_PrDoc",
        "user",
        "order",
        "123table",
        "table-with-dash",
        "table.with.dots"
    ]
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã
    analysis = resolver.analyze_table_names(test_tables)
    
    # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    result_table = Table(title="–ê–Ω–∞–ª–∏–∑ –∏–º—ë–Ω —Ç–∞–±–ª–∏—Ü")
    result_table.add_column("–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è", style="cyan")
    result_table.add_column("–¶–µ–ª–µ–≤–æ–µ –∏–º—è", style="green")
    result_table.add_column("–ö–∞–≤—ã—á–∫–∏", style="yellow")
    result_table.add_column("–ü—Ä–∏—á–∏–Ω–∞", style="red")
    
    for table_name in test_tables:
        target_name = resolver.get_target_table_name(table_name)
        needs_quotes = resolver._needs_quotes(table_name)
        reason = resolver._get_quote_reason(table_name) if needs_quotes else ""
        
        result_table.add_row(
            table_name,
            target_name,
            "–î–∞" if needs_quotes else "–ù–µ—Ç",
            reason
        )
    
    console.print(result_table)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    console.print(f"   üìã –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü: {analysis['total_tables']}")
    console.print(f"   üî§ –° –∫–∞–≤—ã—á–∫–∞–º–∏: {len(analysis['quoted_tables'])}")
    console.print(f"   üìù –ë–µ–∑ –∫–∞–≤—ã—á–µ–∫: {len(analysis['unquoted_tables'])}")

if __name__ == "__main__":
    main()