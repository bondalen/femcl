#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
"""
import psycopg2
import yaml
from rich.console import Console
from rich.panel import Panel
from rich.table import Table

console = Console()

def get_db_connection():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    with open('/home/alex/projects/sql/femcl/config/config.yaml', 'r', encoding='utf-8') as file:
        config = yaml.safe_load(file)
    
    postgres_config = config['database']['postgres']
    
    return psycopg2.connect(
        host=postgres_config['host'],
        port=postgres_config['port'],
        dbname=postgres_config['database'],
        user=postgres_config['user'],
        password=postgres_config['password']
    )

def create_test_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö"""
    console.print(Panel.fit(
        "[bold blue]üìä –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•[/bold blue]",
        border_style="blue"
    ))
    
    conn = get_db_connection()
    cursor = conn.cursor()
    
    try:
        # –°–æ–∑–¥–∞—ë–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ —Å—Ö–µ–º–µ mcl —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        console.print("üî® –°–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –≤ —Å—Ö–µ–º–µ mcl...")
        
        # –¢–∞–±–ª–∏—Ü–∞ accnt
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS mcl.accnt (
                id SERIAL PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                balance DECIMAL(15,2) DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        """)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        cursor.execute("""
            INSERT INTO mcl.accnt (name, balance) VALUES 
            ('–û—Å–Ω–æ–≤–Ω–æ–π —Å—á—ë—Ç', 10000.50),
            ('–†–µ–∑–µ—Ä–≤–Ω—ã–π —Å—á—ë—Ç', 5000.25),
            ('–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å—á—ë—Ç', 25000.75)
            ON CONFLICT DO NOTHING;
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ cn
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS mcl.cn (
                id SERIAL PRIMARY KEY,
                number VARCHAR(50) NOT NULL,
                description TEXT,
                amount DECIMAL(15,2),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        """)
        
        cursor.execute("""
            INSERT INTO mcl.cn (number, description, amount) VALUES 
            ('CN-001', '–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫—É', 150000.00),
            ('CN-002', '–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–∞ —É—Å–ª—É–≥–∏', 75000.50),
            ('CN-003', '–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–∞ –∞—Ä–µ–Ω–¥—É', 30000.00)
            ON CONFLICT DO NOTHING;
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ cnInvCmmAgN
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS mcl."cnInvCmmAgN" (
                id SERIAL PRIMARY KEY,
                value VARCHAR(255) NOT NULL,
                category VARCHAR(100),
                quantity INTEGER DEFAULT 1,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        """)
        
        cursor.execute("""
            INSERT INTO mcl."cnInvCmmAgN" (value, category, quantity) VALUES 
            ('–ê–∫—Ç–∏–≤ A', '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', 100),
            ('–ê–∫—Ç–∏–≤ B', '–û–±–ª–∏–≥–∞—Ü–∏–∏', 50),
            ('–ê–∫—Ç–∏–≤ C', '–ê–∫—Ü–∏–∏', 25)
            ON CONFLICT DO NOTHING;
        """)
        
        conn.commit()
        console.print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        console.print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
        
        tables_data = [
            ('mcl.accnt', '–°—á–µ—Ç–∞'),
            ('mcl.cn', '–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã'),
            ('mcl."cnInvCmmAgN"', '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤—ã')
        ]
        
        for table, description in tables_data:
            cursor.execute(f"SELECT COUNT(*) FROM {table}")
            count = cursor.fetchone()[0]
            console.print(f"   üìã {description}: {count} –∑–∞–ø–∏—Å–µ–π")
            
            if count > 0:
                cursor.execute(f"SELECT * FROM {table} LIMIT 2")
                rows = cursor.fetchall()
                console.print(f"      –ü—Ä–∏–º–µ—Ä—ã: {rows[:2]}")
        
        return True
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}[/red]")
        conn.rollback()
        return False
    finally:
        cursor.close()
        conn.close()

def migrate_data():
    """–ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –≤ —Ü–µ–ª–µ–≤—ã–µ"""
    console.print(Panel.fit(
        "[bold green]üöÄ –ü–ï–†–ï–ù–û–° –î–ê–ù–ù–´–•[/bold green]",
        border_style="green"
    ))
    
    conn = get_db_connection()
    cursor = conn.cursor()
    
    try:
        # –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ mcl.accnt –≤ ags.accnt
        console.print("üìä –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ mcl.accnt –≤ ags.accnt...")
        cursor.execute("""
            INSERT INTO ags.accnt (name, created_at)
            SELECT name, created_at FROM mcl.accnt
            ON CONFLICT DO NOTHING;
        """)
        accnt_count = cursor.rowcount
        console.print(f"   ‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {accnt_count}")
        
        # –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ mcl.cn –≤ ags.cn
        console.print("üìä –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ mcl.cn –≤ ags.cn...")
        cursor.execute("""
            INSERT INTO ags.cn (number, created_at)
            SELECT number, created_at FROM mcl.cn
            ON CONFLICT DO NOTHING;
        """)
        cn_count = cursor.rowcount
        console.print(f"   ‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {cn_count}")
        
        # –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ mcl.cnInvCmmAgN –≤ ags.cnInvCmmAgN
        console.print("üìä –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ mcl.cnInvCmmAgN –≤ ags.cnInvCmmAgN...")
        cursor.execute("""
            INSERT INTO ags."cnInvCmmAgN" (value, created_at)
            SELECT value, created_at FROM mcl."cnInvCmmAgN"
            ON CONFLICT DO NOTHING;
        """)
        cninv_count = cursor.rowcount
        console.print(f"   ‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {cninv_count}")
        
        conn.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–Ω–æ—Å–∞
        console.print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–µ—Ä–µ–Ω–æ—Å–∞:")
        
        target_tables = [
            ('ags.accnt', '–°—á–µ—Ç–∞'),
            ('ags.cn', '–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã'),
            ('ags."cnInvCmmAgN"', '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤—ã')
        ]
        
        for table, description in target_tables:
            cursor.execute(f"SELECT COUNT(*) FROM {table}")
            count = cursor.fetchone()[0]
            console.print(f"   üìã {description}: {count} –∑–∞–ø–∏—Å–µ–π")
            
            if count > 0:
                cursor.execute(f"SELECT * FROM {table}")
                rows = cursor.fetchall()
                console.print(f"      –î–∞–Ω–Ω—ã–µ: {rows}")
        
        return True
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö: {e}[/red]")
        conn.rollback()
        return False
    finally:
        cursor.close()
        conn.close()

def verify_migration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    console.print(Panel.fit(
        "[bold yellow]üîç –ü–†–û–í–ï–†–ö–ê –ú–ò–ì–†–ê–¶–ò–ò[/bold yellow]",
        border_style="yellow"
    ))
    
    conn = get_db_connection()
    cursor = conn.cursor()
    
    try:
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        console.print("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π:")
        
        comparisons = [
            ('mcl.accnt', 'ags.accnt', '–°—á–µ—Ç–∞'),
            ('mcl.cn', 'ags.cn', '–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã'),
            ('mcl."cnInvCmmAgN"', 'ags."cnInvCmmAgN"', '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤—ã')
        ]
        
        migration_success = True
        
        for source_table, target_table, description in comparisons:
            cursor.execute(f"SELECT COUNT(*) FROM {source_table}")
            source_count = cursor.fetchone()[0]
            
            cursor.execute(f"SELECT COUNT(*) FROM {target_table}")
            target_count = cursor.fetchone()[0]
            
            status = "‚úÖ" if source_count == target_count else "‚ùå"
            console.print(f"   {status} {description}: {source_count} ‚Üí {target_count}")
            
            if source_count != target_count:
                migration_success = False
        
        return migration_success
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}[/red]")
        return False
    finally:
        cursor.close()
        conn.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö"""
    console.print(Panel.fit(
        "[bold green]üß™ –¢–ï–°–¢ –ü–ï–†–ï–ù–û–°–ê –î–ê–ù–ù–´–•[/bold green]\n"
        "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –∏—Ö –ø–µ—Ä–µ–Ω–æ—Å –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏",
        border_style="green"
    ))
    
    # –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    console.print("\n" + "="*60)
    console.print("[bold blue]–®–ê–ì 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö[/bold blue]")
    console.print("="*60)
    
    if not create_test_data():
        console.print("[red]‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ[/red]")
        return False
    
    # –®–∞–≥ 2: –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö
    console.print("\n" + "="*60)
    console.print("[bold blue]–®–ê–ì 2: –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö[/bold blue]")
    console.print("="*60)
    
    if not migrate_data():
        console.print("[red]‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ[/red]")
        return False
    
    # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
    console.print("\n" + "="*60)
    console.print("[bold blue]–®–ê–ì 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏[/bold blue]")
    console.print("="*60)
    
    migration_success = verify_migration()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
    console.print("\n" + "="*60)
    console.print("[bold blue]üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢[/bold blue]")
    console.print("="*60)
    
    if migration_success:
        console.print("[green]‚úÖ –¢–ï–°–¢ –ü–ï–†–ï–ù–û–°–ê –î–ê–ù–ù–´–• –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û![/green]")
        console.print("[green]‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ[/green]")
        console.print("[green]‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø–µ—Ä–µ–Ω–æ—Å—É –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö 166 —Ç–∞–±–ª–∏—Ü[/green]")
    else:
        console.print("[red]‚ùå –¢–ï–°–¢ –ü–ï–†–ï–ù–û–°–ê –î–ê–ù–ù–´–• –ü–†–û–í–ê–õ–ï–ù[/red]")
        console.print("[red]‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö[/red]")
    
    return migration_success

if __name__ == "__main__":
    main()