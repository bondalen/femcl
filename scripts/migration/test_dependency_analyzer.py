#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–¥—É–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""
import os
import sys
from rich.console import Console
from rich.panel import Panel

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/home/alex/projects/sql/femcl')

from scripts.migration.dependency_analyzer import DependencyAnalyzer

console = Console()

def test_dependency_analysis():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
    console.print("[bold blue]üß™ –¢–ï–°–¢ 1: –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Ç–∞–±–ª–∏—Ü—ã[/bold blue]")
    
    analyzer = DependencyAnalyzer()
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Ç–∞–±–ª–∏—Ü–µ accnt
        table_name = "accnt"
        dependencies = analyzer.analyze_table_dependencies(table_name)
        
        console.print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è {table_name}:")
        console.print(f"   - –°—Å—ã–ª–æ—á–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {dependencies['referenced_tables']}")
        console.print(f"   - –ó–∞–≤–∏—Å–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {dependencies['dependent_tables']}")
        console.print(f"   - –í—Å–µ–≥–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {dependencies['total_dependencies']}")
        console.print(f"   - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {dependencies['critical_count']}")
        console.print(f"   - –£—Ä–æ–≤–µ–Ω—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {dependencies['dependency_level']}")
        
        return True
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}[/red]")
        return False
    finally:
        analyzer.close()

def test_readiness_check():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å—Å—ã–ª–æ—á–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü"""
    console.print("\n[bold blue]üß™ –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å—Å—ã–ª–æ—á–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü[/bold blue]")
    
    analyzer = DependencyAnalyzer()
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã accnt
        table_name = "accnt"
        readiness = analyzer.check_referenced_tables_ready(table_name)
        
        console.print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–ª—è {table_name}:")
        console.print(f"   - –ü—Ä–æ—Ü–µ–Ω—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {readiness['ready_percentage']:.1f}%")
        console.print(f"   - –ì–æ—Ç–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü: {len(readiness['ready_tables'])}")
        console.print(f"   - –ù–µ –≥–æ—Ç–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü: {len(readiness['not_ready_tables'])}")
        console.print(f"   - –í—Å–µ–≥–æ —Å—Å—ã–ª–æ—á–Ω—ã—Ö: {readiness['total_referenced']}")
        
        if readiness['not_ready_tables']:
            console.print("   üìã –ù–µ –≥–æ—Ç–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã:")
            for not_ready in readiness['not_ready_tables']:
                console.print(f"      - {not_ready['table']}: {not_ready['reason']}")
        
        return True
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {e}[/red]")
        return False
    finally:
        analyzer.close()

def test_circular_dependencies():
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    console.print("\n[bold blue]üß™ –¢–ï–°–¢ 3: –ü–æ–∏—Å–∫ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π[/bold blue]")
    
    analyzer = DependencyAnalyzer()
    
    try:
        # –ü–æ–∏—Å–∫ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        cycles = analyzer.detect_circular_dependencies()
        
        console.print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ —Ü–∏–∫–ª–æ–≤:")
        console.print(f"   - –ù–∞–π–¥–µ–Ω–æ —Ü–∏–∫–ª–æ–≤: {len(cycles)}")
        
        if cycles:
            console.print("   üìã –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
            for i, cycle in enumerate(cycles, 1):
                console.print(f"      –¶–∏–∫–ª {i}: {' ‚Üí '.join(cycle)}")
        else:
            console.print("   ‚úÖ –¶–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        return True
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ü–∏–∫–ª–æ–≤: {e}[/red]")
        return False
    finally:
        analyzer.close()

def test_migration_order():
    """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    console.print("\n[bold blue]üß™ –¢–ï–°–¢ 4: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏[/bold blue]")
    
    analyzer = DependencyAnalyzer()
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
        order = analyzer.get_migration_order()
        
        console.print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞:")
        console.print(f"   - –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü –≤ –ø–æ—Ä—è–¥–∫–µ: {len(order)}")
        console.print(f"   - –ü–µ—Ä–≤—ã–µ 10 —Ç–∞–±–ª–∏—Ü: {order[:10]}")
        
        if len(order) > 10:
            console.print(f"   - –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç–∞–±–ª–∏—Ü: {order[-5:]}")
        
        return True
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞: {e}[/red]")
        return False
    finally:
        analyzer.close()

def test_dependency_graph():
    """–¢–µ—Å—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    console.print("\n[bold blue]üß™ –¢–ï–°–¢ 5: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π[/bold blue]")
    
    analyzer = DependencyAnalyzer()
    
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        graph = analyzer.get_dependency_graph()
        
        console.print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞:")
        console.print(f"   - –£–∑–ª–æ–≤ –≤ –≥—Ä–∞—Ñ–µ: {len(graph)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        example_count = 0
        for source, targets in graph.items():
            if example_count < 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                console.print(f"   - {source} ‚Üí {targets}")
                example_count += 1
        
        if len(graph) > 5:
            console.print(f"   ... –∏ –µ—â—ë {len(graph) - 5} —É–∑–ª–æ–≤")
        
        return True
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞: {e}[/red]")
        return False
    finally:
        analyzer.close()

def test_dependency_chain():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–ø–æ—á–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    console.print("\n[bold blue]üß™ –¢–ï–°–¢ 6: –ê–Ω–∞–ª–∏–∑ —Ü–µ–ø–æ—á–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π[/bold blue]")
    
    analyzer = DependencyAnalyzer()
    
    try:
        # –ê–Ω–∞–ª–∏–∑ —Ü–µ–ø–æ—á–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã accnt
        table_name = "accnt"
        chain = analyzer.analyze_dependency_chain(table_name)
        
        console.print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–ø–æ—á–∫–∏ –¥–ª—è {table_name}:")
        console.print(f"   - –¶–µ–ø–æ—á–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {' ‚Üí '.join(chain)}")
        console.print(f"   - –î–ª–∏–Ω–∞ —Ü–µ–ø–æ—á–∫–∏: {len(chain)}")
        
        return True
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–ø–æ—á–∫–∏: {e}[/red]")
        return False
    finally:
        analyzer.close()

def test_critical_dependencies():
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    console.print("\n[bold blue]üß™ –¢–ï–°–¢ 7: –ü–æ–∏—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π[/bold blue]")
    
    analyzer = DependencyAnalyzer()
    
    try:
        # –ü–æ–∏—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        critical = analyzer.get_critical_dependencies()
        
        console.print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
        console.print(f"   - –ù–∞–π–¥–µ–Ω–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {len(critical)}")
        
        if critical:
            console.print("   üìã –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
            for i, dep in enumerate(critical[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                console.print(f"      {i}. {dep['source_table']} ‚Üí {dep['target_table']} ({dep['delete_action']})")
            
            if len(critical) > 5:
                console.print(f"      ... –∏ –µ—â—ë {len(critical) - 5} –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        else:
            console.print("   ‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        return True
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}[/red]")
        return False
    finally:
        analyzer.close()

def test_dependency_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    console.print("\n[bold blue]üß™ –¢–ï–°–¢ 8: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π[/bold blue]")
    
    analyzer = DependencyAnalyzer()
    
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã accnt
        table_name = "accnt"
        is_valid = analyzer.validate_dependency_integrity(table_name)
        
        console.print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è {table_name}:")
        if is_valid:
            console.print("   ‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        else:
            console.print("   ‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏")
        
        return True
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}[/red]")
        return False
    finally:
        analyzer.close()

def test_dependency_statistics():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    console.print("\n[bold blue]üß™ –¢–ï–°–¢ 9: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π[/bold blue]")
    
    analyzer = DependencyAnalyzer()
    
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = analyzer.get_migration_statistics()
        
        console.print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:")
        console.print(f"   - –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü: {stats['total_tables']}")
        console.print(f"   - –¢–∞–±–ª–∏—Ü —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏: {stats['tables_with_dependencies']}")
        console.print(f"   - –í—Å–µ–≥–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {stats['total_dependencies']}")
        console.print(f"   - –ú–∞–∫—Å–∏–º—É–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–∞ —Ç–∞–±–ª–∏—Ü—É: {stats['max_dependencies_per_table']}")
        console.print(f"   - –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {stats['avg_dependencies']:.1f}")
        console.print(f"   - –¶–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {stats['circular_dependencies']}")
        console.print(f"   - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {stats['critical_dependencies']}")
        console.print(f"   - –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {stats['avg_dependency_level']:.1f}")
        
        return True
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}[/red]")
        return False
    finally:
        analyzer.close()

def test_dependency_tree():
    """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    console.print("\n[bold blue]üß™ –¢–ï–°–¢ 10: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π[/bold blue]")
    
    analyzer = DependencyAnalyzer()
    
    try:
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã accnt
        table_name = "accnt"
        console.print(f"üå≥ –î–µ—Ä–µ–≤–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è {table_name}:")
        analyzer.display_dependency_tree(table_name)
        
        console.print("‚úÖ –î–µ—Ä–µ–≤–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ")
        return True
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞: {e}[/red]")
        return False
    finally:
        analyzer.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    console.print(Panel.fit(
        "[bold green]üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–£–õ–Ø –ê–ù–ê–õ–ò–ó–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô[/bold green]\n"
        "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π DependencyAnalyzer",
        border_style="green"
    ))
    
    tests = [
        ("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Ç–∞–±–ª–∏—Ü—ã", test_dependency_analysis),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å—Å—ã–ª–æ—á–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü", test_readiness_check),
        ("–ü–æ–∏—Å–∫ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", test_circular_dependencies),
        ("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏", test_migration_order),
        ("–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", test_dependency_graph),
        ("–ê–Ω–∞–ª–∏–∑ —Ü–µ–ø–æ—á–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", test_dependency_chain),
        ("–ü–æ–∏—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", test_critical_dependencies),
        ("–í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", test_dependency_validation),
        ("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", test_dependency_statistics),
        ("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", test_dependency_tree)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        console.print(f"\n{'='*60}")
        try:
            result = test_func()
            results.append((test_name, result))
            if result:
                console.print(f"[green]‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù[/green]")
            else:
                console.print(f"[red]‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù[/red]")
        except Exception as e:
            console.print(f"[red]‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}[/red]")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
    console.print(f"\n{'='*60}")
    console.print("[bold blue]üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:[/bold blue]")
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        console.print(f"  {test_name}: {status}")
    
    console.print(f"\n[bold green]–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ[/bold green]")
    
    if passed == total:
        console.print("[bold green]üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û![/bold green]")
    else:
        console.print("[bold red]üí• –ï–°–¢–¨ –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´[/bold red]")

if __name__ == "__main__":
    main()