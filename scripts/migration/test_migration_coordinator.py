#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–¥—É–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏
"""
import os
import sys
import time
from rich.console import Console
from rich.panel import Panel

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/home/alex/projects/sql/femcl')

from scripts.migration.migration_coordinator import MigrationCoordinator, MigrationState

console = Console()

def test_coordinator_initialization():
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞"""
    console.print("[bold blue]üß™ –¢–ï–°–¢ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞[/bold blue]")
    
    coordinator = MigrationCoordinator()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if coordinator.state == MigrationState.INITIALIZING:
            console.print("   ‚úÖ –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            console.print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {coordinator.state}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        if coordinator.table_manager is None:
            console.print("   ‚úÖ Table manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–æ–∂–∏–¥–∞–µ–º–æ)")
        else:
            console.print("   ‚ùå Table manager –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        if coordinator.dependency_analyzer is None:
            console.print("   ‚úÖ Dependency analyzer –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–æ–∂–∏–¥–∞–µ–º–æ)")
        else:
            console.print("   ‚ùå Dependency analyzer –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        if coordinator.monitor is None:
            console.print("   ‚úÖ Monitor –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–æ–∂–∏–¥–∞–µ–º–æ)")
        else:
            console.print("   ‚ùå Monitor –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        return True
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}[/red]")
        return False
    finally:
        coordinator.close()

def test_system_initialization():
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
    console.print("\n[bold blue]üß™ –¢–ï–°–¢ 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã[/bold blue]")
    
    coordinator = MigrationCoordinator()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
        success = coordinator.initialize_migration_system()
        
        if success:
            console.print("   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if coordinator.state == MigrationState.READY:
                console.print("   ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ READY")
            else:
                console.print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {coordinator.state}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            if coordinator.table_manager is not None:
                console.print("   ‚úÖ Table manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            else:
                console.print("   ‚ùå Table manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
            
            if coordinator.dependency_analyzer is not None:
                console.print("   ‚úÖ Dependency analyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            else:
                console.print("   ‚ùå Dependency analyzer –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
            
            if coordinator.monitor is not None:
                console.print("   ‚úÖ Monitor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            else:
                console.print("   ‚ùå Monitor –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
            
            return True
        else:
            console.print("   ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã")
            return False
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã: {e}[/red]")
        return False
    finally:
        coordinator.close()

def test_migration_readiness_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    console.print("\n[bold blue]üß™ –¢–ï–°–¢ 3: –í–∞–ª–∏–¥–∞—Ü–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –º–∏–≥—Ä–∞—Ü–∏–∏[/bold blue]")
    
    coordinator = MigrationCoordinator()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
        coordinator.initialize_migration_system()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        readiness = coordinator.validate_migration_readiness()
        
        if readiness:
            console.print("   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            console.print(f"   üìä –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {readiness['readiness_percentage']:.1f}%")
            console.print(f"   ‚úÖ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {readiness['is_ready']}")
            console.print(f"   üìã –ü—Ä–æ–±–ª–µ–º—ã: {len(readiness['issues'])}")
            
            if readiness['issues']:
                for issue in readiness['issues']:
                    console.print(f"      - {issue}")
            
            return True
        else:
            console.print("   ‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏")
            return False
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}[/red]")
        return False
    finally:
        coordinator.close()

def test_migration_plan():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    console.print("\n[bold blue]üß™ –¢–ï–°–¢ 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏–∏[/bold blue]")
    
    coordinator = MigrationCoordinator()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
        coordinator.initialize_migration_system()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–Ω–∞
        plan = coordinator.get_migration_plan()
        
        if plan and 'tables' in plan:
            console.print("   ‚úÖ –ü–ª–∞–Ω –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            console.print(f"   üìã –¢–∞–±–ª–∏—Ü –≤ –ø–ª–∞–Ω–µ: {len(plan['tables'])}")
            console.print(f"   üìä –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü: {plan.get('total_tables', 0)}")
            console.print(f"   üîó –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {plan.get('critical_dependencies', 0)}")
            console.print(f"   ‚è±Ô∏è –û—Ü–µ–Ω–æ—á–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {plan.get('estimated_duration_hours', 0):.1f} —á–∞—Å–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü
            if plan['tables']:
                console.print("   üìù –ü–µ—Ä–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –ø–ª–∞–Ω–µ:")
                for i, table in enumerate(plan['tables'][:5]):
                    console.print(f"      {i+1}. {table}")
                if len(plan['tables']) > 5:
                    console.print(f"      ... –∏ –µ—â—ë {len(plan['tables']) - 5} —Ç–∞–±–ª–∏—Ü")
            
            return True
        else:
            console.print("   ‚ùå –ü–ª–∞–Ω –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω")
            return False
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}[/red]")
        return False
    finally:
        coordinator.close()

def test_system_health():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    console.print("\n[bold blue]üß™ –¢–ï–°–¢ 5: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã[/bold blue]")
    
    coordinator = MigrationCoordinator()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
        coordinator.initialize_migration_system()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        health = coordinator.get_system_health()
        
        if health:
            console.print("   ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ–ª—É—á–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            console.print(f"   üè• –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {health['overall_status']}")
            console.print(f"   ‚ùå –ï—Å—Ç—å –æ—à–∏–±–∫–∏: {health['has_errors']}")
            console.print(f"   üìä –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {len(health['components'])}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            for component, status in health['components'].items():
                console.print(f"      - {component}: {status['status']}")
                if 'error' in status:
                    console.print(f"        –û—à–∏–±–∫–∞: {status['error']}")
            
            if health['errors']:
                console.print("   üö® –û—à–∏–±–∫–∏ —Å–∏—Å—Ç–µ–º—ã:")
                for error in health['errors']:
                    console.print(f"      - {error}")
            
            return True
        else:
            console.print("   ‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ")
            return False
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã: {e}[/red]")
        return False
    finally:
        coordinator.close()

def test_migration_status():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    console.print("\n[bold blue]üß™ –¢–ï–°–¢ 6: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏[/bold blue]")
    
    coordinator = MigrationCoordinator()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
        coordinator.initialize_migration_system()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        status = coordinator.get_migration_status()
        
        if status:
            console.print("   ‚úÖ –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            console.print(f"   üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ: {status['state']}")
            console.print(f"   üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {status['progress']['percentage']:.1f}%")
            console.print(f"   ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {status['progress']['completed']}")
            console.print(f"   üìã –í—Å–µ–≥–æ: {status['progress']['total']}")
            console.print(f"   ‚ùå –û—à–∏–±–æ–∫: {status['error_count']}")
            
            if status['runtime_seconds']:
                console.print(f"   ‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {status['runtime_seconds']:.1f} —Å–µ–∫")
            
            if status['eta']:
                console.print(f"   üéØ ETA: {status['eta']}")
            
            return True
        else:
            console.print("   ‚ùå –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω")
            return False
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}[/red]")
        return False
    finally:
        coordinator.close()

def test_migration_control():
    """–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–µ–π"""
    console.print("\n[bold blue]üß™ –¢–ï–°–¢ 7: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–µ–π[/bold blue]")
    
    coordinator = MigrationCoordinator()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
        coordinator.initialize_migration_system()
        
        # –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
        console.print("   üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏...")
        start_success = coordinator.start_migration_process()
        
        if start_success:
            console.print("   ‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if coordinator.state == MigrationState.RUNNING:
                console.print("   ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ RUNNING")
            else:
                console.print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞: {coordinator.state}")
                return False
            
            # –ñ–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ
            time.sleep(2)
            
            # –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
            console.print("   ‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏...")
            pause_success = coordinator.pause_migration()
            
            if pause_success:
                console.print("   ‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                if coordinator.state == MigrationState.PAUSED:
                    console.print("   ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ PAUSED")
                else:
                    console.print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {coordinator.state}")
                    return False
                
                # –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏
                console.print("   ‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏...")
                resume_success = coordinator.resume_migration()
                
                if resume_success:
                    console.print("   ‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    if coordinator.state == MigrationState.RUNNING:
                        console.print("   ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ RUNNING")
                    else:
                        console.print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {coordinator.state}")
                        return False
                else:
                    console.print("   ‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏")
                    return False
            else:
                console.print("   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏")
                return False
        else:
            console.print("   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏")
            return False
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
        console.print("   üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏...")
        stop_success = coordinator.stop_migration()
        
        if stop_success:
            console.print("   ‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if coordinator.state == MigrationState.STOPPED:
                console.print("   ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ STOPPED")
            else:
                console.print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {coordinator.state}")
                return False
        else:
            console.print("   ‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏")
            return False
        
        return True
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–µ–π: {e}[/red]")
        return False
    finally:
        coordinator.close()

def test_error_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    console.print("\n[bold blue]üß™ –¢–ï–°–¢ 8: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫[/bold blue]")
    
    coordinator = MigrationCoordinator()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
        coordinator.initialize_migration_system()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
        error_types = [
            {'type': 'TEMPORARY', 'message': '–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏'},
            {'type': 'DEPENDENCY', 'message': '–û—à–∏–±–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏'},
            {'type': 'CRITICAL', 'message': '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã'}
        ]
        
        for error_info in error_types:
            console.print(f"   üö® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏: {error_info['type']}")
            
            success = coordinator.handle_error(error_info)
            
            if success:
                console.print(f"   ‚úÖ –û—à–∏–±–∫–∞ {error_info['type']} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                console.print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {error_info['type']}")
                return False
        
        return True
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫: {e}[/red]")
        return False
    finally:
        coordinator.close()

def test_status_dashboard():
    """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞ —Å—Ç–∞—Ç—É—Å–∞"""
    console.print("\n[bold blue]üß™ –¢–ï–°–¢ 9: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞ —Å—Ç–∞—Ç—É—Å–∞[/bold blue]")
    
    coordinator = MigrationCoordinator()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
        coordinator.initialize_migration_system()
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞
        console.print("   üìä –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞ —Å—Ç–∞—Ç—É—Å–∞...")
        coordinator.display_status_dashboard()
        
        console.print("   ‚úÖ –î–∞—à–±–æ—Ä–¥ –æ—Ç–æ–±—Ä–∞–∂—ë–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞: {e}[/red]")
        return False
    finally:
        coordinator.close()

def test_coordinator_lifecycle():
    """–¢–µ—Å—Ç –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞"""
    console.print("\n[bold blue]üß™ –¢–ï–°–¢ 10: –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞[/bold blue]")
    
    coordinator = MigrationCoordinator()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if coordinator.state == MigrationState.INITIALIZING:
            console.print("   ‚úÖ –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: INITIALIZING")
        else:
            console.print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {coordinator.state}")
            return False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        init_success = coordinator.initialize_migration_system()
        if not init_success:
            console.print("   ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
            return False
        
        if coordinator.state == MigrationState.READY:
            console.print("   ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: READY")
        else:
            console.print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {coordinator.state}")
            return False
        
        # –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
        start_success = coordinator.start_migration_process()
        if not start_success:
            console.print("   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏")
            return False
        
        if coordinator.state == MigrationState.RUNNING:
            console.print("   ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞: RUNNING")
        else:
            console.print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞: {coordinator.state}")
            return False
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
        stop_success = coordinator.stop_migration()
        if not stop_success:
            console.print("   ‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏")
            return False
        
        if coordinator.state == MigrationState.STOPPED:
            console.print("   ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: STOPPED")
        else:
            console.print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {coordinator.state}")
            return False
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
        coordinator.close()
        console.print("   ‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –∑–∞–∫—Ä—ã—Ç —É—Å–ø–µ—à–Ω–æ")
        
        return True
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: {e}[/red]")
        return False
    finally:
        try:
            coordinator.close()
        except:
            pass

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    console.print(Panel.fit(
        "[bold green]üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–£–õ–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ò –ö–û–û–†–î–ò–ù–ê–¶–ò–ò[/bold green]\n"
        "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π MigrationCoordinator",
        border_style="green"
    ))
    
    tests = [
        ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞", test_coordinator_initialization),
        ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã", test_system_initialization),
        ("–í–∞–ª–∏–¥–∞—Ü–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –º–∏–≥—Ä–∞—Ü–∏–∏", test_migration_readiness_validation),
        ("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏–∏", test_migration_plan),
        ("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã", test_system_health),
        ("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏", test_migration_status),
        ("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–µ–π", test_migration_control),
        ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", test_error_handling),
        ("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞ —Å—Ç–∞—Ç—É—Å–∞", test_status_dashboard),
        ("–ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞", test_coordinator_lifecycle)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        console.print(f"\n{'='*60}")
        try:
            result = test_func()
            results.append((test_name, result))
            if result:
                console.print(f"[green]‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù[/green]")
            else:
                console.print(f"[red]‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù[/red]")
        except Exception as e:
            console.print(f"[red]‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}[/red]")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
    console.print(f"\n{'='*60}")
    console.print("[bold blue]üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:[/bold blue]")
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        console.print(f"  {test_name}: {status}")
    
    console.print(f"\n[bold green]–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ[/bold green]")
    
    if passed == total:
        console.print("[bold green]üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û![/bold green]")
    else:
        console.print("[bold red]üí• –ï–°–¢–¨ –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´[/bold red]")

if __name__ == "__main__":
    main()