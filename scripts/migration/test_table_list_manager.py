#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–¥—É–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º —Ç–∞–±–ª–∏—Ü
"""
import os
import sys
import time
from rich.console import Console
from rich.panel import Panel

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/home/alex/projects/sql/femcl')

from scripts.migration.table_list_manager import TableListManager

console = Console()

def test_initialization():
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü"""
    console.print("[bold blue]üß™ –¢–ï–°–¢ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü[/bold blue]")
    
    manager = TableListManager()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        result = manager.initialize_table_list()
        
        console.print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:")
        console.print(f"   - –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü: {result['total_tables']}")
        console.print(f"   - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {result['initialized']}")
        console.print(f"   - –£–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∏: {result['already_exists']}")
        
        return True
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}[/red]")
        return False
    finally:
        manager.close()

def test_progress_tracking():
    """–¢–µ—Å—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    console.print("\n[bold blue]üß™ –¢–ï–°–¢ 2: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞[/bold blue]")
    
    manager = TableListManager()
    
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress = manager.get_migration_progress()
        
        console.print(f"‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –º–∏–≥—Ä–∞—Ü–∏–∏:")
        console.print(f"   - –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü: {progress['total']}")
        console.print(f"   - –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {progress['completed']}")
        console.print(f"   - –ü—Ä–æ—Ü–µ–Ω—Ç: {progress['percentage']:.1f}%")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        manager.display_progress_table()
        
        return True
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}[/red]")
        return False
    finally:
        manager.close()

def test_status_management():
    """–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞–º–∏"""
    console.print("\n[bold blue]üß™ –¢–ï–°–¢ 3: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞–º–∏[/bold blue]")
    
    manager = TableListManager()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        incomplete = manager.get_incomplete_tables()
        
        if not incomplete:
            console.print("[yellow]‚ö†Ô∏è –ù–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è[/yellow]")
            return True
        
        test_table = incomplete[0]
        console.print(f"üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Ç–∞–±–ª–∏—Ü–µ: {test_table}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        initial_status = manager.get_table_status(test_table)
        console.print(f"   - –ù–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {initial_status}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        success = manager.update_table_status(test_table, 'in_progress', {'test': True})
        if success:
            console.print("   ‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ 'in_progress'")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            new_status = manager.get_table_status(test_table)
            console.print(f"   - –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {new_status}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            manager.update_table_status(test_table, initial_status)
            console.print(f"   ‚úÖ –°—Ç–∞—Ç—É—Å –≤–æ–∑–≤—Ä–∞—â—ë–Ω –∫ '{initial_status}'")
        else:
            console.print("   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
            return False
        
        return True
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞–º–∏: {e}[/red]")
        return False
    finally:
        manager.close()

def test_table_completion():
    """–¢–µ—Å—Ç –æ—Ç–º–µ—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π"""
    console.print("\n[bold blue]üß™ –¢–ï–°–¢ 4: –û—Ç–º–µ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π[/bold blue]")
    
    manager = TableListManager()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        incomplete = manager.get_incomplete_tables()
        
        if not incomplete:
            console.print("[yellow]‚ö†Ô∏è –ù–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è[/yellow]")
            return True
        
        test_table = incomplete[0]
        console.print(f"üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Ç–∞–±–ª–∏—Ü–µ: {test_table}")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        initial_status = manager.get_table_status(test_table)
        
        # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
        metrics = {
            'duration_seconds': 45.2,
            'records_migrated': 1250,
            'structure_elements': 8,
            'data_size_mb': 2.5
        }
        
        success = manager.mark_table_completed(test_table, metrics)
        if success:
            console.print("   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–∞—è")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            new_status = manager.get_table_status(test_table)
            console.print(f"   - –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {new_status}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            manager.update_table_status(test_table, initial_status)
            console.print(f"   ‚úÖ –°—Ç–∞—Ç—É—Å –≤–æ–∑–≤—Ä–∞—â—ë–Ω –∫ '{initial_status}'")
        else:
            console.print("   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π")
            return False
        
        return True
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {e}[/red]")
        return False
    finally:
        manager.close()

def test_failed_tables():
    """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ —Å –æ—à–∏–±–∫–∞–º–∏"""
    console.print("\n[bold blue]üß™ –¢–ï–°–¢ 5: –†–∞–±–æ—Ç–∞ —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ —Å –æ—à–∏–±–∫–∞–º–∏[/bold blue]")
    
    manager = TableListManager()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü —Å –æ—à–∏–±–∫–∞–º–∏
        failed_tables = manager.get_failed_tables()
        blocked_tables = manager.get_blocked_tables()
        
        console.print(f"üìä –¢–∞–±–ª–∏—Ü—ã —Å –æ—à–∏–±–∫–∞–º–∏: {len(failed_tables)}")
        console.print(f"üìä –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {len(blocked_tables)}")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ã —Å –æ—à–∏–±–∫–∞–º–∏, —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
        if failed_tables:
            test_table = failed_tables[0]
            console.print(f"   üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –¥–ª—è: {test_table}")
            
            success = manager.retry_failed_table(test_table)
            if success:
                console.print("   ‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞")
            else:
                console.print("   ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏")
        else:
            console.print("   ‚ÑπÔ∏è –ù–µ—Ç —Ç–∞–±–ª–∏—Ü —Å –æ—à–∏–±–∫–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        return True
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ —Å –æ—à–∏–±–∫–∞–º–∏: {e}[/red]")
        return False
    finally:
        manager.close()

def test_statistics():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    console.print("\n[bold blue]üß™ –¢–ï–°–¢ 6: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏[/bold blue]")
    
    manager = TableListManager()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = manager.get_migration_statistics()
        
        console.print("‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        console.print(f"   - –ü—Ä–æ–≥—Ä–µ—Å—Å: {stats['progress']['percentage']:.1f}%")
        console.print(f"   - –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü: {stats['progress']['total']}")
        console.print(f"   - –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {stats['progress']['completed']}")
        
        if stats['time_statistics'] and stats['time_statistics'].get('avg_duration_seconds'):
            avg_duration = stats['time_statistics'].get('avg_duration_seconds', 0)
            console.print(f"   - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –º–∏–≥—Ä–∞—Ü–∏–∏: {avg_duration:.1f} —Å–µ–∫")
        
        if stats['error_statistics'] and stats['error_statistics'].get('avg_attempts'):
            avg_attempts = stats['error_statistics'].get('avg_attempts', 0)
            console.print(f"   - –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: {avg_attempts:.1f}")
        
        return True
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}[/red]")
        return False
    finally:
        manager.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    console.print(Panel.fit(
        "[bold green]üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–£–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–ü–ò–°–ö–û–ú –¢–ê–ë–õ–ò–¶[/bold green]\n"
        "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π TableListManager",
        border_style="green"
    ))
    
    tests = [
        ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü", test_initialization),
        ("–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", test_progress_tracking),
        ("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞–º–∏", test_status_management),
        ("–û—Ç–º–µ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è", test_table_completion),
        ("–†–∞–±–æ—Ç–∞ —Å –æ—à–∏–±–∫–∞–º–∏", test_failed_tables),
        ("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", test_statistics)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        console.print(f"\n{'='*60}")
        try:
            result = test_func()
            results.append((test_name, result))
            if result:
                console.print(f"[green]‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù[/green]")
            else:
                console.print(f"[red]‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù[/red]")
        except Exception as e:
            console.print(f"[red]‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}[/red]")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
    console.print(f"\n{'='*60}")
    console.print("[bold blue]üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:[/bold blue]")
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        console.print(f"  {test_name}: {status}")
    
    console.print(f"\n[bold green]–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ[/bold green]")
    
    if passed == total:
        console.print("[bold green]üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û![/bold green]")
    else:
        console.print("[bold red]üí• –ï–°–¢–¨ –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´[/bold red]")

if __name__ == "__main__":
    main()