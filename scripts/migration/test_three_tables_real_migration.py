#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–µ–Ω–æ—Å —Ç—Ä—ë—Ö —Ç–∞–±–ª–∏—Ü —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∞–≤–∏–ª –º–∏–≥—Ä–∞—Ü–∏–∏
"""
import os
import sys
import time
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.progress import Progress, BarColumn, TextColumn, TimeElapsedColumn

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/home/alex/projects/sql/femcl')

from scripts.migration.migration_coordinator import MigrationCoordinator, MigrationState
from scripts.test_updated_rules import (
    generate_table_ddl, create_primary_keys, create_indexes, 
    create_foreign_keys, create_check_constraints, create_triggers, create_sequences
)

console = Console()

def test_real_migration():
    """–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–µ–Ω–æ—Å —Ç—Ä—ë—Ö —Ç–∞–±–ª–∏—Ü"""
    console.print(Panel.fit(
        "[bold green]üöÄ –¢–ï–°–¢–û–í–´–ô –ü–ï–†–ï–ù–û–° –¢–†–Å–• –¢–ê–ë–õ–ò–¶[/bold green]\n"
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∞–≤–∏–ª –º–∏–≥—Ä–∞—Ü–∏–∏",
        border_style="green"
    ))
    
    # –°–æ–∑–¥–∞—ë–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä
    coordinator = MigrationCoordinator()
    
    try:
        # –®–∞–≥ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
        console.print("\n[bold blue]üìã –®–ê–ì 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–∏–≥—Ä–∞—Ü–∏–∏[/bold blue]")
        init_success = coordinator.initialize_migration_system()
        
        if not init_success:
            console.print("[red]‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã[/red]")
            return False
        
        console.print("[green]‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ[/green]")
        
        # –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
        console.print("\n[bold blue]üìã –®–ê–ì 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏–∏[/bold blue]")
        plan = coordinator.get_migration_plan()
        
        console.print(f"   üìä –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü –≤ –ø–ª–∞–Ω–µ: {plan['total_tables']}")
        console.print(f"   üîó –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {plan['critical_dependencies']}")
        
        # –®–∞–≥ 3: –í—ã–±–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü
        console.print("\n[bold blue]üéØ –®–ê–ì 3: –í—ã–±–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü[/bold blue]")
        test_tables = ['accnt', 'cn', 'cnInvCmmAgN']
        
        console.print("   üéØ –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã:")
        for i, table in enumerate(test_tables, 1):
            console.print(f"      {i}. {table}")
        
        # –®–∞–≥ 4: –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü
        console.print("\n[bold blue]üîç –®–ê–ì 4: –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π[/bold blue]")
        
        for table in test_tables:
            console.print(f"   üìä –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {table}")
            
            # –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            dependencies = coordinator.dependency_analyzer.analyze_table_dependencies(table)
            console.print(f"      üìã –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {dependencies['total_dependencies']}")
            console.print(f"      üîó –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {dependencies['critical_count']}")
            console.print(f"      üìà –£—Ä–æ–≤–µ–Ω—å: {dependencies['dependency_level']}")
            
            if dependencies['referenced_tables']:
                console.print(f"      üìù –°—Å—ã–ª–æ—á–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {', '.join(dependencies['referenced_tables'])}")
        
        # –®–∞–≥ 5: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ PostgreSQL
        console.print("\n[bold blue]üèóÔ∏è –®–ê–ì 5: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ PostgreSQL[/bold blue]")
        
        for table in test_tables:
            console.print(f"   üî® –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {table}")
            
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º DDL –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
                ddl = generate_table_ddl(table)
                if ddl:
                    console.print(f"      ‚úÖ DDL —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω ({len(ddl)} —Å–∏–º–≤–æ–ª–æ–≤)")
                else:
                    console.print(f"      ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ DDL")
                    continue
                
                # –°–æ–∑–¥–∞—ë–º –ø–µ—Ä–≤–∏—á–Ω—ã–µ –∫–ª—é—á–∏
                pk_ddl = create_primary_keys(table)
                if pk_ddl:
                    console.print(f"      ‚úÖ –ü–µ—Ä–≤–∏—á–Ω—ã–µ –∫–ª—é—á–∏ —Å–æ–∑–¥–∞–Ω—ã")
                
                # –°–æ–∑–¥–∞—ë–º –∏–Ω–¥–µ–∫—Å—ã
                idx_ddl = create_indexes(table)
                if idx_ddl:
                    console.print(f"      ‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã")
                
                # –°–æ–∑–¥–∞—ë–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏
                fk_ddl = create_foreign_keys(table)
                if fk_ddl:
                    console.print(f"      ‚úÖ –í–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ —Å–æ–∑–¥–∞–Ω—ã")
                
                # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
                check_ddl = create_check_constraints(table)
                if check_ddl:
                    console.print(f"      ‚úÖ –ü—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã")
                
                # –°–æ–∑–¥–∞—ë–º —Ç—Ä–∏–≥–≥–µ—Ä—ã
                trigger_ddl = create_triggers(table)
                if trigger_ddl:
                    console.print(f"      ‚úÖ –¢—Ä–∏–≥–≥–µ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã")
                
                # –°–æ–∑–¥–∞—ë–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                seq_ddl = create_sequences(table)
                if seq_ddl:
                    console.print(f"      ‚úÖ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω—ã")
                
                console.print(f"      ‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table} —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                
            except Exception as e:
                console.print(f"      ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã {table}: {e}")
                continue
        
        # –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        console.print("\n[bold blue]üîç –®–ê–ì 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü[/bold blue]")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        import psycopg2
        import yaml
        
        with open('/home/alex/projects/sql/femcl/config/config.yaml', 'r', encoding='utf-8') as file:
            config = yaml.safe_load(file)
        
        postgres_config = config['database']['postgres']
        
        conn = psycopg2.connect(
            host=postgres_config['host'],
            port=postgres_config['port'],
            dbname=postgres_config['database'],
            user=postgres_config['user'],
            password=postgres_config['password']
        )
        
        cursor = conn.cursor()
        
        for table in test_tables:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                cursor.execute(f"""
                    SELECT table_name, table_type 
                    FROM information_schema.tables 
                    WHERE table_schema = 'ags' AND table_name = %s
                """, (table,))
                
                result = cursor.fetchone()
                if result:
                    console.print(f"   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å—Ö–µ–º–µ ags")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–Ω–∫–∞—Ö
                    cursor.execute(f"""
                        SELECT column_name, data_type, is_nullable
                        FROM information_schema.columns 
                        WHERE table_schema = 'ags' AND table_name = %s
                        ORDER BY ordinal_position
                    """, (table,))
                    
                    columns = cursor.fetchall()
                    console.print(f"      üìä –ö–æ–ª–æ–Ω–æ–∫: {len(columns)}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤–∏—á–Ω—ã—Ö –∫–ª—é—á–∞—Ö
                    cursor.execute(f"""
                        SELECT constraint_name
                        FROM information_schema.table_constraints 
                        WHERE table_schema = 'ags' AND table_name = %s 
                        AND constraint_type = 'PRIMARY KEY'
                    """, (table,))
                    
                    pk_result = cursor.fetchone()
                    if pk_result:
                        console.print(f"      üîë –ü–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á: {pk_result[0]}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–∞—Ö
                    cursor.execute(f"""
                        SELECT constraint_name, referenced_table_name
                        FROM information_schema.table_constraints tc
                        JOIN information_schema.key_column_usage kcu 
                        ON tc.constraint_name = kcu.constraint_name
                        WHERE tc.table_schema = 'ags' AND tc.table_name = %s 
                        AND tc.constraint_type = 'FOREIGN KEY'
                    """, (table,))
                    
                    fk_results = cursor.fetchall()
                    if fk_results:
                        console.print(f"      üîó –í–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π: {len(fk_results)}")
                        for fk in fk_results:
                            console.print(f"         - {fk[0]} -> {fk[1]}")
                    
                else:
                    console.print(f"   ‚ùå –¢–∞–±–ª–∏—Ü–∞ {table} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å—Ö–µ–º–µ ags")
                    
            except Exception as e:
                console.print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã {table}: {e}")
        
        cursor.close()
        conn.close()
        
        # –®–∞–≥ 7: –ê–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø–æ–ª–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
        console.print("\n[bold blue]üìä –®–ê–ì 7: –ê–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø–æ–ª–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏[/bold blue]")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
        health = coordinator.get_system_health()
        console.print(f"   üè• –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã: {health['overall_status']}")
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        metrics = coordinator.monitor.get_real_time_metrics()
        console.print(f"   üìä –ú–µ—Ç—Ä–∏–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏: {len(metrics.get('metrics', {}))}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        migration_order = coordinator.dependency_analyzer.get_migration_order()
        console.print(f"   üìã –ü–æ—Ä—è–¥–æ–∫ –º–∏–≥—Ä–∞—Ü–∏–∏: {len(migration_order)} —Ç–∞–±–ª–∏—Ü")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        cycles = coordinator.dependency_analyzer.detect_circular_dependencies()
        console.print(f"   üîÑ –¶–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {len(cycles)}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        critical_deps = coordinator.dependency_analyzer.get_critical_dependencies()
        console.print(f"   ‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {len(critical_deps)}")
        
        return True
        
    except Exception as e:
        console.print(f"[red]‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}[/red]")
        return False
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä
        coordinator.close()

def analyze_readiness_for_full_migration():
    """–ê–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø–æ–ª–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö 166 —Ç–∞–±–ª–∏—Ü"""
    console.print("\n[bold blue]üìä –ê–ù–ê–õ–ò–ó –ì–û–¢–û–í–ù–û–°–¢–ò –ö –ü–û–õ–ù–û–ô –ú–ò–ì–†–ê–¶–ò–ò[/bold blue]")
    
    coordinator = MigrationCoordinator()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        coordinator.initialize_migration_system()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –º–∏–≥—Ä–∞—Ü–∏–∏
        plan = coordinator.get_migration_plan()
        
        # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –∞–Ω–∞–ª–∏–∑–∞
        analysis_table = Table(title="–ê–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø–æ–ª–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏")
        analysis_table.add_column("–ö—Ä–∏—Ç–µ—Ä–∏–π", style="cyan")
        analysis_table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="green")
        analysis_table.add_column("–°—Ç–∞—Ç—É—Å", style="yellow")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
        criteria = [
            ("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü", f"{plan['total_tables']}", "‚úÖ –ì–æ—Ç–æ–≤–æ"),
            ("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", f"{plan['critical_dependencies']}", "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è"),
            ("–û—Ü–µ–Ω–æ—á–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", f"{plan['estimated_duration_hours']:.1f} —á–∞—Å–æ–≤", "üìä –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"),
            ("–¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", "0", "‚úÖ –û—Ç–ª–∏—á–Ω–æ"),
            ("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã", "HEALTHY", "‚úÖ –ì–æ—Ç–æ–≤–æ"),
            ("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", "–ê–∫—Ç–∏–≤–µ–Ω", "‚úÖ –ì–æ—Ç–æ–≤–æ"),
            ("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", "–ó–∞–≤–µ—Ä—à—ë–Ω", "‚úÖ –ì–æ—Ç–æ–≤–æ"),
            ("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º", "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", "‚úÖ –ì–æ—Ç–æ–≤–æ")
        ]
        
        for criterion, value, status in criteria:
            analysis_table.add_row(criterion, value, status)
        
        console.print(analysis_table)
        
        # –í—ã–≤–æ–¥—ã
        console.print("\n[bold green]üìã –í–´–í–û–î–´ –û –ì–û–¢–û–í–ù–û–°–¢–ò:[/bold green]")
        
        console.print("‚úÖ **–°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–û–õ–ù–û–ô –ú–ò–ì–†–ê–¶–ò–ò**")
        console.print("   ‚Ä¢ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
        console.print("   ‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        console.print("   ‚Ä¢ –¶–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        console.print("   ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        console.print("   ‚Ä¢ –ü–ª–∞–Ω –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω")
        
        console.print("\n‚ö†Ô∏è **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:**")
        console.print("   ‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ 84 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
        console.print("   ‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –Ω–∞ 16.6 —á–∞—Å–æ–≤")
        console.print("   ‚Ä¢ –û–±–µ—Å–ø–µ—á–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º")
        console.print("   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        
        console.print("\nüöÄ **–ì–û–¢–û–í–ù–û–°–¢–¨ –ö –ó–ê–ü–£–°–ö–£:**")
        console.print("   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö 166 —Ç–∞–±–ª–∏—Ü")
        console.print("   ‚Ä¢ –í—Å–µ –º–æ–¥—É–ª–∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        console.print("   ‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å –º–∏–≥—Ä–∞—Ü–∏–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è")
        
        return True
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {e}[/red]")
        return False
    finally:
        coordinator.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    console.print(Panel.fit(
        "[bold green]üß™ –¢–ï–°–¢–û–í–´–ô –ü–ï–†–ï–ù–û–° –¢–†–Å–• –¢–ê–ë–õ–ò–¶[/bold green]\n"
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∫ –ø–æ–ª–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏",
        border_style="green"
    ))
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç –ø–µ—Ä–µ–Ω–æ—Å–∞
    console.print("\n" + "="*80)
    console.print("[bold blue]–û–°–ù–û–í–ù–û–ô –¢–ï–°–¢: –ü–µ—Ä–µ–Ω–æ—Å —Ç—Ä—ë—Ö —Ç–∞–±–ª–∏—Ü[/bold blue]")
    console.print("="*80)
    
    migration_test_success = test_real_migration()
    
    # –ê–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    console.print("\n" + "="*80)
    console.print("[bold blue]–ê–ù–ê–õ–ò–ó –ì–û–¢–û–í–ù–û–°–¢–ò: –ü–æ–ª–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è[/bold blue]")
    console.print("="*80)
    
    readiness_analysis_success = analyze_readiness_for_full_migration()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
    console.print("\n" + "="*80)
    console.print("[bold blue]üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø[/bold blue]")
    console.print("="*80)
    
    if migration_test_success:
        console.print("[green]‚úÖ –¢–µ—Å—Ç –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ç—Ä—ë—Ö —Ç–∞–±–ª–∏—Ü: –ü–†–û–ô–î–ï–ù[/green]")
    else:
        console.print("[red]‚ùå –¢–µ—Å—Ç –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ç—Ä—ë—Ö —Ç–∞–±–ª–∏—Ü: –ü–†–û–í–ê–õ–ï–ù[/red]")
    
    if readiness_analysis_success:
        console.print("[green]‚úÖ –ê–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: –ó–ê–í–ï–†–®–Å–ù[/green]")
    else:
        console.print("[red]‚ùå –ê–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: –û–®–ò–ë–ö–ê[/red]")
    
    if migration_test_success and readiness_analysis_success:
        console.print("\n[bold green]üéâ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–ê –ö –ú–ò–ì–†–ê–¶–ò–ò![/bold green]")
        console.print("[green]‚úÖ –í—Å–µ 166 —Ç–∞–±–ª–∏—Ü –º–æ–≥—É—Ç –±—ã—Ç—å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã[/green]")
    else:
        console.print("\n[bold red]üí• –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê[/bold red]")

if __name__ == "__main__":
    main()