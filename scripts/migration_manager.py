#!/usr/bin/env python3
"""
FEMCL - –ú–µ–Ω–µ–¥–∂–µ—Ä –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü
–í–µ—Ä—Å–∏—è: 1.0
–ê–≤—Ç–æ—Ä: FEMCL Team
–î–∞—Ç–∞: 2025-01-27

–û–ø–∏—Å–∞–Ω–∏–µ:
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–µ–π —Ç–∞–±–ª–∏—Ü —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é
    –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/migration_manager.py <command> [options]
    
–ö–æ–º–∞–Ω–¥—ã:
    list                    - –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
    migrate <table_name>    - –ú–∏–≥—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    batch <count>           - –ü–∞–∫–µ—Ç–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü
    status                  - –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏
    validate <table_name>   - –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã
    report                  - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
"""

import os
import sys
import argparse
import psycopg2
from datetime import datetime
from dotenv import load_dotenv
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich import print as rprint

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from config.config_loader import ConfigLoader

load_dotenv()
console = Console()

class MigrationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü"""
    
    def __init__(self, config):
        self.config = config
        self.pg_conn_str = self._get_pg_conn_str()
    
    def _get_pg_conn_str(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
        db_config = self.config.get_database_config('postgresql')
        return (
            f"host={db_config['host']} port={db_config['port']} "
            f"dbname={db_config['database']} user={db_config['user']} "
            f"password={db_config['password']}"
        )
    
    def _execute_pg_query(self, query, params=None, fetch_one=False):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ PostgreSQL"""
        with psycopg2.connect(self.pg_conn_str) as conn:
            with conn.cursor() as cursor:
                cursor.execute(query, params)
                if fetch_one:
                    return cursor.fetchone()
                return cursor.fetchall()
    
    def list_tables(self, task_id=2, status='pending'):
        """–°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
        try:
            query = """
            SELECT 
                mt.object_name,
                mt.row_count,
                mt.column_count,
                mt.has_primary_key,
                mt.foreign_key_count,
                ms.current_status
            FROM mcl.mssql_tables mt
            JOIN mcl.migration_status ms ON mt.id = ms.source_table_id
            WHERE mt.task_id = %s AND ms.current_status = %s
            ORDER BY mt.object_name
            """
            
            tables = self._execute_pg_query(query, (task_id, status))
            
            if not tables:
                rprint(f"[yellow]‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã[/yellow]")
                return []
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≤—ã–≤–æ–¥–∞
            table = Table(title=f"üìã –¢–∞–±–ª–∏—Ü—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}' (–ó–∞–¥–∞—á–∞ ID={task_id})")
            table.add_column("‚Ññ", style="cyan", no_wrap=True)
            table.add_column("–¢–∞–±–ª–∏—Ü–∞", style="cyan", no_wrap=True)
            table.add_column("–°—Ç—Ä–æ–∫", justify="right", style="green")
            table.add_column("–ö–æ–ª–æ–Ω–æ–∫", justify="right", style="green")
            table.add_column("PK", style="yellow")
            table.add_column("FK", justify="right", style="blue")
            table.add_column("–°—Ç–∞—Ç—É—Å", style="white")
            
            for i, row in enumerate(tables, 1):
                table.add_row(
                    str(i),
                    row[0],  # object_name
                    str(row[1]),  # row_count
                    str(row[2]),  # column_count
                    "1" if row[3] else "0",  # has_primary_key
                    str(row[4]),  # foreign_key_count
                    row[5]  # current_status
                )
            
            console.print(table)
            rprint(f"üìä –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
            return tables
            
        except Exception as e:
            rprint(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü: {e}[/red]")
            return []
    
    def get_migration_status(self, task_id=2):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        try:
            query = """
            SELECT 
                ms.current_status,
                COUNT(ms.id) as count
            FROM mcl.migration_status ms
            JOIN mcl.mssql_tables mt ON ms.source_table_id = mt.id
            WHERE mt.task_id = %s
            GROUP BY ms.current_status
            ORDER BY ms.current_status
            """
            
            status_summary = self._execute_pg_query(query, (task_id,))
            
            if not status_summary:
                rprint("[yellow]‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω[/yellow]")
                return {}
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≤—ã–≤–æ–¥–∞
            table = Table(title="üìä –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏")
            table.add_column("–°—Ç–∞—Ç—É—Å", style="cyan")
            table.add_column("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", justify="right", style="green")
            
            total_tables = 0
            status_dict = {}
            
            for row in status_summary:
                status = row[0]
                count = row[1]
                total_tables += count
                status_dict[status] = count
                
                table.add_row(status, str(count))
            
            console.print(table)
            rprint(f"üìä –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü: {total_tables}")
            
            return status_dict
            
        except Exception as e:
            rprint(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}[/red]")
            return {}
    
    def validate_table(self, table_name):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ PostgreSQL
            exists_query = """
            SELECT EXISTS (
                SELECT 1 FROM information_schema.tables 
                WHERE table_schema = 'ags' AND table_name = %s
            )
            """
            table_exists = self._execute_pg_query(exists_query, (table_name,), fetch_one=True)[0]
            
            if not table_exists:
                rprint(f"[red]‚ùå –¢–∞–±–ª–∏—Ü–∞ {table_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ PostgreSQL[/red]")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ
            info_query = """
            SELECT 
                column_name,
                data_type,
                is_nullable,
                ordinal_position
            FROM information_schema.columns 
            WHERE table_schema = 'ags' AND table_name = %s
            ORDER BY ordinal_position
            """
            columns = self._execute_pg_query(info_query, (table_name,))
            
            rprint(f"[green]‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table_name} –Ω–∞–π–¥–µ–Ω–∞ –≤ PostgreSQL[/green]")
            rprint(f"üìä –ö–æ–ª–æ–Ω–æ–∫: {len(columns)}")
            
            # –í—ã–≤–æ–¥–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
            table = Table(title=f"üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã {table_name}")
            table.add_column("–ü–æ–∑–∏—Ü–∏—è", style="cyan", no_wrap=True)
            table.add_column("–ö–æ–ª–æ–Ω–∫–∞", style="magenta")
            table.add_column("–¢–∏–ø", style="green")
            table.add_column("NULL", style="yellow")
            
            for col in columns:
                table.add_row(
                    str(col[3]),  # ordinal_position
                    col[0],  # column_name
                    col[1],  # data_type
                    "YES" if col[2] else "NO"  # is_nullable
                )
            
            console.print(table)
            return True
            
        except Exception as e:
            rprint(f"[red]‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}[/red]")
            return False
    
    def generate_report(self, task_id=2):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            status_dict = self.get_migration_status(task_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            detail_query = """
            SELECT 
                mt.object_name,
                ms.current_status,
                ms.created_at,
                ms.updated_at,
                pt.migration_date,
                pt.error_message
            FROM mcl.mssql_tables mt
            JOIN mcl.migration_status ms ON mt.id = ms.source_table_id
            LEFT JOIN mcl.postgres_tables pt ON mt.id = pt.source_table_id
            WHERE mt.task_id = %s
            ORDER BY ms.current_status, mt.object_name
            """
            
            details = self._execute_pg_query(detail_query, (task_id,))
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
            report = f"""
# üìä –û–¢–ß–ï–¢ –û –ú–ò–ì–†–ê–¶–ò–ò (–ó–∞–¥–∞—á–∞ ID={task_id})
*–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*

## üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
"""
            
            for status, count in status_dict.items():
                report += f"- **{status}**: {count} —Ç–∞–±–ª–∏—Ü\n"
            
            report += f"\n## üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"
            
            current_status = None
            for row in details:
                table_name, status, created_at, updated_at, migration_date, error_message = row
                
                if status != current_status:
                    report += f"### {status.upper()}\n\n"
                    current_status = status
                
                report += f"**{table_name}**\n"
                report += f"- –°–æ–∑–¥–∞–Ω–æ: {created_at}\n"
                report += f"- –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_at}\n"
                if migration_date:
                    report += f"- –î–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {migration_date}\n"
                if error_message:
                    report += f"- –û—à–∏–±–∫–∞: {error_message}\n"
                report += "\n"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
            report_filename = f"migration_report_{task_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
            report_path = os.path.join(os.path.dirname(__file__), '..', 'reports', report_filename)
            
            os.makedirs(os.path.dirname(report_path), exist_ok=True)
            
            with open(report_path, 'w', encoding='utf-8') as f:
                f.write(report)
            
            rprint(f"[green]‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}[/green]")
            return report_path
            
        except Exception as e:
            rprint(f"[red]‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}[/red]")
            return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='FEMCL - –ú–µ–Ω–µ–¥–∂–µ—Ä –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü')
    parser.add_argument('command', choices=['list', 'migrate', 'batch', 'status', 'validate', 'report'],
                       help='–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
    parser.add_argument('--table', help='–ò–º—è —Ç–∞–±–ª–∏—Ü—ã')
    parser.add_argument('--count', type=int, default=5, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏')
    parser.add_argument('--task-id', type=int, default=2, help='ID –∑–∞–¥–∞—á–∏ –º–∏–≥—Ä–∞—Ü–∏–∏')
    parser.add_argument('--status', default='pending', help='–°—Ç–∞—Ç—É—Å —Ç–∞–±–ª–∏—Ü –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏')
    
    args = parser.parse_args()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_loader = ConfigLoader()
    config = config_loader.load_config()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    manager = MigrationManager(config)
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    if args.command == 'list':
        manager.list_tables(args.task_id, args.status)
    elif args.command == 'status':
        manager.get_migration_status(args.task_id)
    elif args.command == 'validate':
        if not args.table:
            rprint("[red]‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è —Ç–∞–±–ª–∏—Ü—ã —Å --table[/red]")
            sys.exit(1)
        manager.validate_table(args.table)
    elif args.command == 'report':
        manager.generate_report(args.task_id)
    else:
        rprint(f"[yellow]‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ '{args.command}' –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞[/yellow]")

if __name__ == "__main__":
    main()