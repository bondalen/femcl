#!/usr/bin/env python3
"""
FEMCL - –°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –∑–∞–¥–∞—á–∏ ID=2

–û–ë–ù–û–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç ConnectionManager
–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –Ω–∞ 'pending' –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
"""
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, str(Path(__file__).parent.parent / "src" / "code"))

from infrastructure.classes import ConnectionManager
from rich.console import Console
from rich.table import Table
from rich.panel import Panel

console = Console()


def reset_migration_status(manager: ConnectionManager, task_id: int = 2):
    """
    –°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –∑–∞–¥–∞—á–∏.
    
    Args:
        manager: ConnectionManager —Å –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
        task_id: ID –∑–∞–¥–∞—á–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2)
    
    Returns:
        bool: True –µ—Å–ª–∏ —Å–±—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω
    """
    try:
        conn = manager.get_postgres_connection()
        
        console.print(Panel.fit(
            "[bold blue]üîÑ FEMCL - –°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏[/bold blue]",
            border_style="blue"
        ))
        console.print(f"[blue]–ó–∞–¥–∞—á–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: ID={task_id}[/blue]")
        
        with conn.cursor() as cur:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            cur.execute("""
                SELECT 
                    migration_status,
                    COUNT(*) as count
                FROM mcl.mssql_tables 
                WHERE task_id = %s
                GROUP BY migration_status
                ORDER BY migration_status
            """, (task_id,))
            
            current_status = cur.fetchall()
            
            console.print("\n[blue]üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ç–∞–±–ª–∏—Ü:[/blue]")
            status_table = Table(title="–°—Ç–∞—Ç—É—Å –¥–æ —Å–±—Ä–æ—Å–∞")
            status_table.add_column("–°—Ç–∞—Ç—É—Å", style="cyan")
            status_table.add_column("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", style="green")
            
            for status, count in current_status:
                status_table.add_row(status, str(count))
            
            console.print(status_table)
            
            # –°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –Ω–∞ 'pending'
            cur.execute("""
                UPDATE mcl.mssql_tables 
                SET 
                    migration_status = 'pending',
                    migration_date = NULL,
                    error_message = NULL
                WHERE task_id = %s
            """, (task_id,))
            
            affected_rows = cur.rowcount
            
            # –°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –≤ postgres_tables
            cur.execute("""
                UPDATE mcl.postgres_tables 
                SET 
                    migration_status = 'pending',
                    migration_date = NULL,
                    error_message = NULL
                WHERE source_table_id IN (
                    SELECT id FROM mcl.mssql_tables WHERE task_id = %s
                )
            """, (task_id,))
            
            postgres_affected = cur.rowcount
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            conn.commit()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            cur.execute("""
                SELECT 
                    migration_status,
                    COUNT(*) as count
                FROM mcl.mssql_tables 
                WHERE task_id = %s
                GROUP BY migration_status
                ORDER BY migration_status
            """, (task_id,))
            
            new_status = cur.fetchall()
            
            console.print("\n[green]‚úÖ –°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ![/green]")
            console.print(f"[green]üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ MS SQL —Ç–∞–±–ª–∏—Ü: {affected_rows}[/green]")
            console.print(f"[green]üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ PostgreSQL —Ç–∞–±–ª–∏—Ü: {postgres_affected}[/green]")
            
            console.print("\n[blue]üìä –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å —Ç–∞–±–ª–∏—Ü:[/blue]")
            new_status_table = Table(title="–°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞")
            new_status_table.add_column("–°—Ç–∞—Ç—É—Å", style="cyan")
            new_status_table.add_column("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", style="green")
            
            for status, count in new_status:
                new_status_table.add_row(status, str(count))
            
            console.print(new_status_table)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ —Å—Ç–∞—Ç—É—Å–µ 'pending'
            pending_count = sum(count for status, count in new_status if status == 'pending')
            total_count = sum(count for status, count in new_status)
            
            if pending_count == total_count:
                console.print(f"\n[green]‚úÖ –í—Å–µ {total_count} —Ç–∞–±–ª–∏—Ü —Å–±—Ä–æ—à–µ–Ω—ã –Ω–∞ —Å—Ç–∞—Ç—É—Å 'pending'[/green]")
                console.print("[green]üöÄ –ì–æ—Ç–æ–≤–æ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –º–∏–≥—Ä–∞—Ü–∏–∏![/green]")
                return True
            else:
                console.print(f"\n[yellow]‚ö†Ô∏è –ù–µ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–±—Ä–æ—à–µ–Ω—ã: {pending_count}/{total_count}[/yellow]")
                return False
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞: {e}[/red]")
        conn.rollback()
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ConnectionManager (task_id=2 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        manager = ConnectionManager()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ
        info = manager.get_connection_info()
        console.print(f"[green]‚úÖ –ü—Ä–æ—Ñ–∏–ª—å: {info['profile_name']} (task_id={info['task_id']})[/green]\n")
        
        # –°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞
        success = reset_migration_status(manager, task_id=info['task_id'])
        
        if success:
            console.print("\n[bold green]üéâ –°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ![/bold green]")
            console.print("[blue]üìã –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–¥–∞—á–∏ ID=2 –≥–æ—Ç–æ–≤—ã –∫ –º–∏–≥—Ä–∞—Ü–∏–∏[/blue]")
        else:
            console.print("\n[bold red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏[/bold red]")
            console.print("[yellow]‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞[/yellow]")
        
        return success
        
    except ValueError as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}[/red]")
        return False
    except Exception as e:
        console.print(f"[red]‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}[/red]")
        return False
    finally:
        if 'manager' in locals():
            manager.close_all_connections()


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
