#!/usr/bin/env python3
"""
FEMCL - –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
–í–µ—Ä—Å–∏—è: 1.0
–ê–≤—Ç–æ—Ä: FEMCL Team
–î–∞—Ç–∞: 2025-01-27

–û–ø–∏—Å–∞–Ω–∏–µ:
    –ü—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
    —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã FEMCL.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/simple_migrate.py <table_name> [--force]
    
–ü—Ä–∏–º–µ—Ä—ã:
    python scripts/simple_migrate.py accnt
    python scripts/simple_migrate.py cn --force
"""

import os
import sys
import argparse
import pyodbc
import psycopg2
from datetime import datetime
from dotenv import load_dotenv
from rich.console import Console
from rich.panel import Panel
from rich import print as rprint

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from config.config_loader import ConfigLoader

load_dotenv()
console = Console()

class SimpleTableMigrator:
    """–ü—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü"""
    
    def __init__(self, config_loader):
        self.config_loader = config_loader
        self.mssql_config = config_loader.get_database_config('mssql')
        self.pg_config = config_loader.get_database_config('postgres')
        
    def get_mssql_connection(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MS SQL Server"""
        conn_str = (
            f"DRIVER={{ODBC Driver 17 for SQL Server}};"
            f"SERVER={self.mssql_config['server']},{self.mssql_config['port']};"
            f"DATABASE={self.mssql_config['database']};"
            f"UID={self.mssql_config['user']};"
            f"PWD={self.mssql_config['password']}"
        )
        return pyodbc.connect(conn_str)
    
    def get_pg_connection(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
        conn_str = (
            f"host={self.pg_config['host']} port={self.pg_config['port']} "
            f"dbname={self.pg_config['database']} user={self.pg_config['user']} "
            f"password={self.pg_config['password']}"
        )
        return psycopg2.connect(conn_str)
    
    def check_table_exists_mssql(self, table_name):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –≤ MS SQL Server"""
        try:
            with self.get_mssql_connection() as conn:
                cursor = conn.cursor()
                query = f"""
                SELECT COUNT(*) 
                FROM {self.mssql_config['database']}.information_schema.tables 
                WHERE table_schema = 'ags' AND table_name = '{table_name}'
                """
                cursor.execute(query)
                return cursor.fetchone()[0] > 0
        except Exception as e:
            rprint(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –≤ MS SQL: {e}[/red]")
            return False
    
    def get_table_metadata(self, table_name):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã FEMCL"""
        try:
            with self.get_pg_connection() as conn:
                cursor = conn.cursor()
                query = f"""
                SELECT 
                    pc.column_name,
                    pc.ordinal_position,
                    pc.is_identity,
                    pdt.typname_with_params as postgres_type,
                    mc.column_name as source_column_name
                FROM mcl.postgres_tables pt
                JOIN mcl.postgres_columns pc ON pt.id = pc.table_id
                JOIN mcl.postgres_derived_types pdt ON pc.postgres_data_type_id = pdt.id
                LEFT JOIN mcl.mssql_columns mc ON pc.source_column_id = mc.id
                WHERE pt.object_name = '{table_name}'
                ORDER BY pc.ordinal_position
                """
                cursor.execute(query)
                return cursor.fetchall()
        except Exception as e:
            rprint(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}[/red]")
            return None
    
    def generate_ddl(self, table_name, metadata):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è DDL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            ddl_parts = []
            pk_columns = []
            
            for col in metadata:
                col_name = col[0]  # pc.column_name
                col_type = col[3]  # postgres_type
                is_identity = col[2]  # is_identity
                default_value = None  # default_value –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
                col_def = f"    {col_name} {col_type}"
                
                if is_identity:
                    col_def += " GENERATED ALWAYS AS IDENTITY"
                    pk_columns.append(col_name)
                
                if default_value:
                    col_def += f" DEFAULT {default_value}"
                
                ddl_parts.append(col_def)
            
            # –°–æ–∑–¥–∞–µ–º DDL
            ddl = f"CREATE TABLE ags.{table_name} (\n" + ",\n".join(ddl_parts) + "\n);"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á –µ—Å–ª–∏ –µ—Å—Ç—å identity –∫–æ–ª–æ–Ω–∫–∏
            if pk_columns:
                pk_ddl = f"ALTER TABLE ags.{table_name} ADD CONSTRAINT pk_{table_name} PRIMARY KEY ({', '.join(pk_columns)});"
                ddl += "\n" + pk_ddl
            
            return ddl
            
        except Exception as e:
            rprint(f"[red]‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ DDL: {e}[/red]")
            return None
    
    def table_exists_pg(self, table_name):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –≤ PostgreSQL"""
        try:
            with self.get_pg_connection() as conn:
                cursor = conn.cursor()
                query = f"""
                SELECT EXISTS (
                    SELECT 1 FROM information_schema.tables 
                    WHERE table_schema = 'ags' AND table_name = '{table_name}'
                )
                """
                cursor.execute(query)
                return cursor.fetchone()[0]
        except Exception as e:
            rprint(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –≤ PostgreSQL: {e}[/red]")
            return False
    
    def create_table(self, table_name, ddl, force=False):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ PostgreSQL"""
        try:
            if self.table_exists_pg(table_name):
                if force:
                    # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É
                    with self.get_pg_connection() as conn:
                        cursor = conn.cursor()
                        cursor.execute(f"DROP TABLE IF EXISTS ags.{table_name} CASCADE;")
                        conn.commit()
                    rprint(f"[yellow]‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ {table_name} —É–¥–∞–ª–µ–Ω–∞[/yellow]")
                else:
                    rprint(f"[yellow]‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ {table_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç[/yellow]")
                    return True
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            with self.get_pg_connection() as conn:
                cursor = conn.cursor()
                cursor.execute(ddl)
                conn.commit()
            
            rprint(f"[green]‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table_name} —Å–æ–∑–¥–∞–Ω–∞[/green]")
            return True
            
        except Exception as e:
            rprint(f"[red]‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}[/red]")
            return False
    
    def migrate_data(self, table_name, metadata):
        """–ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ MS SQL –≤ PostgreSQL"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è SELECT –∏ INSERT
            source_columns = [col[4] for col in metadata if col[4]]  # source_column_name
            target_columns = [col[0] for col in metadata]  # column_name
            
            if not source_columns:
                rprint(f"[red]‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∏—Å—Ö–æ–¥–Ω—ã–µ –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã {table_name}[/red]")
                return False
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã
            select_query = f"SELECT {', '.join(source_columns)} FROM ags.{table_name}"
            insert_query = f"INSERT INTO ags.{table_name} ({', '.join(target_columns)}) OVERRIDING SYSTEM VALUE VALUES ({', '.join(['%s'] * len(target_columns))})"
            
            rprint(f"[blue]üì¶ –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ MS SQL –≤ PostgreSQL...[/blue]")
            
            with self.get_mssql_connection() as mssql_conn:
                mssql_cursor = mssql_conn.cursor()
                mssql_cursor.execute(select_query)
                
                with self.get_pg_connection() as pg_conn:
                    pg_cursor = pg_conn.cursor()
                    
                    # –û—Ç–∫–ª—é—á–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –≤—Å—Ç–∞–≤–∫–∏
                    pg_cursor.execute(f"ALTER TABLE ags.{table_name} DISABLE TRIGGER ALL;")
                    
                    row_count = 0
                    for row in mssql_cursor.fetchall():
                        pg_cursor.execute(insert_query, row)
                        row_count += 1
                        
                        if row_count % 1000 == 0:
                            rprint(f"[blue]üìä –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {row_count} —Å—Ç—Ä–æ–∫...[/blue]")
                    
                    pg_conn.commit()
                    pg_cursor.execute(f"ALTER TABLE ags.{table_name} ENABLE TRIGGER ALL;")
                    pg_conn.commit()
                    
                    rprint(f"[green]‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {row_count} —Å—Ç—Ä–æ–∫[/green]")
            
            return True
            
        except Exception as e:
            rprint(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö: {e}[/red]")
            return False
    
    def validate_migration(self, table_name):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
        try:
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
            with self.get_mssql_connection() as mssql_conn:
                mssql_cursor = mssql_conn.cursor()
                mssql_cursor.execute(f"SELECT COUNT(*) FROM ags.{table_name}")
                mssql_count = mssql_cursor.fetchone()[0]
            
            with self.get_pg_connection() as pg_conn:
                pg_cursor = pg_conn.cursor()
                pg_cursor.execute(f"SELECT COUNT(*) FROM ags.{table_name}")
                pg_count = pg_cursor.fetchone()[0]
            
            if mssql_count != pg_count:
                rprint(f"[red]‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫: MS SQL={mssql_count}, PG={pg_count}[/red]")
                return False
            
            rprint(f"[green]‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {pg_count}[/green]")
            return True
            
        except Exception as e:
            rprint(f"[red]‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}[/red]")
            return False
    
    def update_status(self, table_name, status):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        try:
            with self.get_pg_connection() as conn:
                cursor = conn.cursor()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ mcl.migration_status
                cursor.execute(f"""
                    UPDATE mcl.migration_status 
                    SET current_status = '{status}', updated_at = NOW()
                    WHERE table_name = '{table_name}'
                """)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ mcl.postgres_tables
                cursor.execute(f"""
                    UPDATE mcl.postgres_tables 
                    SET migration_status = '{status}', updated_at = NOW()
                    WHERE object_name = '{table_name}'
                """)
                
                conn.commit()
                rprint(f"[green]‚úÖ –°—Ç–∞—Ç—É—Å —Ç–∞–±–ª–∏—Ü—ã {table_name} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{status}'[/green]")
                return True
                
        except Exception as e:
            rprint(f"[red]‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}[/red]")
            return False
    
    def migrate_table(self, table_name, force=False):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã"""
        rprint(Panel(f"[bold blue]üöÄ FEMCL - –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã {table_name}[/bold blue]", expand=False))
        
        start_time = datetime.now()
        
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –≤ MS SQL
            if not self.check_table_exists_mssql(table_name):
                rprint(f"[red]‚ùå –¢–∞–±–ª–∏—Ü–∞ {table_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ MS SQL Server[/red]")
                return False
            
            # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            metadata = self.get_table_metadata(table_name)
            if not metadata:
                rprint(f"[red]‚ùå –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã {table_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã[/red]")
                return False
            
            rprint(f"[green]‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(metadata)} –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö[/green]")
            
            # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è DDL
            ddl = self.generate_ddl(table_name, metadata)
            if not ddl:
                return False
            
            # 4. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            if not self.create_table(table_name, ddl, force):
                return False
            
            # 5. –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö
            if not self.migrate_data(table_name, metadata):
                return False
            
            # 6. –í–∞–ª–∏–¥–∞—Ü–∏—è
            if not self.validate_migration(table_name):
                return False
            
            # 7. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            self.update_status(table_name, "completed")
            
            end_time = datetime.now()
            duration = end_time - start_time
            
            rprint(f"[green]‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table_name} —É—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ {duration}[/green]")
            return True
            
        except Exception as e:
            rprint(f"[red]‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}[/red]")
            self.update_status(table_name, "failed")
            return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='FEMCL - –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü')
    parser.add_argument('table_name', help='–ò–º—è —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏')
    parser.add_argument('--force', action='store_true', help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã')
    
    args = parser.parse_args()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_loader = ConfigLoader()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ç–æ—Ä–∞
    migrator = SimpleTableMigrator(config_loader)
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    success = migrator.migrate_table(
        table_name=args.table_name,
        force=args.force
    )
    
    if success:
        rprint("[bold green]‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ![/bold green]")
        sys.exit(0)
    else:
        rprint("[bold red]‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏![/bold red]")
        sys.exit(1)

if __name__ == "__main__":
    main()