#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã cn
"""
import psycopg2
import pyodbc
import pandas as pd
from rich.console import Console

console = Console()

def transfer_data_simple():
    """–ü—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö"""
    console.print("[blue]üì¶ –ü—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã cn[/blue]")
    
    # MS SQL Server
    mssql_conn = pyodbc.connect(
        "DRIVER={ODBC Driver 17 for SQL Server};"
        "SERVER=localhost,1433;"
        "DATABASE=FishEye;"
        "UID=sa;"
        "PWD=kolob_OK1;"
        "TrustServerCertificate=yes;"
    )
    
    # PostgreSQL
    pg_conn = psycopg2.connect(
        host="localhost",
        port=5432,
        dbname="fish_eye",
        user="postgres",
        password="postgres"
    )
    
    try:
        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ MS SQL Server
        console.print("[blue]üì• –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ MS SQL Server...[/blue]")
        df = pd.read_sql("SELECT * FROM ags.cn ORDER BY cn_key", mssql_conn)
        console.print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(df)}")
        
        if len(df) == 0:
            console.print("[red]‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ MS SQL Server[/red]")
            return False
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫
        console.print("[blue]üìã –ü–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö:[/blue]")
        for i in range(min(3, len(df))):
            row = df.iloc[i]
            console.print(f"  {i+1}. cn_key={row['cn_key']}, cn_number={row['cn_number']}")
        
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ PostgreSQL
        console.print("[yellow]‚ö†Ô∏è –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –≤ PostgreSQL...[/yellow]")
        pg_cursor = pg_conn.cursor()
        pg_cursor.execute("TRUNCATE TABLE ags.cn")
        pg_conn.commit()
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
        console.print("[blue]üì§ –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL...[/blue]")
        
        insert_sql = """
        INSERT INTO ags.cn (cn_key, cn_number, cn_date, cn_note, cnMark, cnTimeOfEntry, cnName) 
        VALUES (%s, %s, %s, %s, %s, %s, %s)
        """
        
        total_inserted = 0
        for index, row in df.iterrows():
            try:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                values = (
                    int(row['cn_key']) if pd.notna(row['cn_key']) else None,
                    str(row['cn_number']) if pd.notna(row['cn_number']) else None,
                    row['cn_date'] if pd.notna(row['cn_date']) else None,
                    str(row['cn_note']) if pd.notna(row['cn_note']) else None,
                    int(row['cnMark']) if pd.notna(row['cnMark']) else None,
                    row['cnTimeOfEntry'] if pd.notna(row['cnTimeOfEntry']) else None,
                    str(row['cnName']) if pd.notna(row['cnName']) else None
                )
                
                pg_cursor.execute(insert_sql, values)
                total_inserted += 1
                
                if total_inserted % 100 == 0:
                    console.print(f"[blue]üìä –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ —Å—Ç—Ä–æ–∫: {total_inserted}[/blue]")
                    
            except Exception as e:
                console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {index}: {e}[/red]")
                continue
        
        pg_conn.commit()
        console.print(f"[green]‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã: {total_inserted} —Å—Ç—Ä–æ–∫[/green]")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        pg_cursor.execute("SELECT COUNT(*) FROM ags.cn")
        final_count = pg_cursor.fetchone()[0]
        console.print(f"[blue]üìä –ò—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ PostgreSQL: {final_count}[/blue]")
        
        if final_count == len(df):
            console.print("[green]‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã![/green]")
            return True
        else:
            console.print(f"[red]‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {final_count} != {len(df)}[/red]")
            return False
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö: {e}[/red]")
        return False
    
    finally:
        mssql_conn.close()
        pg_conn.close()

if __name__ == "__main__":
    success = transfer_data_simple()
    if success:
        console.print("[green]üéâ –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ![/green]")
    else:
        console.print("[red]‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö[/red]")