#!/usr/bin/env python3
"""
FEMCL - –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã accnt
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã accnt –∏–∑ MS SQL Server –≤ PostgreSQL
"""
import psycopg2
import pyodbc
import yaml
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from datetime import datetime

console = Console()

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        with open('/home/alex/projects/sql/femcl/config/config.yaml', 'r', encoding='utf-8') as file:
            config = yaml.safe_load(file)
        return config
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}[/red]")
        return None

def validate_source_table():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏—Å—Ö–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤ MS SQL Server"""
    console.print("[blue]üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∏—Å—Ö–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã accnt –≤ MS SQL Server...[/blue]")
    
    config = load_config()
    if not config:
        return None
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MS SQL Server
        mssql_config = config['database']['mssql']
        connection_string = (
            f"DRIVER={{{mssql_config['driver']}}};"
            f"SERVER={mssql_config['server']},{mssql_config['port']};"
            f"DATABASE={mssql_config['database']};"
            f"UID={mssql_config['user']};"
            f"PWD={mssql_config['password']};"
            f"TrustServerCertificate={'yes' if mssql_config['trust_certificate'] else 'no'};"
        )
        
        conn = pyodbc.connect(connection_string)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("""
            SELECT COUNT(*) 
            FROM information_schema.tables 
            WHERE table_schema = 'ags' AND table_name = 'accnt'
        """)
        table_exists = cursor.fetchone()[0] > 0
        
        if not table_exists:
            console.print("[red]‚ùå –¢–∞–±–ª–∏—Ü–∞ accnt –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ MS SQL Server[/red]")
            return None
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        cursor.execute("""
            SELECT 
                COLUMN_NAME,
                DATA_TYPE,
                IS_NULLABLE,
                CHARACTER_MAXIMUM_LENGTH,
                NUMERIC_PRECISION,
                NUMERIC_SCALE,
                ORDINAL_POSITION
            FROM information_schema.columns 
            WHERE table_schema = 'ags' AND table_name = 'accnt'
            ORDER BY ORDINAL_POSITION
        """)
        columns = cursor.fetchall()
        
        # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT COUNT(*) FROM ags.accnt")
        row_count = cursor.fetchone()[0]
        
        # –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞
        cursor.execute("""
            SELECT COLUMN_NAME
            FROM information_schema.key_column_usage
            WHERE table_schema = 'ags' AND table_name = 'accnt' 
            AND constraint_name LIKE 'PK_%'
        """)
        pk_columns = [row[0] for row in cursor.fetchall()]
        
        # –ê–Ω–∞–ª–∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        cursor.execute("""
            SELECT account_key, COUNT(*) as cnt
            FROM ags.accnt
            GROUP BY account_key
            HAVING COUNT(*) > 1
        """)
        duplicate_keys = cursor.fetchall()
        
        # –ê–Ω–∞–ª–∏–∑ NULL –∑–Ω–∞—á–µ–Ω–∏–π
        cursor.execute("""
            SELECT 
                SUM(CASE WHEN account_key IS NULL THEN 1 ELSE 0 END) as null_keys,
                SUM(CASE WHEN account_num IS NULL THEN 1 ELSE 0 END) as null_nums,
                SUM(CASE WHEN account_name IS NULL THEN 1 ELSE 0 END) as null_names
            FROM ags.accnt
        """)
        null_analysis = cursor.fetchone()
        
        # –û–±—Ä–∞–∑–µ—Ü –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT TOP 5 * FROM ags.accnt ORDER BY account_key")
        sample_data = cursor.fetchall()
        
        conn.close()
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        console.print(f"[green]‚úÖ –¢–∞–±–ª–∏—Ü–∞ accnt –Ω–∞–π–¥–µ–Ω–∞ –≤ MS SQL Server[/green]")
        console.print(f"[blue]üìä –°—Ç—Ä–æ–∫: {row_count}[/blue]")
        console.print(f"[blue]üìä –ö–æ–ª–æ–Ω–æ–∫: {len(columns)}[/blue]")
        console.print(f"[blue]üìä –ü–µ—Ä–≤–∏—á–Ω—ã—Ö –∫–ª—é—á–µ–π: {len(pk_columns)}[/blue]")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
        if duplicate_keys:
            console.print(f"[red]‚ùå –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞: {len(duplicate_keys)}[/red]")
        else:
            console.print(f"[green]‚úÖ –ü–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á —É–Ω–∏–∫–∞–ª–µ–Ω[/green]")
        
        if null_analysis[0] > 0:
            console.print(f"[red]‚ùå –ù–∞–π–¥–µ–Ω—ã NULL –∑–Ω–∞—á–µ–Ω–∏—è –≤ account_key: {null_analysis[0]}[/red]")
        else:
            console.print(f"[green]‚úÖ –ù–µ—Ç NULL –∑–Ω–∞—á–µ–Ω–∏–π –≤ account_key[/green]")
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        table = Table(title="–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏—Å—Ö–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã accnt")
        table.add_column("–ü–æ–∑–∏—Ü–∏—è", style="cyan", width=8)
        table.add_column("–ö–æ–ª–æ–Ω–∫–∞", style="green")
        table.add_column("–¢–∏–ø", style="yellow")
        table.add_column("NULL", style="blue", width=6)
        table.add_column("–î–ª–∏–Ω–∞", style="magenta", width=8)
        
        for col in columns:
            length = col[3] if col[3] else ""
            table.add_row(
                str(col[6]),  # ORDINAL_POSITION
                col[0],       # COLUMN_NAME
                col[1],       # DATA_TYPE
                col[2],       # IS_NULLABLE
                str(length)   # CHARACTER_MAXIMUM_LENGTH
            )
        
        console.print(table)
        
        # –û–±—Ä–∞–∑–µ—Ü –¥–∞–Ω–Ω—ã—Ö
        if sample_data:
            console.print("\n[blue]üìã –û–±—Ä–∞–∑–µ—Ü –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:[/blue]")
            sample_table = Table(title="–ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ –∏–∑ MS SQL Server")
            sample_table.add_column("account_key", style="cyan")
            sample_table.add_column("account_num", style="green")
            sample_table.add_column("account_name", style="yellow")
            
            for row in sample_data:
                sample_table.add_row(str(row[0]), str(row[1]), str(row[2]))
            
            console.print(sample_table)
        
        return {
            'exists': True,
            'columns': columns,
            'row_count': row_count,
            'pk_columns': pk_columns,
            'duplicate_keys': duplicate_keys,
            'null_analysis': null_analysis,
            'sample_data': sample_data
        }
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏—Å—Ö–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã: {e}[/red]")
        return None

def validate_target_table():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–ª–µ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤ PostgreSQL"""
    console.print("[blue]üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–ª–µ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã accnt –≤ PostgreSQL...[/blue]")
    
    try:
        conn = psycopg2.connect(
            host="localhost",
            port=5432,
            dbname="fish_eye",
            user="postgres",
            password="postgres"
        )
        
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("""
            SELECT EXISTS (
                SELECT 1 FROM information_schema.tables 
                WHERE table_schema = 'ags' AND table_name = 'accnt'
            )
        """)
        table_exists = cursor.fetchone()[0]
        
        if not table_exists:
            console.print("[red]‚ùå –¢–∞–±–ª–∏—Ü–∞ accnt –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ PostgreSQL[/red]")
            return None
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        cursor.execute("""
            SELECT 
                column_name,
                data_type,
                is_nullable,
                character_maximum_length,
                numeric_precision,
                numeric_scale,
                ordinal_position
            FROM information_schema.columns 
            WHERE table_schema = 'ags' AND table_name = 'accnt'
            ORDER BY ordinal_position
        """)
        columns = cursor.fetchall()
        
        # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT COUNT(*) FROM ags.accnt")
        row_count = cursor.fetchone()[0]
        
        # –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞
        cursor.execute("""
            SELECT column_name
            FROM information_schema.key_column_usage
            WHERE table_schema = 'ags' AND table_name = 'accnt' 
            AND constraint_name LIKE 'pk_%'
        """)
        pk_columns = [row[0] for row in cursor.fetchall()]
        
        # –ê–Ω–∞–ª–∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        cursor.execute("""
            SELECT account_key, COUNT(*) as cnt
            FROM ags.accnt
            GROUP BY account_key
            HAVING COUNT(*) > 1
        """)
        duplicate_keys = cursor.fetchall()
        
        # –ê–Ω–∞–ª–∏–∑ NULL –∑–Ω–∞—á–µ–Ω–∏–π
        cursor.execute("""
            SELECT 
                SUM(CASE WHEN account_key IS NULL THEN 1 ELSE 0 END) as null_keys,
                SUM(CASE WHEN account_num IS NULL THEN 1 ELSE 0 END) as null_nums,
                SUM(CASE WHEN account_name IS NULL THEN 1 ELSE 0 END) as null_names
            FROM ags.accnt
        """)
        null_analysis = cursor.fetchone()
        
        # –û–±—Ä–∞–∑–µ—Ü –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT * FROM ags.accnt ORDER BY account_key LIMIT 5")
        sample_data = cursor.fetchall()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
        cursor.execute("""
            SELECT indexname, indexdef
            FROM pg_indexes 
            WHERE schemaname = 'ags' AND tablename = 'accnt'
        """)
        indexes = cursor.fetchall()
        
        conn.close()
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        console.print(f"[green]‚úÖ –¢–∞–±–ª–∏—Ü–∞ accnt –Ω–∞–π–¥–µ–Ω–∞ –≤ PostgreSQL[/green]")
        console.print(f"[blue]üìä –°—Ç—Ä–æ–∫: {row_count}[/blue]")
        console.print(f"[blue]üìä –ö–æ–ª–æ–Ω–æ–∫: {len(columns)}[/blue]")
        console.print(f"[blue]üìä –ü–µ—Ä–≤–∏—á–Ω—ã—Ö –∫–ª—é—á–µ–π: {len(pk_columns)}[/blue]")
        console.print(f"[blue]üìä –ò–Ω–¥–µ–∫—Å–æ–≤: {len(indexes)}[/blue]")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
        if duplicate_keys:
            console.print(f"[red]‚ùå –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞: {len(duplicate_keys)}[/red]")
        else:
            console.print(f"[green]‚úÖ –ü–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á —É–Ω–∏–∫–∞–ª–µ–Ω[/green]")
        
        if null_analysis[0] > 0:
            console.print(f"[red]‚ùå –ù–∞–π–¥–µ–Ω—ã NULL –∑–Ω–∞—á–µ–Ω–∏—è –≤ account_key: {null_analysis[0]}[/red]")
        else:
            console.print(f"[green]‚úÖ –ù–µ—Ç NULL –∑–Ω–∞—á–µ–Ω–∏–π –≤ account_key[/green]")
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        table = Table(title="–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ü–µ–ª–µ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã accnt")
        table.add_column("–ü–æ–∑–∏—Ü–∏—è", style="cyan", width=8)
        table.add_column("–ö–æ–ª–æ–Ω–∫–∞", style="green")
        table.add_column("–¢–∏–ø", style="yellow")
        table.add_column("NULL", style="blue", width=6)
        table.add_column("–î–ª–∏–Ω–∞", style="magenta", width=8)
        
        for col in columns:
            length = col[3] if col[3] else ""
            table.add_row(
                str(col[6]),  # ORDINAL_POSITION
                col[0],       # COLUMN_NAME
                col[1],       # DATA_TYPE
                col[2],       # IS_NULLABLE
                str(length)   # CHARACTER_MAXIMUM_LENGTH
            )
        
        console.print(table)
        
        # –û–±—Ä–∞–∑–µ—Ü –¥–∞–Ω–Ω—ã—Ö
        if sample_data:
            console.print("\n[blue]üìã –û–±—Ä–∞–∑–µ—Ü —Ü–µ–ª–µ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:[/blue]")
            sample_table = Table(title="–ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ –≤ PostgreSQL")
            sample_table.add_column("account_key", style="cyan")
            sample_table.add_column("account_num", style="green")
            sample_table.add_column("account_name", style="yellow")
            
            for row in sample_data:
                sample_table.add_row(str(row[0]), str(row[1]), str(row[2]))
            
            console.print(sample_table)
        
        # –ò–Ω–¥–µ–∫—Å—ã
        if indexes:
            console.print("\n[blue]üìã –ò–Ω–¥–µ–∫—Å—ã:[/blue]")
            index_table = Table(title="–ò–Ω–¥–µ–∫—Å—ã —Ç–∞–±–ª–∏—Ü—ã accnt")
            index_table.add_column("–ò–º—è", style="cyan")
            index_table.add_column("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", style="green")
            
            for idx in indexes:
                index_table.add_row(idx[0], idx[1])
            
            console.print(index_table)
        
        return {
            'exists': True,
            'columns': columns,
            'row_count': row_count,
            'pk_columns': pk_columns,
            'duplicate_keys': duplicate_keys,
            'null_analysis': null_analysis,
            'sample_data': sample_data,
            'indexes': indexes
        }
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ü–µ–ª–µ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã: {e}[/red]")
        return None

def compare_data_integrity(source_data, target_data):
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –∏—Å—Ö–æ–¥–Ω–æ–π –∏ —Ü–µ–ª–µ–≤–æ–π —Ç–∞–±–ª–∏—Ü–∞–º–∏"""
    console.print("[blue]üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö...[/blue]")
    
    try:
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫
        source_count = source_data['row_count']
        target_count = target_data['row_count']
        
        console.print(f"[blue]üìä –ò—Å—Ö–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞: {source_count} —Å—Ç—Ä–æ–∫[/blue]")
        console.print(f"[blue]üìä –¶–µ–ª–µ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞: {target_count} —Å—Ç—Ä–æ–∫[/blue]")
        
        if source_count == target_count:
            console.print("[green]‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ —Å–æ–≤–ø–∞–¥–∞–µ—Ç[/green]")
        else:
            console.print(f"[red]‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {source_count} vs {target_count}[/red]")
            return False
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        source_columns = [col[0] for col in source_data['columns']]
        target_columns = [col[0] for col in target_data['columns']]
        
        if source_columns == target_columns:
            console.print("[green]‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–ª–æ–Ω–æ–∫ —Å–æ–≤–ø–∞–¥–∞–µ—Ç[/green]")
        else:
            console.print(f"[red]‚ùå –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–ª–æ–Ω–æ–∫ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç[/red]")
            console.print(f"[red]–ò—Å—Ö–æ–¥–Ω—ã–µ: {source_columns}[/red]")
            console.print(f"[red]–¶–µ–ª–µ–≤—ã–µ: {target_columns}[/red]")
            return False
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–≤–∏—á–Ω—ã—Ö –∫–ª—é—á–µ–π
        source_pk = source_data['pk_columns']
        target_pk = target_data['pk_columns']
        
        if source_pk == target_pk:
            console.print("[green]‚úÖ –ü–µ—Ä–≤–∏—á–Ω—ã–µ –∫–ª—é—á–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç[/green]")
        else:
            console.print(f"[red]‚ùå –ü–µ—Ä–≤–∏—á–Ω—ã–µ –∫–ª—é—á–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç[/red]")
            console.print(f"[red]–ò—Å—Ö–æ–¥–Ω—ã–µ: {source_pk}[/red]")
            console.print(f"[red]–¶–µ–ª–µ–≤—ã–µ: {target_pk}[/red]")
            return False
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        source_sample = source_data['sample_data']
        target_sample = target_data['sample_data']
        
        if source_sample == target_sample:
            console.print("[green]‚úÖ –û–±—Ä–∞–∑—Ü—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–∞—é—Ç[/green]")
        else:
            console.print("[yellow]‚ö†Ô∏è –û–±—Ä–∞–∑—Ü—ã –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è (–≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)[/yellow]")
        
        return True
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}[/red]")
        return False

def update_progress_file():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    console.print("[blue]üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏...[/blue]")
    
    try:
        progress_file = "/home/alex/projects/sql/femcl/progress/20250127_143000_migration_progress.md"
        
        # –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
        with open(progress_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ó–∞–º–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–µ accnt —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        old_accnt_info = """1. **accnt** (ags) ‚úÖ –ó–ê–í–ï–†–®–ï–ù–û
   - –ö–æ–ª–æ–Ω–æ–∫: 3
   - –°—Ç—Ä–æ–∫: 16
   - –ü–µ—Ä–≤–∏—á–Ω—ã—Ö –∫–ª—é—á–µ–π: 1
   - –ò–Ω–¥–µ–∫—Å–æ–≤: 1
   - –í–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π: 0
   - –°—Ç–∞—Ç—É—Å: completed
   - –î–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: 27.01.2025 15:00:00
   - –†–µ–∑—É–ª—å—Ç–∞—Ç: –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ
   - –°—Ç—Ä—É–∫—Ç—É—Ä–∞: account_key (PK), account_num, account_name"""
        
        new_accnt_info = f"""1. **accnt** (ags) ‚úÖ –ó–ê–í–ï–†–®–ï–ù–û –ò –í–ê–õ–ò–î–ò–†–û–í–ê–ù–û
   - –ö–æ–ª–æ–Ω–æ–∫: 3
   - –°—Ç—Ä–æ–∫: 16
   - –ü–µ—Ä–≤–∏—á–Ω—ã—Ö –∫–ª—é—á–µ–π: 1
   - –ò–Ω–¥–µ–∫—Å–æ–≤: 1
   - –í–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π: 0
   - –°—Ç–∞—Ç—É—Å: completed
   - –î–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: 27.01.2025 15:00:00
   - –î–∞—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
   - –†–µ–∑—É–ª—å—Ç–∞—Ç: –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–æ
   - –°—Ç—Ä—É–∫—Ç—É—Ä–∞: account_key (PK), account_num, account_name
   - –í–∞–ª–∏–¥–∞—Ü–∏—è: ‚úÖ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
   - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ: ‚úÖ –ò—Å—Ö–æ–¥–Ω—ã–µ –∏ —Ü–µ–ª–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç"""
        
        # –ó–∞–º–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ
        updated_content = content.replace(old_accnt_info, new_accnt_info)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã
        updated_content = updated_content.replace(
            f"**–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:** {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}",
            f"**–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:** {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
        )
        
        # –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        with open(progress_file, 'w', encoding='utf-8') as f:
            f.write(updated_content)
        
        console.print("[green]‚úÖ –§–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏[/green]")
        return True
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}[/red]")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã accnt"""
    console.print(Panel.fit("[bold blue]üîç FEMCL - –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã accnt[/bold blue]", border_style="blue"))
    
    # 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –∏—Å—Ö–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    source_data = validate_source_table()
    if not source_data:
        console.print("[red]‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É[/red]")
        return False
    
    # 2. –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–ª–µ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
    target_data = validate_target_table()
    if not target_data:
        console.print("[red]‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–ª–µ–≤—É—é —Ç–∞–±–ª–∏—Ü—É[/red]")
        return False
    
    # 3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
    integrity_ok = compare_data_integrity(source_data, target_data)
    if not integrity_ok:
        console.print("[red]‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å—é –¥–∞–Ω–Ω—ã—Ö[/red]")
        return False
    
    # 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    if not update_progress_file():
        console.print("[red]‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞[/red]")
        return False
    
    console.print("\n[bold green]üéâ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã accnt –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ![/bold green]")
    console.print("[green]‚úÖ –ò—Å—Ö–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–∞[/green]")
    console.print("[green]‚úÖ –¶–µ–ª–µ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–∞[/green]")
    console.print("[green]‚úÖ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞[/green]")
    console.print("[green]‚úÖ –§–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω[/green]")
    
    return True

if __name__ == "__main__":
    main()