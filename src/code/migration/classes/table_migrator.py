"""
TableMigrator - –ö–ª–∞—Å—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã
"""

from typing import Optional, Dict, Any
import pyodbc
import psycopg2
import psycopg2.extensions
import time
from datetime import datetime


class TableMigrator:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã"""
    
    def __init__(self, table_name: str, config_loader, force: bool = False, verbose: bool = False):
        self.table_name = table_name
        self.config_loader = config_loader
        self.force = force
        self.verbose = verbose
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
        self.mssql_config = config_loader.get_database_config('mssql')
        self.pg_config = config_loader.get_database_config('postgres')
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.mssql_conn: Optional[pyodbc.Connection] = None
        self.pg_conn: Optional[psycopg2.extensions.connection] = None
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏
        self.migration_start_time = None
        self.migration_end_time = None
        self.rows_migrated = 0
        self.errors = []
    
    def get_mssql_connection(self) -> pyodbc.Connection:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MS SQL"""
        if not self.mssql_conn:
            connection_string = (
                f"DRIVER={{{self.mssql_config['driver']}}};"
                f"SERVER={self.mssql_config['server']};"
                f"DATABASE={self.mssql_config['database']};"
                f"UID={self.mssql_config['user']};"
                f"PWD={self.mssql_config['password']}"
            )
            self.mssql_conn = pyodbc.connect(connection_string)
        return self.mssql_conn
    
    def get_pg_connection(self) -> psycopg2.extensions.connection:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
        if not self.pg_conn:
            # –£–±–∏—Ä–∞–µ–º –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            pg_config_clean = {
                'host': self.pg_config['host'],
                'port': self.pg_config['port'], 
                'database': self.pg_config['database'],
                'user': self.pg_config['user'],
                'password': self.pg_config['password']
            }
            self.pg_conn = psycopg2.connect(**pg_config_clean)
        return self.pg_conn
    
    def create_table(self, table_model, force: bool = False) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        return True
    
    def create_indexes(self, table_model) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤"""
        try:
            if not table_model.indexes:
                if self.verbose:
                    print(f"‚ÑπÔ∏è –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã {self.table_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return True
            
            conn = self.get_pg_connection()
            cursor = conn.cursor()
            
            created_count = 0
            failed_count = 0
            
            for index in table_model.indexes:
                try:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã
                    if index.migration_status == "completed":
                        if self.verbose:
                            print(f"‚è≠Ô∏è –ò–Ω–¥–µ–∫—Å {index.name} —É–∂–µ —Å–æ–∑–¥–∞–Ω")
                        continue
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞
                    create_sql = index.generate_create_sql()
                    
                    if self.verbose:
                        print(f"üî® –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å: {index.name}")
                        print(f"   SQL: {create_sql}")
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞
                    if index.is_concurrent:
                        # –î–ª—è concurrent –∏–Ω–¥–µ–∫—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º CONCURRENTLY
                        concurrent_sql = create_sql.replace("CREATE ", "CREATE CONCURRENTLY ")
                        cursor.execute(concurrent_sql)
                    else:
                        cursor.execute(create_sql)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    cursor.execute("""
                        UPDATE mcl.postgres_indexes 
                        SET migration_status = 'completed', 
                            migration_date = NOW()
                        WHERE index_name = %s AND source_index_id IN (
                            SELECT mi.id 
                            FROM mcl.mssql_indexes mi
                            JOIN mcl.mssql_index_columns mic ON mi.id = mic.index_id
                            JOIN mcl.mssql_columns mc ON mic.column_id = mc.id
                            JOIN mcl.mssql_tables mt ON mc.table_id = mt.id
                            WHERE mt.object_name = %s
                        )
                    """, (index.name, self.table_name))
                    
                    conn.commit()
                    created_count += 1
                    
                    if self.verbose:
                        print(f"‚úÖ –ò–Ω–¥–µ–∫—Å {index.name} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                    
                except Exception as e:
                    failed_count += 1
                    error_msg = f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ {index.name}: {e}"
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    try:
                        cursor.execute("""
                            UPDATE mcl.postgres_indexes 
                            SET migration_status = 'failed', 
                                error_message = %s,
                                migration_date = NOW()
                            WHERE index_name = %s AND source_index_id IN (
                                SELECT mi.id 
                                FROM mcl.mssql_indexes mi
                                JOIN mcl.mssql_index_columns mic ON mi.id = mic.index_id
                                JOIN mcl.mssql_columns mc ON mic.column_id = mc.id
                                JOIN mcl.mssql_tables mt ON mc.table_id = mt.id
                                WHERE mt.object_name = %s
                            )
                        """, (error_msg, index.name, self.table_name))
                        conn.commit()
                    except:
                        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
                    
                    if self.verbose:
                        print(f"‚ùå {error_msg}")
                    
                    self.errors.append(error_msg)
            
            cursor.close()
            
            if self.verbose:
                print(f"üìä –°–æ–∑–¥–∞–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤: {created_count}, –æ—à–∏–±–æ–∫: {failed_count}")
            
            return failed_count == 0
            
        except Exception as e:
            if self.verbose:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")
            self.errors.append(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")
            return False
    
    def create_foreign_keys(self, table_model) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
        return True
    
    def create_constraints(self, table_model) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        return True
    
    def create_triggers(self, table_model) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
        return True
    
    def migrate_data(self, table_model) -> bool:
        """–ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö
        return True
    
    def validate_migration(self, table_model) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –º–∏–≥—Ä–∞—Ü–∏–∏
        return True
    
    def migrate(self) -> Dict[str, Any]:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã"""
        self.migration_start_time = datetime.now()
        
        try:
            if self.verbose:
                print(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Ç–∞–±–ª–∏—Ü—ã: {self.table_name}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –≤ MS SQL
            if not self.check_source_table_exists():
                return {
                    'success': False,
                    'error': f'–¢–∞–±–ª–∏—Ü–∞ {self.table_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ MS SQL Server'
                }
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            metadata = self.get_table_metadata()
            if not metadata:
                return {
                    'success': False,
                    'error': f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã {self.table_name}'
                }
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            if not self.create_target_table(metadata):
                return {
                    'success': False,
                    'error': f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ü–µ–ª–µ–≤—É—é —Ç–∞–±–ª–∏—Ü—É {self.table_name}'
                }
            
            # –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö
            if not self.migrate_table_data(metadata):
                return {
                    'success': False,
                    'error': f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã {self.table_name}'
                }
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
            if not self.create_indexes(metadata['table_model']):
                return {
                    'success': False,
                    'error': f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã {self.table_name}'
                }
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if not self.validate_migration():
                return {
                    'success': False,
                    'error': f'–í–∞–ª–∏–¥–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã {self.table_name} –Ω–µ –ø—Ä–æ—à–ª–∞'
                }
            
            self.migration_end_time = datetime.now()
            duration = (self.migration_end_time - self.migration_start_time).total_seconds()
            
            return {
                'success': True,
                'duration': f'{duration:.2f} —Å–µ–∫—É–Ω–¥',
                'rows_migrated': self.rows_migrated
            }
            
        except Exception as e:
            self.errors.append(str(e))
            return {
                'success': False,
                'error': f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}'
            }
    
    def check_source_table_exists(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –≤ MS SQL"""
        try:
            conn = self.get_mssql_connection()
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT COUNT(*) 
                FROM INFORMATION_SCHEMA.TABLES 
                WHERE TABLE_NAME = ?
            """, (self.table_name,))
            
            count = cursor.fetchone()[0]
            cursor.close()
            
            if self.verbose:
                print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {self.table_name} –Ω–∞–π–¥–µ–Ω–∞ –≤ MS SQL Server")
            
            return count > 0
            
        except Exception as e:
            if self.verbose:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")
            return False
    
    def get_table_metadata(self) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            from src.classes.table_model import TableModel
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ª–∏—á–∏–∏ –≤—ã—á–∏—Å–ª—è–µ–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            has_computed_columns = self._check_has_computed_columns()
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥–µ–ª–∏ —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏—á–Ω—ã–π –º–µ—Ç–æ–¥
            table_model = TableModel.create_table_model(self.table_name, has_computed_columns)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            if not table_model.load_metadata(self.config_loader):
                return None
            
            if self.verbose:
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–æ–Ω–æ–∫: {len(table_model.columns)}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ –º–æ–¥–µ–ª–∏
            source_columns = [col.source_name for col in table_model.columns]
            target_columns = [col.name for col in table_model.columns]
            
            return {
                'table_name': self.table_name,
                'table_model': table_model,
                'source_columns': source_columns,
                'target_columns': target_columns,
                'has_computed_columns': has_computed_columns
            }
            
        except Exception as e:
            if self.verbose:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
            return None
    
    def _check_has_computed_columns(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—ã—á–∏—Å–ª—è–µ–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        try:
            import psycopg2
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
            conn = psycopg2.connect(
                host=self.pg_config['host'],
                port=self.pg_config['port'],
                dbname=self.pg_config['database'],
                user=self.pg_config['user'],
                password=self.pg_config['password']
            )
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—ã—á–∏—Å–ª—è–µ–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            cursor.execute("""
                SELECT pt.has_computed_columns
                FROM mcl.postgres_tables pt
                JOIN mcl.mssql_tables mt ON pt.source_table_id = mt.id
                WHERE pt.object_name = %s AND mt.task_id = 2
            """, (self.table_name,))
            
            result = cursor.fetchone()
            cursor.close()
            conn.close()
            
            return result[0] if result else False
            
        except Exception as e:
            if self.verbose:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã—á–∏—Å–ª—è–µ–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫: {e}")
            return False
    
    def create_target_table(self, metadata: Dict) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            conn = self.get_pg_connection()
            cursor = conn.cursor()
            
            # –£–¥–∞–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ force=True
            if self.force:
                cursor.execute(f"DROP TABLE IF EXISTS ags.{self.table_name} CASCADE")
                if self.verbose:
                    print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ç–∞–±–ª–∏—Ü–∞: {self.table_name}")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∏—Å–ø–æ–ª—å–∑—É—è –º–æ–¥–µ–ª—å
            table_model = metadata['table_model']
            columns_ddl = []
            
            for column in table_model.columns:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º nullable –¥–ª—è identity –∫–æ–ª–æ–Ω–æ–∫
                nullable = "NULL" if column.is_nullable else "NOT NULL"
                # –î–ª—è identity –∫–æ–ª–æ–Ω–æ–∫ –¥–æ–±–∞–≤–ª—è–µ–º GENERATED ALWAYS AS IDENTITY
                identity_clause = " GENERATED ALWAYS AS IDENTITY" if column.is_identity else ""
                columns_ddl.append(f"    {column.name} {column.data_type}{identity_clause} {nullable}")
            
            create_sql = f"""
                CREATE TABLE ags.{self.table_name} (
                    {','.join(columns_ddl)}
                )
            """
            
            cursor.execute(create_sql)
            conn.commit()
            cursor.close()
            
            if self.verbose:
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: ags.{self.table_name}")
            
            return True
            
        except Exception as e:
            if self.verbose:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
            return False
    
    def migrate_table_data(self, metadata: Dict) -> bool:
        """–ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            mssql_conn = self.get_mssql_connection()
            pg_conn = self.get_pg_connection()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ MS SQL
            mssql_cursor = mssql_conn.cursor()
            pg_cursor = pg_conn.cursor()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º SELECT –∑–∞–ø—Ä–æ—Å —Å –ò–°–•–û–î–ù–´–ú–ò –∏–º–µ–Ω–∞–º–∏ –∫–æ–ª–æ–Ω–æ–∫
            source_column_names = metadata['source_columns']
            select_sql = f"SELECT {', '.join(source_column_names)} FROM ags.{self.table_name}"
            
            mssql_cursor.execute(select_sql)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º INSERT –∑–∞–ø—Ä–æ—Å —Å –¶–ï–õ–ï–í–´–ú–ò –∏–º–µ–Ω–∞–º–∏ –∫–æ–ª–æ–Ω–æ–∫
            target_column_names = metadata['target_columns']
            insert_sql = f"INSERT INTO ags.{self.table_name} ({', '.join(target_column_names)}) OVERRIDING SYSTEM VALUE VALUES ({', '.join(['%s'] * len(target_column_names))})"
            
            # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç–∞–º–∏
            batch_size = 1000
            total_rows = 0
            
            while True:
                rows = mssql_cursor.fetchmany(batch_size)
                if not rows:
                    break
                
                # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ
                pg_cursor.executemany(insert_sql, rows)
                
                total_rows += len(rows)
                
                if self.verbose and total_rows % 5000 == 0:
                    print(f"üìä –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ —Å—Ç—Ä–æ–∫: {total_rows}")
            
            pg_conn.commit()
            self.rows_migrated = total_rows
            
            mssql_cursor.close()
            pg_cursor.close()
            
            if self.verbose:
                print(f"‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ —Å—Ç—Ä–æ–∫: {total_rows}")
            
            return True
            
        except Exception as e:
            if self.verbose:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def validate_migration(self) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
        try:
            mssql_conn = self.get_mssql_connection()
            pg_conn = self.get_pg_connection()
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
            mssql_cursor = mssql_conn.cursor()
            mssql_cursor.execute(f"SELECT COUNT(*) FROM ags.{self.table_name}")
            source_count = mssql_cursor.fetchone()[0]
            mssql_cursor.close()
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —Ü–µ–ª–µ–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ
            pg_cursor = pg_conn.cursor()
            pg_cursor.execute(f"SELECT COUNT(*) FROM ags.{self.table_name}")
            target_count = pg_cursor.fetchone()[0]
            pg_cursor.close()
            
            if self.verbose:
                print(f"üìä –ò—Å—Ö–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞: {source_count} —Å—Ç—Ä–æ–∫")
                print(f"üìä –¶–µ–ª–µ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞: {target_count} —Å—Ç—Ä–æ–∫")
            
            if source_count == target_count:
                if self.verbose:
                    print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                if self.verbose:
                    print("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
                return False
                
        except Exception as e:
            if self.verbose:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return False
