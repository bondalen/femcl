#!/usr/bin/env python3
"""
–ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã cn –∏–∑ MS SQL Server –≤ PostgreSQL
"""
import psycopg2
import pyodbc
from rich.console import Console

console = Console()

def transfer_data():
    """–ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ MS SQL Server –≤ PostgreSQL"""
    console.print("[blue]üì¶ –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã cn[/blue]")
    
    # PostgreSQL
    pg_conn = psycopg2.connect(
        host="localhost",
        port=5432,
        dbname="fish_eye",
        user="postgres",
        password="postgres"
    )
    
    # MS SQL Server
    mssql_conn = pyodbc.connect(
        "DRIVER={ODBC Driver 17 for SQL Server};"
        "SERVER=localhost,1433;"
        "DATABASE=FishEye;"
        "UID=sa;"
        "PWD=kolob_OK1;"
        "TrustServerCertificate=yes;"
    )
    
    pg_cursor = pg_conn.cursor()
    mssql_cursor = mssql_conn.cursor()
    
    try:
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ PostgreSQL
        console.print("[yellow]‚ö†Ô∏è –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –≤ PostgreSQL...[/yellow]")
        pg_cursor.execute("TRUNCATE TABLE ags.cn")
        pg_conn.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ MS SQL Server
        console.print("[blue]üì• –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ MS SQL Server...[/blue]")
        mssql_cursor.execute("SELECT * FROM ags.cn ORDER BY cn_key")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
        first_row = mssql_cursor.fetchone()
        if not first_row:
            console.print("[red]‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ MS SQL Server[/red]")
            return False
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –∫ –Ω–∞—á–∞–ª—É
        mssql_cursor.execute("SELECT * FROM ags.cn ORDER BY cn_key")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–Ω–∫–∞—Ö
        mssql_cursor.execute("""
        SELECT COLUMN_NAME 
        FROM INFORMATION_SCHEMA.COLUMNS 
        WHERE TABLE_SCHEMA = 'ags' AND TABLE_NAME = 'cn'
        ORDER BY ORDINAL_POSITION
        """)
        column_names = [row[0] for row in mssql_cursor.fetchall()]
        
        # –°–æ–∑–¥–∞–µ–º SQL –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        placeholders = ",".join(["%s"] * len(column_names))
        columns_str = ",".join(column_names)
        insert_sql = f"INSERT INTO ags.cn ({columns_str}) VALUES ({placeholders})"
        
        console.print(f"[blue]üìù SQL –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏: {insert_sql}[/blue]")
        
        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ü–∏—è–º–∏
        batch_size = 500
        total_inserted = 0
        
        while True:
            rows = mssql_cursor.fetchmany(batch_size)
            if not rows:
                break
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            converted_rows = []
            for row in rows:
                converted_row = []
                for value in row:
                    if value is None:
                        converted_row.append(None)
                    elif isinstance(value, str):
                        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏
                        converted_row.append(value.replace("'", "''"))
                    else:
                        converted_row.append(value)
                converted_rows.append(tuple(converted_row))
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            pg_cursor.executemany(insert_sql, converted_rows)
            total_inserted += len(converted_rows)
            
            console.print(f"[blue]üìä –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ —Å—Ç—Ä–æ–∫: {total_inserted}[/blue]")
        
        pg_conn.commit()
        console.print(f"[green]‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã: {total_inserted} —Å—Ç—Ä–æ–∫[/green]")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        pg_cursor.execute("SELECT COUNT(*) FROM ags.cn")
        final_count = pg_cursor.fetchone()[0]
        console.print(f"[blue]üìä –ò—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ PostgreSQL: {final_count}[/blue]")
        
        return True
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö: {e}[/red]")
        pg_conn.rollback()
        return False
    
    finally:
        pg_conn.close()
        mssql_conn.close()

if __name__ == "__main__":
    success = transfer_data()
    if success:
        console.print("[green]üéâ –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ![/green]")
    else:
        console.print("[red]‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö[/red]")