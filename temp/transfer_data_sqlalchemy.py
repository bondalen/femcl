#!/usr/bin/env python3
"""
–ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã cn —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SQLAlchemy
"""
import psycopg2
import pyodbc
import pandas as pd
from sqlalchemy import create_engine
from rich.console import Console

console = Console()

def transfer_data_sqlalchemy():
    """–ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SQLAlchemy"""
    console.print("[blue]üì¶ –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã cn (SQLAlchemy)[/blue]")
    
    # MS SQL Server
    mssql_conn = pyodbc.connect(
        "DRIVER={ODBC Driver 17 for SQL Server};"
        "SERVER=localhost,1433;"
        "DATABASE=FishEye;"
        "UID=sa;"
        "PWD=kolob_OK1;"
        "TrustServerCertificate=yes;"
    )
    
    # PostgreSQL engine
    pg_engine = create_engine('postgresql://postgres:postgres@localhost:5432/fish_eye')
    
    try:
        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ MS SQL Server
        console.print("[blue]üì• –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ MS SQL Server...[/blue]")
        df = pd.read_sql("SELECT * FROM ags.cn ORDER BY cn_key", mssql_conn)
        console.print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(df)}")
        
        if len(df) == 0:
            console.print("[red]‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ MS SQL Server[/red]")
            return False
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫
        console.print("[blue]üìã –ü–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö:[/blue]")
        console.print(df.head(3).to_string())
        
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ PostgreSQL
        console.print("[yellow]‚ö†Ô∏è –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –≤ PostgreSQL...[/yellow]")
        with pg_engine.connect() as conn:
            conn.execute("TRUNCATE TABLE ags.cn")
            conn.commit()
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ PostgreSQL
        console.print("[blue]üì§ –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL...[/blue]")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º to_sql —Å SQLAlchemy engine
        df.to_sql('cn', pg_engine, schema='ags', if_exists='append', index=False, method='multi')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        with pg_engine.connect() as conn:
            result = conn.execute("SELECT COUNT(*) FROM ags.cn")
            final_count = result.fetchone()[0]
        
        console.print(f"[blue]üìä –ò—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ PostgreSQL: {final_count}[/blue]")
        
        if final_count == len(df):
            console.print("[green]‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã![/green]")
            return True
        else:
            console.print(f"[red]‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {final_count} != {len(df)}[/red]")
            return False
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö: {e}[/red]")
        return False
    
    finally:
        mssql_conn.close()

if __name__ == "__main__":
    success = transfer_data_sqlalchemy()
    if success:
        console.print("[green]üéâ –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ![/green]")
    else:
        console.print("[red]‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö[/red]")