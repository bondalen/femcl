#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∏–Ω–¥–µ–∫—Å–æ–≤
"""

import sys
import os
sys.path.append('/home/alex/projects/sql/femcl')

from config.config_loader import ConfigLoader
from src.classes.table_model_improved import TableModelImproved
import psycopg2
import time

def test_improved_architecture():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∏–Ω–¥–µ–∫—Å–æ–≤")
    print("=" * 60)
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_loader = ConfigLoader()
        pg_config = config_loader.get_database_config('postgres')
        pg_config_clean = {
            'host': pg_config['host'],
            'port': pg_config['port'], 
            'database': pg_config['database'],
            'user': pg_config['user'],
            'password': pg_config['password']
        }
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
        conn = psycopg2.connect(**pg_config_clean)
        cursor = conn.cursor()
        
        print("1. –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∏–Ω–¥–µ–∫—Å–æ–≤...")
        try:
            # –ß–∏—Ç–∞–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
            with open('/home/alex/projects/sql/femcl/create_index_view.sql', 'r') as f:
                sql_content = f.read()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º SQL –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
            for line in sql_content.split(';'):
                line = line.strip()
                if line and not line.startswith('--'):
                    cursor.execute(line)
            
            conn.commit()
            print("‚úÖ –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        
        print("\n2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ...")
        cursor.execute("SELECT COUNT(*) FROM mcl.v_postgres_indexes_by_table")
        total_count = cursor.fetchone()[0]
        print(f"   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏: {total_count}")
        
        cursor.execute("SELECT COUNT(*) FROM mcl.v_postgres_indexes_by_table WHERE table_name = 'accnt'")
        accnt_count = cursor.fetchone()[0]
        print(f"   –ò–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã accnt: {accnt_count}")
        
        print("\n3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –∏–Ω–¥–µ–∫—Å–æ–≤...")
        start_time = time.time()
        
        # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å —Ç–∞–±–ª–∏—Ü—ã
        table_model = TableModelImproved("accnt")
        
        if table_model.load_indexes_improved(config_loader):
            end_time = time.time()
            load_time = (end_time - start_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤: {len(table_model.indexes)}")
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: {load_time:.2f} –º—Å")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
            summary = table_model.get_indexes_summary()
            print(f"\nüìä –°–≤–æ–¥–∫–∞ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º:")
            print(f"   –í—Å–µ–≥–æ –∏–Ω–¥–µ–∫—Å–æ–≤: {summary['total_indexes']}")
            print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {summary['unique_indexes']}")
            print(f"   –ü–µ—Ä–≤–∏—á–Ω—ã—Ö –∫–ª—é—á–µ–π: {summary['primary_keys']}")
            print(f"   –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {summary['completed_indexes']}")
            print(f"   –û–∂–∏–¥–∞—é—â–∏—Ö: {summary['pending_indexes']}")
            print(f"   –û—à–∏–±–æ–∫: {summary['failed_indexes']}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∏–Ω–¥–µ–∫—Å–æ–≤
            for i, index in enumerate(table_model.indexes, 1):
                print(f"\n   {i}. {index.name}")
                print(f"      –¢–∏–ø: {index.index_type}")
                print(f"      –£–Ω–∏–∫–∞–ª—å–Ω—ã–π: {index.is_unique}")
                print(f"      –ü–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á: {index.is_primary_key}")
                print(f"      –°—Ç–∞—Ç—É—Å: {index.migration_status}")
                print(f"      –ö–æ–ª–æ–Ω–∫–∏: {len(index.columns)}")
                
                if index.columns:
                    for col in index.columns:
                        direction = "DESC" if col.is_descending else "ASC"
                        print(f"        - {col.column_name} {direction}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–¥–µ–∫—Å–æ–≤")
            if table_model.errors:
                for error in table_model.errors:
                    print(f"   {error}")
        
        print("\n4. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        print("   –¢–µ–∫—É—â–∏–π –º–µ—Ç–æ–¥ (—Å–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å):")
        start_time = time.time()
        cursor.execute("""
            SELECT pi.id, pi.index_name
            FROM mcl.postgres_indexes pi
            WHERE pi.source_index_id IN (
                SELECT mi.id 
                FROM mcl.mssql_indexes mi
                JOIN mcl.mssql_index_columns mic ON mi.id = mic.index_id
                JOIN mcl.mssql_columns mc ON mic.column_id = mc.id
                JOIN mcl.mssql_tables mt ON mc.table_id = mt.id
                WHERE mt.object_name = 'accnt'
            )
        """)
        old_result = cursor.fetchall()
        old_time = (time.time() - start_time) * 1000
        print(f"     –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(old_result)} –∏–Ω–¥–µ–∫—Å–æ–≤ –∑–∞ {old_time:.2f} –º—Å")
        
        print("   –£–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ (–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ):")
        start_time = time.time()
        cursor.execute("""
            SELECT index_id, index_name
            FROM mcl.v_postgres_indexes_by_table
            WHERE table_name = 'accnt'
        """)
        new_result = cursor.fetchall()
        new_time = (time.time() - start_time) * 1000
        print(f"     –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(new_result)} –∏–Ω–¥–µ–∫—Å–æ–≤ –∑–∞ {new_time:.2f} –º—Å")
        
        if old_time > 0:
            improvement = ((old_time - new_time) / old_time) * 100
            print(f"   üöÄ –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {improvement:.1f}%")
        
        cursor.close()
        conn.close()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_improved_architecture()
    sys.exit(0 if success else 1)