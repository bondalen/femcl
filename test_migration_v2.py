#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç–∞–±–ª–∏—Ü –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–º –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from migration_functions import *
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from datetime import datetime

console = Console()

def initialize_migration_v2(task_id: int = 2):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏"""
    
    console.print(Panel.fit(
        f'[bold green]üöÄ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –¢–ï–°–¢–û–í–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø V2[/bold green]\\n'
        f'–° —Ä–µ–∞–ª—å–Ω—ã–º —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç–∞–±–ª–∏—Ü –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–º –¥–∞–Ω–Ω—ã—Ö\\n'
        f'–ó–∞–¥–∞—á–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: ID = {task_id}\\n'
        f'–¶–µ–ª—å: –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –ø–µ—Ä–≤—ã–µ 3 —Ç–∞–±–ª–∏—Ü—ã –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π',
        style='green'
    ))
    
    try:
        config = load_config()
        postgres_config = config['database']['postgres']
        
        conn = psycopg2.connect(
            host=postgres_config['host'],
            port=postgres_config['port'],
            dbname=postgres_config['database'],
            user=postgres_config['user'],
            password=postgres_config['password'],
            connect_timeout=postgres_config['connection_timeout'],
            sslmode=postgres_config['ssl_mode']
        )
        
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
        cursor.execute('''
            SELECT 
                mt.id,
                mt.object_name,
                mt.schema_name,
                mt.row_count,
                pt.migration_status
            FROM mcl.mssql_tables mt
            JOIN mcl.postgres_tables pt ON mt.id = pt.source_table_id
            WHERE mt.task_id = %s
                AND mt.schema_name = 'ags'
                AND mt.id NOT IN (
                    SELECT DISTINCT mt2.id
                    FROM mcl.mssql_foreign_keys mfk
                    JOIN mcl.mssql_tables mt2 ON mfk.table_id = mt2.id
                    WHERE mt2.task_id = %s
                )
                AND pt.migration_status = 'pending'
            ORDER BY mt.object_name
        ''', (task_id, task_id))
        
        no_fk_tables = cursor.fetchall()
        
        console.print(f'\\n[blue]üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π: {len(no_fk_tables)}[/blue]')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ç–∞–±–ª–∏—Ü
        if no_fk_tables:
            console.print('\\n[cyan]üìã –ü–µ—Ä–≤—ã–µ 10 —Ç–∞–±–ª–∏—Ü –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏:[/cyan]')
            table = Table()
            table.add_column('‚Ññ', style='cyan')
            table.add_column('ID', style='yellow')
            table.add_column('–ò–º—è —Ç–∞–±–ª–∏—Ü—ã', style='green')
            table.add_column('–°—Ç—Ä–æ–∫', style='magenta')
            table.add_column('–°—Ç–∞—Ç—É—Å', style='red')
            
            for i, (table_id, name, schema, rows, status) in enumerate(no_fk_tables[:10], 1):
                table.add_row(str(i), str(table_id), name, str(rows), status)
            
            console.print(table)
        
        conn.close()
        
        log_migration_event(
            'MIGRATION_V2_START',
            f'–ù–∞—á–∞–ª–æ —É–ª—É—á—à–µ–Ω–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ {task_id}. –ù–∞–π–¥–µ–Ω–æ {len(no_fk_tables)} —Ç–∞–±–ª–∏—Ü –±–µ–∑ FK',
            'INFO',
            task_id=task_id
        )
        
        return no_fk_tables
        
    except Exception as e:
        console.print(f'[red]‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}[/red]')
        log_migration_event('MIGRATION_V2_INIT_ERROR', f'–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}', 'ERROR')
        return []

def execute_migration_cycle_v2(task_id: int = 2):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    
    console.print(Panel(
        f'[bold blue]üîÑ –¶–ò–ö–õ –ú–ò–ì–†–ê–¶–ò–ò V2[/bold blue]\\n'
        f'–° —Ä–µ–∞–ª—å–Ω—ã–º —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç–∞–±–ª–∏—Ü –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–º –¥–∞–Ω–Ω—ã—Ö\\n'
        f'–ó–∞–¥–∞—á–∞: {task_id}',
        title='BPMN –≠–¢–ê–ü 2',
        border_style='blue'
    ))
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–¥–∞—á–∏
    if not validate_migration_task(task_id):
        return 0
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ —Ñ—É–Ω–∫—Ü–∏–π
    console.print('\\n[blue]üéØ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ —Ñ—É–Ω–∫—Ü–∏–π...[/blue]')
    try:
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –∫–æ –≤—Å–µ–º —Ç–∏–ø–∞–º –æ–±—ä–µ–∫—Ç–æ–≤
        mapping_results = apply_universal_function_mapping(task_id)
        
        console.print(f'  ‚Ä¢ Default constraints –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {mapping_results["default_constraints_processed"]}')
        console.print(f'  ‚Ä¢ Computed columns –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {mapping_results["computed_columns_processed"]}')
        console.print(f'  ‚Ä¢ CHECK constraints –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {mapping_results["check_constraints_processed"]}')
        console.print(f'  ‚Ä¢ –ò–Ω–¥–µ–∫—Å—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {mapping_results["indexes_processed"]}')
        
        if mapping_results['errors']:
            console.print(f'  ‚ö†Ô∏è –û—à–∏–±–∫–∏ –º–∞–ø–ø–∏–Ω–≥–∞: {len(mapping_results["errors"])}')
            for error in mapping_results['errors']:
                console.print(f'    ‚Ä¢ {error}')
        
        log_migration_event(
            'FUNCTION_MAPPING_COMPLETE',
            f'–ú–∞–ø–ø–∏–Ω–≥ —Ñ—É–Ω–∫—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {mapping_results["default_constraints_processed"]} default constraints, {mapping_results["computed_columns_processed"]} computed columns',
            'INFO',
            task_id=task_id
        )
        
    except Exception as e:
        console.print(f'  ‚ùå –û—à–∏–±–∫–∞ –º–∞–ø–ø–∏–Ω–≥–∞ —Ñ—É–Ω–∫—Ü–∏–π: {e}')
        log_migration_event(
            'FUNCTION_MAPPING_ERROR',
            f'–û—à–∏–±–∫–∞ –º–∞–ø–ø–∏–Ω–≥–∞ —Ñ—É–Ω–∫—Ü–∏–π: {e}',
            'ERROR',
            task_id=task_id
        )
    
    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
    console.print('\\n[blue]üéØ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫...[/blue]')
    try:
        distribution_success = analyze_and_distribute_columns(task_id)
        
        if distribution_success:
            console.print('  ‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            distribution_check = check_column_distribution(task_id)
            console.print(f'  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(distribution_check)}')
            
            log_migration_event(
                'COLUMN_DISTRIBUTION_COMPLETE',
                f'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(distribution_check)}',
                'INFO',
                task_id=task_id
            )
        else:
            console.print('  ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫')
            
    except Exception as e:
        console.print(f'  ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫: {e}')
        log_migration_event(
            'COLUMN_DISTRIBUTION_ERROR',
            f'–û—à–∏–±–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫: {e}',
            'ERROR',
            task_id=task_id
        )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    tables_to_migrate = initialize_migration_v2(task_id)
    
    if not tables_to_migrate:
        console.print('[red]‚ùå –ù–µ—Ç —Ç–∞–±–ª–∏—Ü –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏![/red]')
        return 0
    
    # –°—á–µ—Ç—á–∏–∫–∏
    target_count = 3
    migrated_count = 0
    failed_count = 0
    
    console.print(f'\\n[yellow]üéØ –¶–µ–ª—å: –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ {target_count} —Ç–∞–±–ª–∏—Ü[/yellow]')
    
    # –ü—Ä–æ—Ö–æ–¥ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º
    for i, (table_id, table_name, schema, row_count, status) in enumerate(tables_to_migrate, 1):
        
        console.print(f'\\n[cyan]üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã {i}: {table_name} (ID: {table_id})[/cyan]')
        console.print(f'  ‚Ä¢ –°—Ç—Ä–æ–∫: {row_count}')
        console.print(f'  ‚Ä¢ –°—Ç–∞—Ç—É—Å: {status}')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        if status != 'pending':
            console.print(f'  ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ - –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {status}')
            continue
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã
        console.print(f'  üöÄ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏...')
        
        try:
            success = migrate_single_table(table_id, task_id)
            
            if success:
                migrated_count += 1
                console.print(f'  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table_name} —É—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞!')
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏
                if migrated_count >= target_count:
                    console.print(f'\\n[green]üéâ –î–û–°–¢–ò–ì–ù–£–¢–ê –¶–ï–õ–¨: –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {migrated_count} —Ç–∞–±–ª–∏—Ü![/green]')
                    break
            else:
                failed_count += 1
                console.print(f'  ‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã {table_name}')
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
                console.print(f'\\n[red]üõë –û–°–¢–ê–ù–û–í–ö–ê –ò–ó-–ó–ê –û–®–ò–ë–ö–ò[/red]')
                break
                
        except Exception as e:
            failed_count += 1
            console.print(f'  ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}')
            console.print(f'\\n[red]üõë –û–°–¢–ê–ù–û–í–ö–ê –ò–ó-–ó–ê –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –û–®–ò–ë–ö–ò[/red]')
            break
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.print(f'\\n[blue]üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:[/blue]')
    console.print(f'  ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–∞–±–ª–∏—Ü: {i}')
    console.print(f'  ‚Ä¢ –£—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {migrated_count}')
    console.print(f'  ‚Ä¢ –û—à–∏–±–æ–∫: {failed_count}')
    console.print(f'  ‚Ä¢ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞: {"‚úÖ –î–∞" if migrated_count >= target_count else "‚ùå –ù–µ—Ç"}')
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    log_migration_event(
        'MIGRATION_V2_COMPLETE',
        f'–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—è V2 –∑–∞–¥–∞—á–∏ {task_id}. –£—Å–ø–µ—à–Ω–æ: {migrated_count}, –û—à–∏–±–æ–∫: {failed_count}',
        'INFO',
        task_id=task_id
    )
    
    return migrated_count

def validate_migration_results_v2():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —É–ª—É—á—à–µ–Ω–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏"""
    
    console.print(Panel(
        '[bold blue]üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í V2[/bold blue]\\n'
        '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö —Ç–∞–±–ª–∏—Ü –≤ PostgreSQL',
        title='BPMN –≠–¢–ê–ü 5',
        border_style='blue'
    ))
    
    try:
        config = load_config()
        postgres_config = config['database']['postgres']
        
        conn = psycopg2.connect(
            host=postgres_config['host'],
            port=postgres_config['port'],
            dbname=postgres_config['database'],
            user=postgres_config['user'],
            password=postgres_config['password'],
            connect_timeout=postgres_config['connection_timeout'],
            sslmode=postgres_config['ssl_mode']
        )
        
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–∞–±–ª–∏—Ü –≤ —Å—Ö–µ–º–µ ags
        cursor.execute('''
            SELECT COUNT(*) as table_count
            FROM information_schema.tables 
            WHERE table_schema = 'ags'
        ''')
        
        ags_tables_count = cursor.fetchone()[0]
        
        console.print(f'\\n[blue]üìä –¢–ê–ë–õ–ò–¶ –í –°–•–ï–ú–ï AGS: {ags_tables_count}[/blue]')
        
        if ags_tables_count > 0:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü –≤ —Å—Ö–µ–º–µ ags
            cursor.execute('''
                SELECT 
                    table_name,
                    CASE 
                        WHEN table_name = 'cn_inv_cmm_fn_n' THEN (SELECT COUNT(*) FROM ags.cn_inv_cmm_fn_n)
                        WHEN table_name = 'cn_inv_cmm_gr' THEN (SELECT COUNT(*) FROM ags.cn_inv_cmm_gr)
                        WHEN table_name = 'cn_inv_cmm_tp' THEN (SELECT COUNT(*) FROM ags.cn_inv_cmm_tp)
                        ELSE 0
                    END as row_count
                FROM information_schema.tables 
                WHERE table_schema = 'ags'
                ORDER BY table_name
            ''')
            
            ags_tables = cursor.fetchall()
            
            console.print('\\n[green]üìã –¢–ê–ë–õ–ò–¶–´ –í –°–•–ï–ú–ï AGS:[/green]')
            table = Table()
            table.add_column('–ò–º—è —Ç–∞–±–ª–∏—Ü—ã', style='cyan')
            table.add_column('–°—Ç—Ä–æ–∫', style='green')
            
            for table_name, row_count in ags_tables:
                table.add_row(table_name, str(row_count))
            
            console.print(table)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        cursor.execute('''
            SELECT 
                migration_status,
                COUNT(*) as count
            FROM mcl.postgres_tables
            GROUP BY migration_status
            ORDER BY migration_status
        ''')
        
        statuses = cursor.fetchall()
        
        console.print('\\n[blue]üìä –°–¢–ê–¢–£–°–´ –í –ú–ï–¢–ê–î–ê–ù–ù–´–•:[/blue]')
        status_table = Table()
        status_table.add_column('–°—Ç–∞—Ç—É—Å', style='cyan')
        status_table.add_column('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', style='green')
        
        for status, count in statuses:
            status_table.add_row(status, str(count))
        
        console.print(status_table)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞–ø–ø–∏–Ω–≥–∞ —Ñ—É–Ω–∫—Ü–∏–π
        console.print('\\n[blue]üéØ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ê–ü–ü–ò–ù–ì–ê –§–£–ù–ö–¶–ò–ô:[/blue]')
        try:
            mapping_stats = get_function_mapping_statistics(task_id)
            
            console.print(f'  ‚Ä¢ Default constraints: {mapping_stats["default_constraints"]["mapped"]}/{mapping_stats["default_constraints"]["total"]} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ')
            console.print(f'  ‚Ä¢ Computed columns: {mapping_stats["computed_columns"]["mapped"]}/{mapping_stats["computed_columns"]["total"]} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ')
            console.print(f'  ‚Ä¢ –û–±—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: {mapping_stats["coverage_percentage"]:.1f}%')
            
            if mapping_stats['coverage_percentage'] == 100.0:
                console.print('  ‚úÖ –ü–æ–ª–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ —Ñ—É–Ω–∫—Ü–∏–π')
            else:
                console.print('  ‚ö†Ô∏è –ù–µ–ø–æ–ª–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ —Ñ—É–Ω–∫—Ü–∏–π')
                
        except Exception as e:
            console.print(f'  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞–ø–ø–∏–Ω–≥–∞: {e}')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        cursor.execute('''
            SELECT 
                pt.object_name,
                pt.migration_status,
                CASE 
                    WHEN EXISTS (
                        SELECT 1 FROM information_schema.tables 
                        WHERE table_schema = 'ags' AND table_name = pt.object_name
                    ) THEN 'EXISTS'
                    ELSE 'MISSING'
                END as physical_status
            FROM mcl.postgres_tables pt
            WHERE pt.migration_status = 'completed'
            ORDER BY pt.object_name
        ''')
        
        completed_tables = cursor.fetchall()
        
        console.print('\\n[blue]üìä –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –°–¢–ê–¢–£–°–û–í –ò –§–ò–ó–ò–ß–ï–°–ö–ò–• –¢–ê–ë–õ–ò–¶:[/blue]')
        if completed_tables:
            physical_table = Table()
            physical_table.add_column('–¢–∞–±–ª–∏—Ü–∞', style='cyan')
            physical_table.add_column('–°—Ç–∞—Ç—É—Å', style='yellow')
            physical_table.add_column('–§–∏–∑–∏—á–µ—Å–∫–∞—è —Ç–∞–±–ª–∏—Ü–∞', style='green')
            
            for table_name, status, physical in completed_tables:
                physical_table.add_row(
                    table_name, 
                    status, 
                    '‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç' if physical == 'EXISTS' else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
                )
            
            console.print(physical_table)
        else:
            console.print('[yellow]–ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏[/yellow]')
        
        conn.close()
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        success_count = sum(1 for _, _, physical in completed_tables if physical == 'EXISTS')
        total_completed = len(completed_tables)
        
        console.print(f'\\n[blue]üìä –ê–ù–ê–õ–ò–ó –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø:[/blue]')
        console.print(f'  ‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {total_completed}')
        console.print(f'  ‚Ä¢ –§–∏–∑–∏—á–µ—Å–∫–∏—Ö —Ç–∞–±–ª–∏—Ü –≤ PostgreSQL: {ags_tables_count}')
        console.print(f'  ‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {success_count}/{total_completed}')
        
        if ags_tables_count > 0 and total_completed > 0:
            console.print('[green]‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û![/green]')
        else:
            console.print('[red]‚ùå –ü–†–û–ë–õ–ï–ú–´ –° –ú–ò–ì–†–ê–¶–ò–ï–ô![/red]')
        
        log_migration_event(
            'VALIDATION_V2_COMPLETE',
            f'–í–∞–ª–∏–¥–∞—Ü–∏—è V2 –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –§–∏–∑–∏—á–µ—Å–∫–∏—Ö —Ç–∞–±–ª–∏—Ü: {ags_tables_count}, –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {total_completed}',
            'INFO'
        )
        
        return ags_tables_count > 0
        
    except Exception as e:
        console.print(f'[red]‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}[/red]')
        log_migration_event('VALIDATION_V2_ERROR', f'–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}', 'ERROR')
        return False

def main(task_id: int = 2):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    console.print(Panel.fit(
        f'[bold magenta]üéØ –¢–ï–°–¢–û–í–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø V2 - –ì–û–¢–û–í –ö –ó–ê–ü–£–°–ö–£[/bold magenta]\\n'
        f'–ó–∞–¥–∞—á–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: ID = {task_id}',
        style='magenta'
    ))
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–¥–∞—á–∏
    if not validate_migration_task(task_id):
        console.print(Panel(
            f'[bold red]‚ùå –û–®–ò–ë–ö–ê: –ó–∞–¥–∞—á–∞ {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞![/bold red]',
            title='–û–®–ò–ë–ö–ê',
            border_style='red'
        ))
        return
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–∏–∫–ª–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
    migrated_count = execute_migration_cycle_v2(task_id)
    
    if migrated_count > 0:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        validation_success = validate_migration_results_v2()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        console.print(Panel(
            f'[bold green]üéâ –¢–ï–°–¢–û–í–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø V2 –ó–ê–í–ï–†–®–ï–ù–ê[/bold green]\\n'
            f'–ó–∞–¥–∞—á–∞: {task_id}\\n'
            f'–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {migrated_count}\\n'
            f'–í–∞–ª–∏–¥–∞—Ü–∏—è: {"‚úÖ –£—Å–ø–µ—à–Ω–∞" if validation_success else "‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–∞"}',
            title='–ò–¢–û–ì–ò',
            border_style='green'
        ))
    else:
        console.print(Panel(
            f'[bold red]‚ùå –¢–ï–°–¢–û–í–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø V2 –ù–ï –£–î–ê–õ–ê–°–¨[/bold red]\\n'
            f'–ó–∞–¥–∞—á–∞: {task_id}',
            title='–ò–¢–û–ì–ò',
            border_style='red'
        ))

if __name__ == '__main__':
    main()
