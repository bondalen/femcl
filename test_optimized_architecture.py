#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å –ø—Ä—è–º—ã–º–∏ —Å–≤—è–∑—è–º–∏
"""

import sys
import os
import time
sys.path.append('/home/alex/projects/sql/femcl')

from config.config_loader import ConfigLoader
from src.classes.table_model_optimized import TableModelOptimized
import psycopg2

def test_optimized_architecture():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""
    
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å –ø—Ä—è–º—ã–º–∏ —Å–≤—è–∑—è–º–∏")
    print("=" * 70)
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_loader = ConfigLoader()
        pg_config = config_loader.get_database_config('postgres')
        pg_config_clean = {
            'host': pg_config['host'],
            'port': pg_config['port'], 
            'database': pg_config['database'],
            'user': pg_config['user'],
            'password': pg_config['password']
        }
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
        conn = psycopg2.connect(**pg_config_clean)
        cursor = conn.cursor()
        
        print("1. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤:")
        
        # –°—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± (—Å–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å)
        print("   –°—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± (—Å–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å):")
        start_time = time.time()
        cursor.execute("""
            SELECT pi.id, pi.index_name
            FROM mcl.postgres_indexes pi
            WHERE pi.source_index_id IN (
                SELECT mi.id 
                FROM mcl.mssql_indexes mi
                JOIN mcl.mssql_index_columns mic ON mi.id = mic.index_id
                JOIN mcl.mssql_columns mc ON mic.column_id = mc.id
                JOIN mcl.mssql_tables mt ON mc.table_id = mt.id
                WHERE mt.object_name = 'accnt'
            )
        """)
        old_result = cursor.fetchall()
        old_time = (time.time() - start_time) * 1000
        print(f"     –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(old_result)} –∏–Ω–¥–µ–∫—Å–æ–≤ –∑–∞ {old_time:.2f} –º—Å")
        
        # –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± (–ø—Ä—è–º—ã–µ —Å–≤—è–∑–∏)
        print("   –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± (–ø—Ä—è–º—ã–µ —Å–≤—è–∑–∏):")
        start_time = time.time()
        cursor.execute("""
            SELECT pi.id, pi.index_name
            FROM mcl.postgres_indexes pi
            JOIN mcl.postgres_tables pt ON pi.table_id = pt.id
            WHERE pt.object_name = 'accnt'
        """)
        new_result = cursor.fetchall()
        new_time = (time.time() - start_time) * 1000
        print(f"     –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(new_result)} –∏–Ω–¥–µ–∫—Å–æ–≤ –∑–∞ {new_time:.2f} –º—Å")
        
        if old_time > 0:
            improvement = ((old_time - new_time) / old_time) * 100
            print(f"   üöÄ –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {improvement:.1f}%")
        
        print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–¥–µ–∫—Å–æ–≤:")
        start_time = time.time()
        
        # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å —Ç–∞–±–ª–∏—Ü—ã
        table_model = TableModelOptimized("accnt")
        
        if table_model.load_indexes_optimized(config_loader):
            end_time = time.time()
            load_time = (end_time - start_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤: {len(table_model.indexes)}")
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: {load_time:.2f} –º—Å")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
            summary = table_model.get_indexes_summary()
            print(f"\nüìä –°–≤–æ–¥–∫–∞ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º:")
            print(f"   –í—Å–µ–≥–æ –∏–Ω–¥–µ–∫—Å–æ–≤: {summary['total_indexes']}")
            print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {summary['unique_indexes']}")
            print(f"   –ü–µ—Ä–≤–∏—á–Ω—ã—Ö –∫–ª—é—á–µ–π: {summary['primary_keys']}")
            print(f"   –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {summary['completed_indexes']}")
            print(f"   –û–∂–∏–¥–∞—é—â–∏—Ö: {summary['pending_indexes']}")
            print(f"   –û—à–∏–±–æ–∫: {summary['failed_indexes']}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∏–Ω–¥–µ–∫—Å–æ–≤
            for i, index in enumerate(table_model.indexes, 1):
                print(f"\n   {i}. {index.name}")
                print(f"      –¢–∏–ø: {index.index_type}")
                print(f"      –£–Ω–∏–∫–∞–ª—å–Ω—ã–π: {index.is_unique}")
                print(f"      –ü–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á: {index.is_primary_key}")
                print(f"      –°—Ç–∞—Ç—É—Å: {index.migration_status}")
                print(f"      –ö–æ–ª–æ–Ω–∫–∏: {len(index.columns)}")
                
                if index.columns:
                    for col in index.columns:
                        direction = "DESC" if col.is_descending else "ASC"
                        print(f"        - {col.column_name} {direction}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–¥–µ–∫—Å–æ–≤")
            if table_model.errors:
                for error in table_model.errors:
                    print(f"   {error}")
        
        print("\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Å–≤—è–∑–µ–π:")
        if table_model.verify_index_consistency(config_loader):
            print("‚úÖ –í—Å–µ —Å–≤—è–∑–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã")
        else:
            print("‚ùå –ù–∞–π–¥–µ–Ω—ã –Ω–µ—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏")
        
        print("\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:")
        
        # –ó–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ MS SQL –∏–Ω–¥–µ–∫—Å—ã
        print("   MS SQL –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è accnt:")
        cursor.execute("""
            SELECT mi.id, mi.index_name, mi.is_primary_key, mi.is_unique
            FROM mcl.mssql_indexes mi
            JOIN mcl.mssql_tables mt ON mi.table_id = mt.id
            WHERE mt.object_name = 'accnt'
        """)
        mssql_indexes = cursor.fetchall()
        for idx in mssql_indexes:
            print(f"     {idx[1]} ({'PK' if idx[2] else ''} {'UNIQUE' if idx[3] else ''})")
        
        # –ó–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ PostgreSQL –∏–Ω–¥–µ–∫—Å—ã
        print("   PostgreSQL –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è accnt:")
        cursor.execute("""
            SELECT pi.id, pi.index_name, pi.is_primary_key, pi.is_unique, pi.migration_status
            FROM mcl.postgres_indexes pi
            JOIN mcl.postgres_tables pt ON pi.table_id = pt.id
            WHERE pt.object_name = 'accnt'
        """)
        pg_indexes = cursor.fetchall()
        for idx in pg_indexes:
            print(f"     {idx[1]} ({'PK' if idx[2] else ''} {'UNIQUE' if idx[3] else ''}) - {idx[4]}")
        
        cursor.close()
        conn.close()
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_optimized_architecture()
    sys.exit(0 if success else 1)