#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ConnectionManager –∏ ConnectionDiagnostics

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python3 test_connection_manager.py
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, str(Path(__file__).parent / "src" / "code"))

from infrastructure.classes import ConnectionManager, ConnectionDiagnostics

try:
    from rich.console import Console
    from rich.panel import Panel
    console = Console()
    RICH_AVAILABLE = True
except ImportError:
    console = None
    RICH_AVAILABLE = False
    print("Rich –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–æ–π –≤—ã–≤–æ–¥.")


def print_section(title: str):
    """–í—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–µ–∫—Ü–∏–∏."""
    if RICH_AVAILABLE:
        console.print(f"\n[bold cyan]{title}[/bold cyan]")
    else:
        print(f"\n{'='*60}")
        print(title)
        print('='*60)


def test_connection_manager():
    """–¢–µ—Å—Ç ConnectionManager."""
    print_section("üîå –¢–ï–°–¢ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ConnectionManager")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å task_id=2 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        manager = ConnectionManager()
        
        if RICH_AVAILABLE:
            console.print("[green]‚úÖ ConnectionManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ[/green]")
        else:
            print("‚úÖ ConnectionManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ
        info = manager.get_connection_info()
        
        if RICH_AVAILABLE:
            console.print(f"  Task ID: [yellow]{info['task_id']}[/yellow]")
            console.print(f"  –ü—Ä–æ—Ñ–∏–ª—å: [yellow]{info['profile_name']}[/yellow]")
            console.print(f"  –û–ø–∏—Å–∞–Ω–∏–µ: {info['description']}")
        else:
            print(f"  Task ID: {info['task_id']}")
            print(f"  –ü—Ä–æ—Ñ–∏–ª—å: {info['profile_name']}")
            print(f"  –û–ø–∏—Å–∞–Ω–∏–µ: {info['description']}")
        
        return manager
        
    except Exception as e:
        if RICH_AVAILABLE:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞: {e}[/red]")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None


def test_postgres_connection(manager: ConnectionManager):
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL."""
    print_section("üêò –¢–ï–°–¢ 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL")
    
    try:
        conn = manager.get_postgres_connection()
        
        if RICH_AVAILABLE:
            console.print("[green]‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ[/green]")
        else:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏
        cursor = conn.cursor()
        cursor.execute("SELECT version()")
        version = cursor.fetchone()[0]
        cursor.close()
        
        if RICH_AVAILABLE:
            console.print(f"  –í–µ—Ä—Å–∏—è: [cyan]{version[:50]}...[/cyan]")
        else:
            print(f"  –í–µ—Ä—Å–∏—è: {version[:50]}...")
        
        return True
        
    except Exception as e:
        if RICH_AVAILABLE:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}[/red]")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False


def test_mssql_connection(manager: ConnectionManager):
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MS SQL Server."""
    print_section("üóÑÔ∏è  –¢–ï–°–¢ 3: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MS SQL Server")
    
    try:
        conn = manager.get_mssql_connection()
        
        if RICH_AVAILABLE:
            console.print("[green]‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MS SQL Server —É—Å–ø–µ—à–Ω–æ[/green]")
        else:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MS SQL Server —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏
        cursor = conn.cursor()
        cursor.execute("SELECT @@VERSION")
        version = cursor.fetchone()[0]
        cursor.close()
        
        if RICH_AVAILABLE:
            console.print(f"  –í–µ—Ä—Å–∏—è: [cyan]{version[:50]}...[/cyan]")
        else:
            print(f"  –í–µ—Ä—Å–∏—è: {version[:50]}...")
        
        return True
        
    except Exception as e:
        if RICH_AVAILABLE:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}[/red]")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False


def test_diagnostics(manager: ConnectionManager):
    """–¢–µ—Å—Ç ConnectionDiagnostics."""
    print_section("üîç –¢–ï–°–¢ 4: ConnectionDiagnostics")
    
    try:
        diagnostics = ConnectionDiagnostics(manager)
        
        if RICH_AVAILABLE:
            console.print("[green]‚úÖ ConnectionDiagnostics –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω[/green]")
        else:
            print("‚úÖ ConnectionDiagnostics –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        if RICH_AVAILABLE:
            console.print("\n[cyan]–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...[/cyan]")
        else:
            print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
        
        test_results = diagnostics.test_all_connections()
        
        pg_status = test_results['postgres']['status']
        ms_status = test_results['mssql']['status']
        
        if RICH_AVAILABLE:
            pg_icon = "‚úÖ" if pg_status == 'success' else "‚ùå"
            ms_icon = "‚úÖ" if ms_status == 'success' else "‚ùå"
            console.print(f"  {pg_icon} PostgreSQL: {pg_status}")
            console.print(f"  {ms_icon} MS SQL Server: {ms_status}")
        else:
            print(f"  PostgreSQL: {pg_status}")
            print(f"  MS SQL Server: {ms_status}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã mcl
        if RICH_AVAILABLE:
            console.print("\n[cyan]–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã mcl...[/cyan]")
        else:
            print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã mcl...")
        
        mcl_exists = diagnostics.check_schema_exists('mcl', 'postgres')
        
        if mcl_exists:
            if RICH_AVAILABLE:
                console.print("[green]  ‚úÖ –°—Ö–µ–º–∞ mcl —Å—É—â–µ—Å—Ç–≤—É–µ—Ç[/green]")
            else:
                print("  ‚úÖ –°—Ö–µ–º–∞ mcl —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            tables_count = diagnostics.get_schema_tables_count('mcl', 'postgres')
            if RICH_AVAILABLE:
                console.print(f"  –¢–∞–±–ª–∏—Ü –≤ —Å—Ö–µ–º–µ: [yellow]{tables_count}[/yellow]")
            else:
                print(f"  –¢–∞–±–ª–∏—Ü –≤ —Å—Ö–µ–º–µ: {tables_count}")
        else:
            if RICH_AVAILABLE:
                console.print("[yellow]  ‚ö†Ô∏è  –°—Ö–µ–º–∞ mcl –Ω–µ –Ω–∞–π–¥–µ–Ω–∞[/yellow]")
            else:
                print("  ‚ö†Ô∏è  –°—Ö–µ–º–∞ mcl –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        return diagnostics
        
    except Exception as e:
        if RICH_AVAILABLE:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞: {e}[/red]")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None


def test_full_report(diagnostics: ConnectionDiagnostics):
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞."""
    print_section("üìä –¢–ï–°–¢ 5: –ü–æ–ª–Ω—ã–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç")
    
    try:
        if RICH_AVAILABLE:
            console.print("[cyan]–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...[/cyan]\n")
        else:
            print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...\n")
        
        diagnostics.print_diagnostic_report()
        
        if RICH_AVAILABLE:
            console.print("\n[green]‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ[/green]")
        else:
            print("\n‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        return True
        
    except Exception as e:
        if RICH_AVAILABLE:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}[/red]")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        return False


def test_context_manager():
    """–¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ConnectionManager –∫–∞–∫ context manager."""
    print_section("üîÑ –¢–ï–°–¢ 6: Context Manager")
    
    try:
        with ConnectionManager() as manager:
            if RICH_AVAILABLE:
                console.print("[green]‚úÖ ConnectionManager –æ—Ç–∫—Ä—ã—Ç –∫–∞–∫ context manager[/green]")
            else:
                print("‚úÖ ConnectionManager –æ—Ç–∫—Ä—ã—Ç –∫–∞–∫ context manager")
            
            info = manager.get_connection_info()
            if RICH_AVAILABLE:
                console.print(f"  Task ID: [yellow]{info['task_id']}[/yellow]")
            else:
                print(f"  Task ID: {info['task_id']}")
        
        if RICH_AVAILABLE:
            console.print("[green]‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã[/green]")
        else:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã")
        
        return True
        
    except Exception as e:
        if RICH_AVAILABLE:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞: {e}[/red]")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    if RICH_AVAILABLE:
        console.print(Panel.fit(
            "[bold green]üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CONNECTION MANAGER[/bold green]\n"
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã ConnectionManager –∏ ConnectionDiagnostics",
            border_style="green"
        ))
    else:
        print("\n" + "="*60)
        print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CONNECTION MANAGER")
        print("="*60)
    
    # –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    manager = test_connection_manager()
    if not manager:
        print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å ConnectionManager")
        return False
    
    # –¢–µ—Å—Ç 2: PostgreSQL
    pg_ok = test_postgres_connection(manager)
    
    # –¢–µ—Å—Ç 3: MS SQL Server
    ms_ok = test_mssql_connection(manager)
    
    # –¢–µ—Å—Ç 4: Diagnostics
    diagnostics = test_diagnostics(manager)
    
    # –¢–µ—Å—Ç 5: –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
    if diagnostics:
        test_full_report(diagnostics)
    
    # –¢–µ—Å—Ç 6: Context Manager
    test_context_manager()
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    manager.close_all_connections()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print_section("üìã –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    
    tests_passed = sum([
        manager is not None,
        pg_ok,
        ms_ok,
        diagnostics is not None
    ])
    
    if RICH_AVAILABLE:
        console.print(f"\n[bold]–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {tests_passed}/4[/bold]")
        
        if tests_passed == 4:
            console.print(Panel.fit(
                "[bold green]‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û![/bold green]\n"
                "ConnectionManager –∏ ConnectionDiagnostics —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.",
                border_style="green"
            ))
        else:
            console.print(Panel.fit(
                f"[bold yellow]‚ö†Ô∏è  –ü–†–û–ô–î–ï–ù–û {tests_passed}/4 –¢–ï–°–¢–û–í[/bold yellow]\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.",
                border_style="yellow"
            ))
    else:
        print(f"\n–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {tests_passed}/4")
        if tests_passed == 4:
            print("\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        else:
            print(f"\n‚ö†Ô∏è  –ü–†–û–ô–î–ï–ù–û {tests_passed}/4 –¢–ï–°–¢–û–í")
    
    return tests_passed == 4


if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)

